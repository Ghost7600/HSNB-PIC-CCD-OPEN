
pwm_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099fc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08009b88  08009b88  00019b88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009de0  08009de0  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  08009de0  08009de0  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009de0  08009de0  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009de0  08009de0  00019de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009de4  08009de4  00019de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08009de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020108  2**0
                  CONTENTS
 10 .bss          00001f74  20000108  20000108  00020108  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000207c  2000207c  00020108  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016c7b  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a2d  00000000  00000000  00036db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  000397e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011b0  00000000  00000000  0003aa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f3a  00000000  00000000  0003bc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017334  00000000  00000000  0005db82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc7dd  00000000  00000000  00074eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00141693  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053fc  00000000  00000000  001416e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000108 	.word	0x20000108
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009b6c 	.word	0x08009b6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000010c 	.word	0x2000010c
 80001c4:	08009b6c 	.word	0x08009b6c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b44:	f001 fb7e 	bl	8002244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b48:	f000 f854 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4c:	f000 fb28 	bl	80011a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b50:	f000 fab0 	bl	80010b4 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000b54:	f000 fade 	bl	8001114 <MX_DMA_Init>
  MX_TIM1_Init();
 8000b58:	f000 f9e8 	bl	8000f2c <MX_TIM1_Init>
  MX_ADC1_Init();
 8000b5c:	f000 f8ae 	bl	8000cbc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b60:	f000 f938 	bl	8000dd4 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000b64:	f000 f9a2 	bl	8000eac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);

  //Sent init msg uart
  strcpy((char*)buffer, "INIT PWM CONTROLLER\r\n");
 8000b68:	4a1a      	ldr	r2, [pc, #104]	; (8000bd4 <main+0x94>)
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <main+0x98>)
 8000b6c:	4615      	mov	r5, r2
 8000b6e:	461c      	mov	r4, r3
 8000b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b72:	6028      	str	r0, [r5, #0]
 8000b74:	6069      	str	r1, [r5, #4]
 8000b76:	60aa      	str	r2, [r5, #8]
 8000b78:	60eb      	str	r3, [r5, #12]
 8000b7a:	6820      	ldr	r0, [r4, #0]
 8000b7c:	6128      	str	r0, [r5, #16]
 8000b7e:	88a3      	ldrh	r3, [r4, #4]
 8000b80:	82ab      	strh	r3, [r5, #20]
  HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000b82:	4814      	ldr	r0, [pc, #80]	; (8000bd4 <main+0x94>)
 8000b84:	f7ff fb20 	bl	80001c8 <strlen>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b90:	4910      	ldr	r1, [pc, #64]	; (8000bd4 <main+0x94>)
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <main+0x9c>)
 8000b94:	f007 fab7 	bl	8008106 <HAL_UART_Transmit>
   * 1 - fill up PWM array
   * 2 - start the TIM-DMA-PWM --> primary output
   * 3 - start the TIM-PWM --> complementary output */

  //fill up PWM arrays
  get_LUT();
 8000b98:	f000 fd62 	bl	8001660 <get_LUT>

  //Start DMA conversion - current sense
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buffer, (ADC1_CHANNELS * ADC_BUF_CURRSENSE_LEN));
 8000b9c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ba0:	490f      	ldr	r1, [pc, #60]	; (8000be0 <main+0xa0>)
 8000ba2:	4810      	ldr	r0, [pc, #64]	; (8000be4 <main+0xa4>)
 8000ba4:	f001 fd7e 	bl	80026a4 <HAL_ADC_Start_DMA>

  //Start DMA conversion - diagnostics
//  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buffer, (ADC2_CHANNELS * ADC_BUF_DIAGS_LEN));

  //Start listening I2C through DMA
  if(HAL_I2C_Slave_Receive_DMA(&hi2c1, i2c_data2receive, 2) != HAL_OK){
 8000ba8:	2202      	movs	r2, #2
 8000baa:	490f      	ldr	r1, [pc, #60]	; (8000be8 <main+0xa8>)
 8000bac:	480f      	ldr	r0, [pc, #60]	; (8000bec <main+0xac>)
 8000bae:	f003 f8e9 	bl	8003d84 <HAL_I2C_Slave_Receive_DMA>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <main+0x7c>
	  //report error
	  Error_Handler();
 8000bb8:	f000 fc9c 	bl	80014f4 <Error_Handler>
  }

  HAL_GPIO_WritePin(BR_ON_GPIO_Port, BR_ON_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	480b      	ldr	r0, [pc, #44]	; (8000bf0 <main+0xb0>)
 8000bc2:	f002 ff67 	bl	8003a94 <HAL_GPIO_WritePin>

    /* USER CODE BEGIN 3 */


	  //Run state machine
	  HAL_Delay(100);
 8000bc6:	2064      	movs	r0, #100	; 0x64
 8000bc8:	f001 fba2 	bl	8002310 <HAL_Delay>
	  run_motor_control_stmachine();
 8000bcc:	f000 fe46 	bl	800185c <run_motor_control_stmachine>
	  HAL_Delay(100);
 8000bd0:	e7f9      	b.n	8000bc6 <main+0x86>
 8000bd2:	bf00      	nop
 8000bd4:	20000694 	.word	0x20000694
 8000bd8:	08009b88 	.word	0x08009b88
 8000bdc:	20001f20 	.word	0x20001f20
 8000be0:	2000079c 	.word	0x2000079c
 8000be4:	20000644 	.word	0x20000644
 8000be8:	20000558 	.word	0x20000558
 8000bec:	20000324 	.word	0x20000324
 8000bf0:	48000400 	.word	0x48000400

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b096      	sub	sp, #88	; 0x58
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bfe:	2228      	movs	r2, #40	; 0x28
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f007 fe24 	bl	8008850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]
 8000c26:	615a      	str	r2, [r3, #20]
 8000c28:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c3c:	2310      	movs	r3, #16
 8000c3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c40:	2302      	movs	r3, #2
 8000c42:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000c4a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000c4e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c54:	4618      	mov	r0, r3
 8000c56:	f004 faf5 	bl	8005244 <HAL_RCC_OscConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000c60:	f000 fc48 	bl	80014f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c64:	230f      	movs	r3, #15
 8000c66:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	2102      	movs	r1, #2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f005 f9e7 	bl	8006054 <HAL_RCC_ClockConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c8c:	f000 fc32 	bl	80014f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 8000c90:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000c94:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f005 fc45 	bl	8006530 <HAL_RCCEx_PeriphCLKConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000cac:	f000 fc22 	bl	80014f4 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000cb0:	f005 fb4c 	bl	800634c <HAL_RCC_EnableCSS>
}
 8000cb4:	bf00      	nop
 8000cb6:	3758      	adds	r7, #88	; 0x58
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
 8000cdc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cde:	4b3c      	ldr	r3, [pc, #240]	; (8000dd0 <MX_ADC1_Init+0x114>)
 8000ce0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ce4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ce6:	4b3a      	ldr	r3, [pc, #232]	; (8000dd0 <MX_ADC1_Init+0x114>)
 8000ce8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cee:	4b38      	ldr	r3, [pc, #224]	; (8000dd0 <MX_ADC1_Init+0x114>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cf4:	4b36      	ldr	r3, [pc, #216]	; (8000dd0 <MX_ADC1_Init+0x114>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cfa:	4b35      	ldr	r3, [pc, #212]	; (8000dd0 <MX_ADC1_Init+0x114>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d00:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <MX_ADC1_Init+0x114>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d08:	4b31      	ldr	r3, [pc, #196]	; (8000dd0 <MX_ADC1_Init+0x114>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d0e:	4b30      	ldr	r3, [pc, #192]	; (8000dd0 <MX_ADC1_Init+0x114>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d14:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <MX_ADC1_Init+0x114>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000d1a:	4b2d      	ldr	r3, [pc, #180]	; (8000dd0 <MX_ADC1_Init+0x114>)
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d20:	4b2b      	ldr	r3, [pc, #172]	; (8000dd0 <MX_ADC1_Init+0x114>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d28:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <MX_ADC1_Init+0x114>)
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d2e:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <MX_ADC1_Init+0x114>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d34:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <MX_ADC1_Init+0x114>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d3a:	4825      	ldr	r0, [pc, #148]	; (8000dd0 <MX_ADC1_Init+0x114>)
 8000d3c:	f001 fb20 	bl	8002380 <HAL_ADC_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d46:	f000 fbd5 	bl	80014f4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	4619      	mov	r1, r3
 8000d54:	481e      	ldr	r0, [pc, #120]	; (8000dd0 <MX_ADC1_Init+0x114>)
 8000d56:	f002 f841 	bl	8002ddc <HAL_ADCEx_MultiModeConfigChannel>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000d60:	f000 fbc8 	bl	80014f4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d64:	2301      	movs	r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000d70:	2307      	movs	r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4813      	ldr	r0, [pc, #76]	; (8000dd0 <MX_ADC1_Init+0x114>)
 8000d82:	f001 fd69 	bl	8002858 <HAL_ADC_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000d8c:	f000 fbb2 	bl	80014f4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d90:	2302      	movs	r3, #2
 8000d92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <MX_ADC1_Init+0x114>)
 8000d9e:	f001 fd5b 	bl	8002858 <HAL_ADC_ConfigChannel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000da8:	f000 fba4 	bl	80014f4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000dac:	2306      	movs	r3, #6
 8000dae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000db0:	2303      	movs	r3, #3
 8000db2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_ADC1_Init+0x114>)
 8000dba:	f001 fd4d 	bl	8002858 <HAL_ADC_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8000dc4:	f000 fb96 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	; 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000644 	.word	0x20000644

08000dd4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dea:	4b2e      	ldr	r3, [pc, #184]	; (8000ea4 <MX_ADC2_Init+0xd0>)
 8000dec:	4a2e      	ldr	r2, [pc, #184]	; (8000ea8 <MX_ADC2_Init+0xd4>)
 8000dee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000df0:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <MX_ADC2_Init+0xd0>)
 8000df2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000df6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000df8:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <MX_ADC2_Init+0xd0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dfe:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <MX_ADC2_Init+0xd0>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000e04:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <MX_ADC2_Init+0xd0>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e0a:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <MX_ADC2_Init+0xd0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e12:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <MX_ADC2_Init+0xd0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <MX_ADC2_Init+0xd0>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <MX_ADC2_Init+0xd0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <MX_ADC2_Init+0xd0>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <MX_ADC2_Init+0xd0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <MX_ADC2_Init+0xd0>)
 8000e34:	2204      	movs	r2, #4
 8000e36:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_ADC2_Init+0xd0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_ADC2_Init+0xd0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e44:	4817      	ldr	r0, [pc, #92]	; (8000ea4 <MX_ADC2_Init+0xd0>)
 8000e46:	f001 fa9b 	bl	8002380 <HAL_ADC_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000e50:	f000 fb50 	bl	80014f4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e54:	2303      	movs	r3, #3
 8000e56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000e60:	2307      	movs	r3, #7
 8000e62:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <MX_ADC2_Init+0xd0>)
 8000e72:	f001 fcf1 	bl	8002858 <HAL_ADC_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000e7c:	f000 fb3a 	bl	80014f4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e80:	2304      	movs	r3, #4
 8000e82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_ADC2_Init+0xd0>)
 8000e8e:	f001 fce3 	bl	8002858 <HAL_ADC_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000e98:	f000 fb2c 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000290 	.word	0x20000290
 8000ea8:	50000100 	.word	0x50000100

08000eac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <MX_I2C1_Init+0x78>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000eb8:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <MX_I2C1_Init+0x7c>)
 8000eba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 14;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000ebe:	220e      	movs	r2, #14
 8000ec0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ee6:	480e      	ldr	r0, [pc, #56]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000ee8:	f002 fe06 	bl	8003af8 <HAL_I2C_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ef2:	f000 faff 	bl	80014f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4809      	ldr	r0, [pc, #36]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000efa:	f004 f90b 	bl	8005114 <HAL_I2CEx_ConfigAnalogFilter>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f04:	f000 faf6 	bl	80014f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_I2C1_Init+0x74>)
 8000f0c:	f004 f94d 	bl	80051aa <HAL_I2CEx_ConfigDigitalFilter>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f16:	f000 faed 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000324 	.word	0x20000324
 8000f24:	40005400 	.word	0x40005400
 8000f28:	2000090e 	.word	0x2000090e

08000f2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b09a      	sub	sp, #104	; 0x68
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
 8000f5c:	615a      	str	r2, [r3, #20]
 8000f5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	222c      	movs	r2, #44	; 0x2c
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f007 fc72 	bl	8008850 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f6c:	4b4f      	ldr	r3, [pc, #316]	; (80010ac <MX_TIM1_Init+0x180>)
 8000f6e:	4a50      	ldr	r2, [pc, #320]	; (80010b0 <MX_TIM1_Init+0x184>)
 8000f70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 8000f72:	4b4e      	ldr	r3, [pc, #312]	; (80010ac <MX_TIM1_Init+0x180>)
 8000f74:	221f      	movs	r2, #31
 8000f76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f78:	4b4c      	ldr	r3, [pc, #304]	; (80010ac <MX_TIM1_Init+0x180>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000f7e:	4b4b      	ldr	r3, [pc, #300]	; (80010ac <MX_TIM1_Init+0x180>)
 8000f80:	2263      	movs	r2, #99	; 0x63
 8000f82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f84:	4b49      	ldr	r3, [pc, #292]	; (80010ac <MX_TIM1_Init+0x180>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f8a:	4b48      	ldr	r3, [pc, #288]	; (80010ac <MX_TIM1_Init+0x180>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f90:	4b46      	ldr	r3, [pc, #280]	; (80010ac <MX_TIM1_Init+0x180>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f96:	4845      	ldr	r0, [pc, #276]	; (80010ac <MX_TIM1_Init+0x180>)
 8000f98:	f005 fc00 	bl	800679c <HAL_TIM_Base_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fa2:	f000 faa7 	bl	80014f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000faa:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	483e      	ldr	r0, [pc, #248]	; (80010ac <MX_TIM1_Init+0x180>)
 8000fb4:	f006 f8b4 	bl	8007120 <HAL_TIM_ConfigClockSource>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000fbe:	f000 fa99 	bl	80014f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fc2:	483a      	ldr	r0, [pc, #232]	; (80010ac <MX_TIM1_Init+0x180>)
 8000fc4:	f005 fc41 	bl	800684a <HAL_TIM_PWM_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000fce:	f000 fa91 	bl	80014f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4831      	ldr	r0, [pc, #196]	; (80010ac <MX_TIM1_Init+0x180>)
 8000fe6:	f006 ff35 	bl	8007e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000ff0:	f000 fa80 	bl	80014f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff4:	2360      	movs	r3, #96	; 0x60
 8000ff6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001000:	2300      	movs	r3, #0
 8001002:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001010:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001014:	2200      	movs	r2, #0
 8001016:	4619      	mov	r1, r3
 8001018:	4824      	ldr	r0, [pc, #144]	; (80010ac <MX_TIM1_Init+0x180>)
 800101a:	f005 ff6d 	bl	8006ef8 <HAL_TIM_PWM_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001024:	f000 fa66 	bl	80014f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001028:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800102c:	2204      	movs	r2, #4
 800102e:	4619      	mov	r1, r3
 8001030:	481e      	ldr	r0, [pc, #120]	; (80010ac <MX_TIM1_Init+0x180>)
 8001032:	f005 ff61 	bl	8006ef8 <HAL_TIM_PWM_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800103c:	f000 fa5a 	bl	80014f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001040:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001044:	2208      	movs	r2, #8
 8001046:	4619      	mov	r1, r3
 8001048:	4818      	ldr	r0, [pc, #96]	; (80010ac <MX_TIM1_Init+0x180>)
 800104a:	f005 ff55 	bl	8006ef8 <HAL_TIM_PWM_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001054:	f000 fa4e 	bl	80014f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800106c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001070:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800107a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	4619      	mov	r1, r3
 800108c:	4807      	ldr	r0, [pc, #28]	; (80010ac <MX_TIM1_Init+0x180>)
 800108e:	f006 ff4f 	bl	8007f30 <HAL_TIMEx_ConfigBreakDeadTime>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8001098:	f000 fa2c 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800109c:	4803      	ldr	r0, [pc, #12]	; (80010ac <MX_TIM1_Init+0x180>)
 800109e:	f000 ff71 	bl	8001f84 <HAL_TIM_MspPostInit>

}
 80010a2:	bf00      	nop
 80010a4:	3768      	adds	r7, #104	; 0x68
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000070c 	.word	0x2000070c
 80010b0:	40012c00 	.word	0x40012c00

080010b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <MX_USART2_UART_Init+0x58>)
 80010ba:	4a15      	ldr	r2, [pc, #84]	; (8001110 <MX_USART2_UART_Init+0x5c>)
 80010bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010be:	4b13      	ldr	r3, [pc, #76]	; (800110c <MX_USART2_UART_Init+0x58>)
 80010c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_USART2_UART_Init+0x58>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_USART2_UART_Init+0x58>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_USART2_UART_Init+0x58>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_USART2_UART_Init+0x58>)
 80010da:	220c      	movs	r2, #12
 80010dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <MX_USART2_UART_Init+0x58>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_USART2_UART_Init+0x58>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <MX_USART2_UART_Init+0x58>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_USART2_UART_Init+0x58>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_USART2_UART_Init+0x58>)
 80010f8:	f006 ffb7 	bl	800806a <HAL_UART_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001102:	f000 f9f7 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20001f20 	.word	0x20001f20
 8001110:	40004400 	.word	0x40004400

08001114 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800111a:	4b20      	ldr	r3, [pc, #128]	; (800119c <MX_DMA_Init+0x88>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	4a1f      	ldr	r2, [pc, #124]	; (800119c <MX_DMA_Init+0x88>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6153      	str	r3, [r2, #20]
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <MX_DMA_Init+0x88>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	200b      	movs	r0, #11
 8001138:	f002 f921 	bl	800337e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800113c:	200b      	movs	r0, #11
 800113e:	f002 f93a 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	200c      	movs	r0, #12
 8001148:	f002 f919 	bl	800337e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800114c:	200c      	movs	r0, #12
 800114e:	f002 f932 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	200d      	movs	r0, #13
 8001158:	f002 f911 	bl	800337e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800115c:	200d      	movs	r0, #13
 800115e:	f002 f92a 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	200e      	movs	r0, #14
 8001168:	f002 f909 	bl	800337e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800116c:	200e      	movs	r0, #14
 800116e:	f002 f922 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	200f      	movs	r0, #15
 8001178:	f002 f901 	bl	800337e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800117c:	200f      	movs	r0, #15
 800117e:	f002 f91a 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2010      	movs	r0, #16
 8001188:	f002 f8f9 	bl	800337e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800118c:	2010      	movs	r0, #16
 800118e:	f002 f912 	bl	80033b6 <HAL_NVIC_EnableIRQ>

}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000

080011a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b6:	4b35      	ldr	r3, [pc, #212]	; (800128c <MX_GPIO_Init+0xec>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a34      	ldr	r2, [pc, #208]	; (800128c <MX_GPIO_Init+0xec>)
 80011bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011c0:	6153      	str	r3, [r2, #20]
 80011c2:	4b32      	ldr	r3, [pc, #200]	; (800128c <MX_GPIO_Init+0xec>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ce:	4b2f      	ldr	r3, [pc, #188]	; (800128c <MX_GPIO_Init+0xec>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	4a2e      	ldr	r2, [pc, #184]	; (800128c <MX_GPIO_Init+0xec>)
 80011d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011d8:	6153      	str	r3, [r2, #20]
 80011da:	4b2c      	ldr	r3, [pc, #176]	; (800128c <MX_GPIO_Init+0xec>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b29      	ldr	r3, [pc, #164]	; (800128c <MX_GPIO_Init+0xec>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	4a28      	ldr	r2, [pc, #160]	; (800128c <MX_GPIO_Init+0xec>)
 80011ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f0:	6153      	str	r3, [r2, #20]
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <MX_GPIO_Init+0xec>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	4b23      	ldr	r3, [pc, #140]	; (800128c <MX_GPIO_Init+0xec>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a22      	ldr	r2, [pc, #136]	; (800128c <MX_GPIO_Init+0xec>)
 8001204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001208:	6153      	str	r3, [r2, #20]
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <MX_GPIO_Init+0xec>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2120      	movs	r1, #32
 800121a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121e:	f002 fc39 	bl	8003a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BR_ON_GPIO_Port, BR_ON_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2101      	movs	r1, #1
 8001226:	481a      	ldr	r0, [pc, #104]	; (8001290 <MX_GPIO_Init+0xf0>)
 8001228:	f002 fc34 	bl	8003a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800122c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001232:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4814      	ldr	r0, [pc, #80]	; (8001294 <MX_GPIO_Init+0xf4>)
 8001244:	f002 fab4 	bl	80037b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001248:	2320      	movs	r3, #32
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001262:	f002 faa5 	bl	80037b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BR_ON_Pin */
  GPIO_InitStruct.Pin = BR_ON_Pin;
 8001266:	2301      	movs	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	2301      	movs	r3, #1
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BR_ON_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4804      	ldr	r0, [pc, #16]	; (8001290 <MX_GPIO_Init+0xf0>)
 800127e:	f002 fa97 	bl	80037b0 <HAL_GPIO_Init>

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000
 8001290:	48000400 	.word	0x48000400
 8001294:	48000800 	.word	0x48000800

08001298 <Run_Motor>:

/* USER CODE BEGIN 4 */

void Run_Motor(void){
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)LUT_B1, LUTLEN);
 800129c:	2364      	movs	r3, #100	; 0x64
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <Run_Motor+0x50>)
 80012a0:	2100      	movs	r1, #0
 80012a2:	4812      	ldr	r0, [pc, #72]	; (80012ec <Run_Motor+0x54>)
 80012a4:	f005 fb32 	bl	800690c <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t *)LUT_B2, LUTLEN);
 80012a8:	2364      	movs	r3, #100	; 0x64
 80012aa:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <Run_Motor+0x58>)
 80012ac:	2104      	movs	r1, #4
 80012ae:	480f      	ldr	r0, [pc, #60]	; (80012ec <Run_Motor+0x54>)
 80012b0:	f005 fb2c 	bl	800690c <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t *)LUT_B3, LUTLEN);
 80012b4:	2364      	movs	r3, #100	; 0x64
 80012b6:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <Run_Motor+0x5c>)
 80012b8:	2108      	movs	r1, #8
 80012ba:	480c      	ldr	r0, [pc, #48]	; (80012ec <Run_Motor+0x54>)
 80012bc:	f005 fb26 	bl	800690c <HAL_TIM_PWM_Start_DMA>

	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80012c0:	2100      	movs	r1, #0
 80012c2:	480a      	ldr	r0, [pc, #40]	; (80012ec <Run_Motor+0x54>)
 80012c4:	f006 fcc2 	bl	8007c4c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80012c8:	2104      	movs	r1, #4
 80012ca:	4808      	ldr	r0, [pc, #32]	; (80012ec <Run_Motor+0x54>)
 80012cc:	f006 fcbe 	bl	8007c4c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80012d0:	2108      	movs	r1, #8
 80012d2:	4806      	ldr	r0, [pc, #24]	; (80012ec <Run_Motor+0x54>)
 80012d4:	f006 fcba 	bl	8007c4c <HAL_TIMEx_PWMN_Start>

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80012d8:	2120      	movs	r1, #32
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f002 fbf1 	bl	8003ac4 <HAL_GPIO_TogglePin>

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20001fa4 	.word	0x20001fa4
 80012ec:	2000070c 	.word	0x2000070c
 80012f0:	20000174 	.word	0x20000174
 80012f4:	20000568 	.word	0x20000568

080012f8 <Stop_Motor>:
void Stop_Motor(void){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80012fc:	2100      	movs	r1, #0
 80012fe:	480f      	ldr	r0, [pc, #60]	; (800133c <Stop_Motor+0x44>)
 8001300:	f005 fd0a 	bl	8006d18 <HAL_TIM_PWM_Stop_DMA>
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8001304:	2104      	movs	r1, #4
 8001306:	480d      	ldr	r0, [pc, #52]	; (800133c <Stop_Motor+0x44>)
 8001308:	f005 fd06 	bl	8006d18 <HAL_TIM_PWM_Stop_DMA>
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_3);
 800130c:	2108      	movs	r1, #8
 800130e:	480b      	ldr	r0, [pc, #44]	; (800133c <Stop_Motor+0x44>)
 8001310:	f005 fd02 	bl	8006d18 <HAL_TIM_PWM_Stop_DMA>

	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001314:	2100      	movs	r1, #0
 8001316:	4809      	ldr	r0, [pc, #36]	; (800133c <Stop_Motor+0x44>)
 8001318:	f006 fd3e 	bl	8007d98 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800131c:	2104      	movs	r1, #4
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <Stop_Motor+0x44>)
 8001320:	f006 fd3a 	bl	8007d98 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8001324:	2108      	movs	r1, #8
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <Stop_Motor+0x44>)
 8001328:	f006 fd36 	bl	8007d98 <HAL_TIMEx_PWMN_Stop>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	2120      	movs	r1, #32
 8001330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001334:	f002 fbae 	bl	8003a94 <HAL_GPIO_WritePin>

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2000070c 	.word	0x2000070c

08001340 <HAL_ADC_ConvCpltCallback>:
//executed when the ADC buffer is complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	//identify channel 1
	if(hadc->Instance == ADC1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001350:	d148      	bne.n	80013e4 <HAL_ADC_ConvCpltCallback+0xa4>
	{

		uint32_t sum_buffer_adc1[ADC1_CHANNELS]={0};
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]

		for(int i = 0 ; i<ADC_BUF_CURRSENSE_LEN;i++)
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	e023      	b.n	80013ac <HAL_ADC_ConvCpltCallback+0x6c>
		{
			for(int j = 0 ; j<ADC1_CHANNELS;j++)
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	e01a      	b.n	80013a0 <HAL_ADC_ConvCpltCallback+0x60>
			{
				sum_buffer_adc1[j] += adc1_buffer[j + (i*ADC1_CHANNELS)];
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	f107 0220 	add.w	r2, r7, #32
 8001372:	4413      	add	r3, r2
 8001374:	f853 1c14 	ldr.w	r1, [r3, #-20]
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	441a      	add	r2, r3
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	4413      	add	r3, r2
 8001384:	4a1a      	ldr	r2, [pc, #104]	; (80013f0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800138a:	18ca      	adds	r2, r1, r3
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	f107 0120 	add.w	r1, r7, #32
 8001394:	440b      	add	r3, r1
 8001396:	f843 2c14 	str.w	r2, [r3, #-20]
			for(int j = 0 ; j<ADC1_CHANNELS;j++)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	3301      	adds	r3, #1
 800139e:	61bb      	str	r3, [r7, #24]
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	dde1      	ble.n	800136a <HAL_ADC_ConvCpltCallback+0x2a>
		for(int i = 0 ; i<ADC_BUF_CURRSENSE_LEN;i++)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3301      	adds	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013b2:	dbd7      	blt.n	8001364 <HAL_ADC_ConvCpltCallback+0x24>
			}
		}

		iU = sum_buffer_adc1[iU_CHANNEL] / ADC_BUF_CURRSENSE_LEN;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <HAL_ADC_ConvCpltCallback+0xb4>)
 80013b8:	fba2 2303 	umull	r2, r3, r2, r3
 80013bc:	099b      	lsrs	r3, r3, #6
 80013be:	b29a      	uxth	r2, r3
 80013c0:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <HAL_ADC_ConvCpltCallback+0xb8>)
 80013c2:	801a      	strh	r2, [r3, #0]
		iV = sum_buffer_adc1[iV_CHANNEL] / ADC_BUF_CURRSENSE_LEN;
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <HAL_ADC_ConvCpltCallback+0xb4>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	099b      	lsrs	r3, r3, #6
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_ADC_ConvCpltCallback+0xbc>)
 80013d2:	801a      	strh	r2, [r3, #0]
		iW = sum_buffer_adc1[iW_CHANNEL] / ADC_BUF_CURRSENSE_LEN;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_ADC_ConvCpltCallback+0xb4>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	099b      	lsrs	r3, r3, #6
 80013de:	b29a      	uxth	r2, r3
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <HAL_ADC_ConvCpltCallback+0xc0>)
 80013e2:	801a      	strh	r2, [r3, #0]
//		VTH = sum_buffer_adc2[VTH_CHANNEL] / ADC_BUF_DIAGS_LEN;
//		DCBSENSE = sum_buffer_adc2[DCBSENSE_CHANNEL] / ADC_BUF_DIAGS_LEN;
//
//
	}
}
 80013e4:	bf00      	nop
 80013e6:	3724      	adds	r7, #36	; 0x24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	2000079c 	.word	0x2000079c
 80013f4:	10624dd3 	.word	0x10624dd3
 80013f8:	2000206c 	.word	0x2000206c
 80013fc:	200006f8 	.word	0x200006f8
 8001400:	20000124 	.word	0x20000124

08001404 <HAL_I2C_SlaveRxCpltCallback>:

/**
 * I2C Rx complete
 * callback will be executed when a read has completed
 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	//I2C Receive done!!!
	//once the receive is done, try to identify the master request

	switch (i2c_data2receive[0]) {
 800140c:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <HAL_I2C_SlaveRxCpltCallback+0xac>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	3ba0      	subs	r3, #160	; 0xa0
 8001412:	2b04      	cmp	r3, #4
 8001414:	d836      	bhi.n	8001484 <HAL_I2C_SlaveRxCpltCallback+0x80>
 8001416:	a201      	add	r2, pc, #4	; (adr r2, 800141c <HAL_I2C_SlaveRxCpltCallback+0x18>)
 8001418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141c:	08001431 	.word	0x08001431
 8001420:	08001441 	.word	0x08001441
 8001424:	08001455 	.word	0x08001455
 8001428:	08001469 	.word	0x08001469
 800142c:	08001477 	.word	0x08001477
		case READ_STATE:
			i2c_data2send[0] = READ_STATE;
 8001430:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <HAL_I2C_SlaveRxCpltCallback+0xb0>)
 8001432:	22a0      	movs	r2, #160	; 0xa0
 8001434:	701a      	strb	r2, [r3, #0]
			i2c_data2send[1] = cur_state;
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <HAL_I2C_SlaveRxCpltCallback+0xb4>)
 8001438:	781a      	ldrb	r2, [r3, #0]
 800143a:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <HAL_I2C_SlaveRxCpltCallback+0xb0>)
 800143c:	705a      	strb	r2, [r3, #1]
			break;
 800143e:	e028      	b.n	8001492 <HAL_I2C_SlaveRxCpltCallback+0x8e>
		case REQUEST_MOTOR_START:
			b_request_start = true;
 8001440:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <HAL_I2C_SlaveRxCpltCallback+0xb8>)
 8001442:	2201      	movs	r2, #1
 8001444:	701a      	strb	r2, [r3, #0]
			i2c_data2send[0] = REQUEST_MOTOR_START;
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <HAL_I2C_SlaveRxCpltCallback+0xb0>)
 8001448:	22a1      	movs	r2, #161	; 0xa1
 800144a:	701a      	strb	r2, [r3, #0]
			i2c_data2send[1] = 0x00;
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_I2C_SlaveRxCpltCallback+0xb0>)
 800144e:	2200      	movs	r2, #0
 8001450:	705a      	strb	r2, [r3, #1]
			break;
 8001452:	e01e      	b.n	8001492 <HAL_I2C_SlaveRxCpltCallback+0x8e>
		case REQUEST_MOTOR_STOP:
			b_request_stop = true;
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <HAL_I2C_SlaveRxCpltCallback+0xbc>)
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
			i2c_data2send[0] = REQUEST_MOTOR_STOP;
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <HAL_I2C_SlaveRxCpltCallback+0xb0>)
 800145c:	22a2      	movs	r2, #162	; 0xa2
 800145e:	701a      	strb	r2, [r3, #0]
			i2c_data2send[1] = 0x00;
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_I2C_SlaveRxCpltCallback+0xb0>)
 8001462:	2200      	movs	r2, #0
 8001464:	705a      	strb	r2, [r3, #1]
			break;
 8001466:	e014      	b.n	8001492 <HAL_I2C_SlaveRxCpltCallback+0x8e>
		case ACK_ERROR_RESET:
			i2c_data2send[0] = ACK_ERROR_RESET;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_I2C_SlaveRxCpltCallback+0xb0>)
 800146a:	22a3      	movs	r2, #163	; 0xa3
 800146c:	701a      	strb	r2, [r3, #0]
			i2c_data2send[1] = 0x00;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_I2C_SlaveRxCpltCallback+0xb0>)
 8001470:	2200      	movs	r2, #0
 8001472:	705a      	strb	r2, [r3, #1]
			break;
 8001474:	e00d      	b.n	8001492 <HAL_I2C_SlaveRxCpltCallback+0x8e>
		case READ_ERROR_NR:
			i2c_data2send[0] = READ_ERROR_NR;
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_I2C_SlaveRxCpltCallback+0xb0>)
 8001478:	22a4      	movs	r2, #164	; 0xa4
 800147a:	701a      	strb	r2, [r3, #0]
			i2c_data2send[1] = 0x00; //error nr
 800147c:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_I2C_SlaveRxCpltCallback+0xb0>)
 800147e:	2200      	movs	r2, #0
 8001480:	705a      	strb	r2, [r3, #1]
			break;
 8001482:	e006      	b.n	8001492 <HAL_I2C_SlaveRxCpltCallback+0x8e>
		default:
			//Wrong request or not available
			i2c_data2send[0] = 0xFF;
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_I2C_SlaveRxCpltCallback+0xb0>)
 8001486:	22ff      	movs	r2, #255	; 0xff
 8001488:	701a      	strb	r2, [r3, #0]
			i2c_data2send[1] = 0xFF;
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_I2C_SlaveRxCpltCallback+0xb0>)
 800148c:	22ff      	movs	r2, #255	; 0xff
 800148e:	705a      	strb	r2, [r3, #1]
			break;
 8001490:	bf00      	nop
	}

	//once the request is identified and the corresponding answer is assigned, transmit the answer.
	if(HAL_I2C_Slave_Transmit_DMA(&hi2c1, i2c_data2send, 2) != HAL_OK){
 8001492:	2202      	movs	r2, #2
 8001494:	4907      	ldr	r1, [pc, #28]	; (80014b4 <HAL_I2C_SlaveRxCpltCallback+0xb0>)
 8001496:	480b      	ldr	r0, [pc, #44]	; (80014c4 <HAL_I2C_SlaveRxCpltCallback+0xc0>)
 8001498:	f002 fbbe 	bl	8003c18 <HAL_I2C_Slave_Transmit_DMA>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_I2C_SlaveRxCpltCallback+0xa2>
	  //report error
	  Error_Handler();
 80014a2:	f000 f827 	bl	80014f4 <Error_Handler>
	}
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000558 	.word	0x20000558
 80014b4:	200006fc 	.word	0x200006fc
 80014b8:	20000126 	.word	0x20000126
 80014bc:	20000128 	.word	0x20000128
 80014c0:	20000129 	.word	0x20000129
 80014c4:	20000324 	.word	0x20000324

080014c8 <HAL_I2C_SlaveTxCpltCallback>:

/**
 * I2C Tx complete
 * callback will be executed when a write has completed
 */
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	//I2C Transmit done!!!
	//once the transmit is done, wait for the next request (read)
	if(HAL_I2C_Slave_Receive_DMA(&hi2c1, i2c_data2receive, 2) != HAL_OK){
 80014d0:	2202      	movs	r2, #2
 80014d2:	4906      	ldr	r1, [pc, #24]	; (80014ec <HAL_I2C_SlaveTxCpltCallback+0x24>)
 80014d4:	4806      	ldr	r0, [pc, #24]	; (80014f0 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 80014d6:	f002 fc55 	bl	8003d84 <HAL_I2C_Slave_Receive_DMA>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_I2C_SlaveTxCpltCallback+0x1c>
	  //report error
	  Error_Handler();
 80014e0:	f000 f808 	bl	80014f4 <Error_Handler>
	}
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000558 	.word	0x20000558
 80014f0:	20000324 	.word	0x20000324

080014f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
//  {
//  }
//	HAL_I2C_Slave_Receive_DMA(&hi2c1, i2c_data2receive, 2);

  /* USER CODE END Error_Handler_Debug */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	0000      	movs	r0, r0
 8001504:	0000      	movs	r0, r0
	...

08001508 <sv_pwm_120_ls>:
 *                 0           für 240°..360°
 *
 *========================================================================================
 **/
double sv_pwm_120_ls(double x)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	ed87 0b00 	vstr	d0, [r7]
	const double Pi = acos(-1);
 8001512:	a351      	add	r3, pc, #324	; (adr r3, 8001658 <sv_pwm_120_ls+0x150>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double result;
	//Ensure sine angle no bigger then 2PI
	x = fmod(x, 2*Pi);
 800151c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	f7fe fe5e 	bl	80001e4 <__adddf3>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	ec43 2b17 	vmov	d7, r2, r3
 8001530:	eeb0 1a47 	vmov.f32	s2, s14
 8001534:	eef0 1a67 	vmov.f32	s3, s15
 8001538:	ed97 0b00 	vldr	d0, [r7]
 800153c:	f007 f9e4 	bl	8008908 <fmod>
 8001540:	ed87 0b00 	vstr	d0, [r7]

	//Up to 120°, it is an original sine
	//Between 120° and 240°, an original sine is formed with a 60° shift (delay)
	//From 240° on, it is 0
	if((x>=0)&&(x < (2*Pi/3))) result = sin(x) ;
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001550:	f7ff fa84 	bl	8000a5c <__aeabi_dcmpge>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d01e      	beq.n	8001598 <sv_pwm_120_ls+0x90>
 800155a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	f7fe fe3f 	bl	80001e4 <__adddf3>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	4b37      	ldr	r3, [pc, #220]	; (8001650 <sv_pwm_120_ls+0x148>)
 8001574:	f7ff f916 	bl	80007a4 <__aeabi_ddiv>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001580:	f7ff fa58 	bl	8000a34 <__aeabi_dcmplt>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d006      	beq.n	8001598 <sv_pwm_120_ls+0x90>
 800158a:	ed97 0b00 	vldr	d0, [r7]
 800158e:	f007 f967 	bl	8008860 <sin>
 8001592:	ed87 0b04 	vstr	d0, [r7, #16]
 8001596:	e050      	b.n	800163a <sv_pwm_120_ls+0x132>
	else if ((x >= (2*Pi/3))&&(x < (4*Pi/3)))  result = sin(x-(Pi/3));
 8001598:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	f7fe fe20 	bl	80001e4 <__adddf3>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b27      	ldr	r3, [pc, #156]	; (8001650 <sv_pwm_120_ls+0x148>)
 80015b2:	f7ff f8f7 	bl	80007a4 <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015be:	f7ff fa4d 	bl	8000a5c <__aeabi_dcmpge>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d032      	beq.n	800162e <sv_pwm_120_ls+0x126>
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	4b21      	ldr	r3, [pc, #132]	; (8001654 <sv_pwm_120_ls+0x14c>)
 80015ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015d2:	f7fe ffbd 	bl	8000550 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <sv_pwm_120_ls+0x148>)
 80015e4:	f7ff f8de 	bl	80007a4 <__aeabi_ddiv>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015f0:	f7ff fa20 	bl	8000a34 <__aeabi_dcmplt>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d019      	beq.n	800162e <sv_pwm_120_ls+0x126>
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <sv_pwm_120_ls+0x148>)
 8001600:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001604:	f7ff f8ce 	bl	80007a4 <__aeabi_ddiv>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001610:	f7fe fde6 	bl	80001e0 <__aeabi_dsub>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	ec43 2b17 	vmov	d7, r2, r3
 800161c:	eeb0 0a47 	vmov.f32	s0, s14
 8001620:	eef0 0a67 	vmov.f32	s1, s15
 8001624:	f007 f91c 	bl	8008860 <sin>
 8001628:	ed87 0b04 	vstr	d0, [r7, #16]
 800162c:	e005      	b.n	800163a <sv_pwm_120_ls+0x132>
	else result = 0;
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return result;
 800163a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800163e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001642:	eeb0 0a47 	vmov.f32	s0, s14
 8001646:	eef0 0a67 	vmov.f32	s1, s15
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40080000 	.word	0x40080000
 8001654:	40100000 	.word	0x40100000
 8001658:	54442d18 	.word	0x54442d18
 800165c:	400921fb 	.word	0x400921fb

08001660 <get_LUT>:
 *
 *
 *========================================================================================
 **/
int get_LUT(void)
{
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
	const double Pi = acos(-1);
 8001666:	a37b      	add	r3, pc, #492	; (adr r3, 8001854 <get_LUT+0x1f4>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	e9c7 2300 	strd	r2, r3, [r7]

	//Fill each phase array with sine values and 120° shift
	for(int i=0;i<LUTLEN;i++)
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	e0d4      	b.n	8001820 <get_LUT+0x1c0>
	{
		//Phase 1
		// 2*PI* (ACTUAL_INDEX / MAX_INDEX)
		LUT_B1[i] = (uint16_t)(sv_pwm_120_ls(i*2*Pi/LUTLEN)*MAX_DUTY);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe fefe 	bl	800047c <__aeabi_i2d>
 8001680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001684:	f7fe ff64 	bl	8000550 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	4b68      	ldr	r3, [pc, #416]	; (8001838 <get_LUT+0x1d8>)
 8001696:	f7ff f885 	bl	80007a4 <__aeabi_ddiv>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	ec43 2b17 	vmov	d7, r2, r3
 80016a2:	eeb0 0a47 	vmov.f32	s0, s14
 80016a6:	eef0 0a67 	vmov.f32	s1, s15
 80016aa:	f7ff ff2d 	bl	8001508 <sv_pwm_120_ls>
 80016ae:	ec55 4b10 	vmov	r4, r5, d0
 80016b2:	4b62      	ldr	r3, [pc, #392]	; (800183c <get_LUT+0x1dc>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe fee0 	bl	800047c <__aeabi_i2d>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4620      	mov	r0, r4
 80016c2:	4629      	mov	r1, r5
 80016c4:	f7fe ff44 	bl	8000550 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fa16 	bl	8000b00 <__aeabi_d2uiz>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b299      	uxth	r1, r3
 80016d8:	4a59      	ldr	r2, [pc, #356]	; (8001840 <get_LUT+0x1e0>)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		//Phase 2
		// 2*PI* ((ACTUAL_INDEX + 240°) / MAX_INDEX)
		LUT_B2[i] = (uint16_t)(sv_pwm_120_ls((i*2*Pi/LUTLEN) + (4*Pi/3))*MAX_DUTY);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fec9 	bl	800047c <__aeabi_i2d>
 80016ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016ee:	f7fe ff2f 	bl	8000550 <__aeabi_dmul>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	4b4e      	ldr	r3, [pc, #312]	; (8001838 <get_LUT+0x1d8>)
 8001700:	f7ff f850 	bl	80007a4 <__aeabi_ddiv>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4614      	mov	r4, r2
 800170a:	461d      	mov	r5, r3
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	4b4c      	ldr	r3, [pc, #304]	; (8001844 <get_LUT+0x1e4>)
 8001712:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001716:	f7fe ff1b 	bl	8000550 <__aeabi_dmul>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	4b48      	ldr	r3, [pc, #288]	; (8001848 <get_LUT+0x1e8>)
 8001728:	f7ff f83c 	bl	80007a4 <__aeabi_ddiv>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4620      	mov	r0, r4
 8001732:	4629      	mov	r1, r5
 8001734:	f7fe fd56 	bl	80001e4 <__adddf3>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	ec43 2b17 	vmov	d7, r2, r3
 8001740:	eeb0 0a47 	vmov.f32	s0, s14
 8001744:	eef0 0a67 	vmov.f32	s1, s15
 8001748:	f7ff fede 	bl	8001508 <sv_pwm_120_ls>
 800174c:	ec55 4b10 	vmov	r4, r5, d0
 8001750:	4b3a      	ldr	r3, [pc, #232]	; (800183c <get_LUT+0x1dc>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fe91 	bl	800047c <__aeabi_i2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4620      	mov	r0, r4
 8001760:	4629      	mov	r1, r5
 8001762:	f7fe fef5 	bl	8000550 <__aeabi_dmul>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff f9c7 	bl	8000b00 <__aeabi_d2uiz>
 8001772:	4603      	mov	r3, r0
 8001774:	b299      	uxth	r1, r3
 8001776:	4a35      	ldr	r2, [pc, #212]	; (800184c <get_LUT+0x1ec>)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		//Phase 3
		// 2*PI* ((ACTUAL_INDEX + 120°) / MAX_INDEX)
		LUT_B3[i] = (uint16_t)(sv_pwm_120_ls((i*2*Pi/LUTLEN) + (2*Pi/3))*MAX_DUTY);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fe7a 	bl	800047c <__aeabi_i2d>
 8001788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800178c:	f7fe fee0 	bl	8000550 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	4b26      	ldr	r3, [pc, #152]	; (8001838 <get_LUT+0x1d8>)
 800179e:	f7ff f801 	bl	80007a4 <__aeabi_ddiv>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4614      	mov	r4, r2
 80017a8:	461d      	mov	r5, r3
 80017aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	f7fe fd17 	bl	80001e4 <__adddf3>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <get_LUT+0x1e8>)
 80017c4:	f7fe ffee 	bl	80007a4 <__aeabi_ddiv>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4620      	mov	r0, r4
 80017ce:	4629      	mov	r1, r5
 80017d0:	f7fe fd08 	bl	80001e4 <__adddf3>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	ec43 2b17 	vmov	d7, r2, r3
 80017dc:	eeb0 0a47 	vmov.f32	s0, s14
 80017e0:	eef0 0a67 	vmov.f32	s1, s15
 80017e4:	f7ff fe90 	bl	8001508 <sv_pwm_120_ls>
 80017e8:	ec55 4b10 	vmov	r4, r5, d0
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <get_LUT+0x1dc>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe43 	bl	800047c <__aeabi_i2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4620      	mov	r0, r4
 80017fc:	4629      	mov	r1, r5
 80017fe:	f7fe fea7 	bl	8000550 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff f979 	bl	8000b00 <__aeabi_d2uiz>
 800180e:	4603      	mov	r3, r0
 8001810:	b299      	uxth	r1, r3
 8001812:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <get_LUT+0x1f0>)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<LUTLEN;i++)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3301      	adds	r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b63      	cmp	r3, #99	; 0x63
 8001824:	f77f af27 	ble.w	8001676 <get_LUT+0x16>


	}
	return 0;
 8001828:	2300      	movs	r3, #0
} /* ENDE get_LUT_B1() */
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bdb0      	pop	{r4, r5, r7, pc}
 8001832:	bf00      	nop
 8001834:	f3af 8000 	nop.w
 8001838:	40590000 	.word	0x40590000
 800183c:	20000000 	.word	0x20000000
 8001840:	20001fa4 	.word	0x20001fa4
 8001844:	40100000 	.word	0x40100000
 8001848:	40080000 	.word	0x40080000
 800184c:	20000174 	.word	0x20000174
 8001850:	20000568 	.word	0x20000568
 8001854:	54442d18 	.word	0x54442d18
 8001858:	400921fb 	.word	0x400921fb

0800185c <run_motor_control_stmachine>:

/* Private user code ---------------------------------------------------------*/

// run_measurement_stmachine run the actual state and get the new state with available.
void run_motor_control_stmachine(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	/*
	 * if next_state is DO_NOTHING, means that the current state has already been performed once and
	 * the current state should not run twice. (take a look in lookup_transitions)
	 * so we do not run the function run_state if the next_state is DO_NOTHING
	 */
	if(next_state!=DO_NOTHING)
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <run_motor_control_stmachine+0x3c>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b06      	cmp	r3, #6
 8001866:	d004      	beq.n	8001872 <run_motor_control_stmachine+0x16>
	{
	  run_state(cur_state);
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <run_motor_control_stmachine+0x40>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f000 f817 	bl	80018a0 <run_state>
	}


	//Anyway, and regardless of the next state, it is necessary to check the available transitions
	next_state = lookup_transitions(cur_state);
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <run_motor_control_stmachine+0x40>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f824 	bl	80018c4 <lookup_transitions>
 800187c:	4603      	mov	r3, r0
 800187e:	461a      	mov	r2, r3
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <run_motor_control_stmachine+0x3c>)
 8001882:	701a      	strb	r2, [r3, #0]

	/*
	 * if next_state is DO_NOTHING, we do not actualize the cur_state
	 * it means the lookup_transitions has not found any other available state to run
	 */
	if(next_state!=DO_NOTHING)
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <run_motor_control_stmachine+0x3c>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b06      	cmp	r3, #6
 800188a:	d003      	beq.n	8001894 <run_motor_control_stmachine+0x38>
	{
	  cur_state = next_state;
 800188c:	4b02      	ldr	r3, [pc, #8]	; (8001898 <run_motor_control_stmachine+0x3c>)
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	4b02      	ldr	r3, [pc, #8]	; (800189c <run_motor_control_stmachine+0x40>)
 8001892:	701a      	strb	r2, [r3, #0]
	}
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000127 	.word	0x20000127
 800189c:	20000126 	.word	0x20000126

080018a0 <run_state>:

//run_state returns the current state function that must be executed over the states_type id
static state_function run_state( states_type cur_state) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
    return state_table[ cur_state ]();
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <run_state+0x20>)
 80018ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b2:	4798      	blx	r3
 80018b4:	4603      	mov	r3, r0
};
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	08009ba0 	.word	0x08009ba0

080018c4 <lookup_transitions>:

//lookup_transitions execute available transitions in the cur_state and try return a new state
static states_type lookup_transitions(states_type cur_state)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
	//get state_transitions length
	int8_t len_trans_table = sizeof(state_transitions)/sizeof(state_transitions[0]);
 80018ce:	230c      	movs	r3, #12
 80018d0:	73fb      	strb	r3, [r7, #15]

	//initialize next_state with DO_NOTHING
	//it means, if no any available transition return true
	//no state_funtion should be performed in the next cycle
	states_type next_state = DO_NOTHING;
 80018d2:	2306      	movs	r3, #6
 80018d4:	75fb      	strb	r3, [r7, #23]

	// Searching state_transitions
	for(int i=0; i<len_trans_table; i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	e027      	b.n	800192c <lookup_transitions+0x68>
	{

		if (state_transitions[i].cur_state == cur_state)
 80018dc:	4918      	ldr	r1, [pc, #96]	; (8001940 <lookup_transitions+0x7c>)
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	79fa      	ldrb	r2, [r7, #7]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d119      	bne.n	8001926 <lookup_transitions+0x62>
		{
			// if cur_state found in the table, get the available transition
			transition_function transition = state_transitions[i].transition;
 80018f2:	4913      	ldr	r1, [pc, #76]	; (8001940 <lookup_transitions+0x7c>)
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4613      	mov	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	3304      	adds	r3, #4
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	60bb      	str	r3, [r7, #8]

			if (transition())
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	4798      	blx	r3
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00a      	beq.n	8001926 <lookup_transitions+0x62>
			{
				// if available transition returns true, get available next_state and stop searching
				next_state = state_transitions[i].next_state;
 8001910:	490b      	ldr	r1, [pc, #44]	; (8001940 <lookup_transitions+0x7c>)
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	3308      	adds	r3, #8
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	75fb      	strb	r3, [r7, #23]
				break;
 8001924:	e007      	b.n	8001936 <lookup_transitions+0x72>
	for(int i=0; i<len_trans_table; i++)
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	3301      	adds	r3, #1
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	429a      	cmp	r2, r3
 8001934:	dbd2      	blt.n	80018dc <lookup_transitions+0x18>
			}

		}
	}
	return next_state;
 8001936:	7dfb      	ldrb	r3, [r7, #23]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000004 	.word	0x20000004

08001944 <st_initial>:
 * STATE FUNCTIONS
 */


static state_function st_initial(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
	__NOP();
 8001948:	bf00      	nop
	//state_function st_initial
}
 800194a:	bf00      	nop
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <st_idle>:

static state_function st_idle(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
	b_request_ack_reset = false;
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <st_idle+0x24>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
	b_request_start     = false;
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <st_idle+0x28>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
	b_request_stop      = false;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <st_idle+0x2c>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
	//state_function st_idle
}
 800196e:	bf00      	nop
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	2000012a 	.word	0x2000012a
 8001980:	20000128 	.word	0x20000128
 8001984:	20000129 	.word	0x20000129

08001988 <st_speeding_up>:

static state_function st_speeding_up(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

	//	Start timer DMA - PWM signals
	Run_Motor();
 800198c:	f7ff fc84 	bl	8001298 <Run_Motor>
}
 8001990:	bf00      	nop
 8001992:	4618      	mov	r0, r3
 8001994:	bd80      	pop	{r7, pc}

08001996 <st_motor_ready>:

static state_function st_motor_ready(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
	__NOP();
 800199a:	bf00      	nop
	//state_function st_motor_ready
}
 800199c:	bf00      	nop
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <st_speeding_down>:

static state_function st_speeding_down(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0

//	Stop timer DMA - PWM signals
	Stop_Motor();
 80019ac:	f7ff fca4 	bl	80012f8 <Stop_Motor>

//	Enable brake
//	Brake();

//	time couter motor down
	delay_motor_down.max_delay = DELAY_MOTOR_DOWN;
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <st_speeding_down+0x20>)
 80019b2:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80019b6:	809a      	strh	r2, [r3, #4]
	delay_motor_down.start_time = HAL_GetTick();
 80019b8:	f000 fc9e 	bl	80022f8 <HAL_GetTick>
 80019bc:	4603      	mov	r3, r0
 80019be:	4a02      	ldr	r2, [pc, #8]	; (80019c8 <st_speeding_down+0x20>)
 80019c0:	6013      	str	r3, [r2, #0]

}
 80019c2:	bf00      	nop
 80019c4:	4618      	mov	r0, r3
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20002070 	.word	0x20002070

080019cc <st_error>:

static state_function st_error(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
	__NOP();
 80019d0:	bf00      	nop
	//state_function st_error

//	Report error number
}
 80019d2:	bf00      	nop
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <tr_request_start>:
 * TRANSITION FUNCTIONS
 */


static transition_function tr_request_start(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
//	if(..,) return ... else return ...

//	if (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8))
	if (b_request_start == true)
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <tr_request_start+0x24>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d104      	bne.n	80019f6 <tr_request_start+0x16>
	{
		b_request_start = false;
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <tr_request_start+0x24>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
		return true;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <tr_request_start+0x18>
	}
	else{
		return false;
 80019f6:	2300      	movs	r3, #0
	}

}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000128 	.word	0x20000128

08001a08 <tr_constant_current_reached>:

static transition_function tr_constant_current_reached(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

	if(
			(abs(iU - SYNC_iU)<= CURRENT_MARGIN) &&
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <tr_constant_current_reached+0x64>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	f5a3 632c 	sub.w	r3, r3, #2752	; 0xac0
	if(
 8001a14:	f113 0f05 	cmn.w	r3, #5
 8001a18:	db21      	blt.n	8001a5e <tr_constant_current_reached+0x56>
			(abs(iU - SYNC_iU)<= CURRENT_MARGIN) &&
 8001a1a:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <tr_constant_current_reached+0x64>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	f5a3 632c 	sub.w	r3, r3, #2752	; 0xac0
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	dc1b      	bgt.n	8001a5e <tr_constant_current_reached+0x56>
			(abs(iV - SYNC_iV)<= CURRENT_MARGIN) &&
 8001a26:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <tr_constant_current_reached+0x68>)
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	f6a3 23b8 	subw	r3, r3, #2744	; 0xab8
			(abs(iU - SYNC_iU)<= CURRENT_MARGIN) &&
 8001a2e:	f113 0f05 	cmn.w	r3, #5
 8001a32:	db14      	blt.n	8001a5e <tr_constant_current_reached+0x56>
			(abs(iV - SYNC_iV)<= CURRENT_MARGIN) &&
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <tr_constant_current_reached+0x68>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	f6a3 23b8 	subw	r3, r3, #2744	; 0xab8
 8001a3c:	2b05      	cmp	r3, #5
 8001a3e:	dc0e      	bgt.n	8001a5e <tr_constant_current_reached+0x56>
			(abs(iW - SYNC_iW)<= CURRENT_MARGIN)
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <tr_constant_current_reached+0x6c>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	f6a3 23ae 	subw	r3, r3, #2734	; 0xaae
			(abs(iV - SYNC_iV)<= CURRENT_MARGIN) &&
 8001a48:	f113 0f05 	cmn.w	r3, #5
 8001a4c:	db07      	blt.n	8001a5e <tr_constant_current_reached+0x56>
			(abs(iW - SYNC_iW)<= CURRENT_MARGIN)
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <tr_constant_current_reached+0x6c>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	f6a3 23ae 	subw	r3, r3, #2734	; 0xaae
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	dc01      	bgt.n	8001a5e <tr_constant_current_reached+0x56>
			)
	{
		return true;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <tr_constant_current_reached+0x58>
	}else{
		return false;
 8001a5e:	2300      	movs	r3, #0
	}

}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	2000206c 	.word	0x2000206c
 8001a70:	200006f8 	.word	0x200006f8
 8001a74:	20000124 	.word	0x20000124

08001a78 <tr_request_stop>:

static transition_function tr_request_stop(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
//	if(..,) return ... else return ...
//	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8))
	if (b_request_stop == true)
 8001a7c:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <tr_request_stop+0x24>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d104      	bne.n	8001a8e <tr_request_stop+0x16>
	{
		b_request_stop = false;
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <tr_request_stop+0x24>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
		return true;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <tr_request_stop+0x18>
	}
	else{
		return false;
 8001a8e:	2300      	movs	r3, #0
	}
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000129 	.word	0x20000129

08001aa0 <tr_motor_is_down>:

static transition_function tr_motor_is_down(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0

	if(HAL_GetTick() >= (delay_motor_down.max_delay + delay_motor_down.start_time)){
 8001aa4:	f000 fc28 	bl	80022f8 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <tr_motor_is_down+0x24>)
 8001aac:	889b      	ldrh	r3, [r3, #4]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <tr_motor_is_down+0x24>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	440b      	add	r3, r1
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d301      	bcc.n	8001abe <tr_motor_is_down+0x1e>
		return true;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <tr_motor_is_down+0x20>
	}else{
		return false;
 8001abe:	2300      	movs	r3, #0
	}

}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20002070 	.word	0x20002070

08001ac8 <tr_isFail>:

static transition_function tr_isFail(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
//	if(..,) return ... else return ...
	return false;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <tr_ack_error>:

static transition_function tr_ack_error(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
//	if(..,) return ... else return ...
	return false;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <tr_return_true>:

static transition_function tr_return_true(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
	return true;
 8001aec:	2301      	movs	r3, #1
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <HAL_MspInit+0x54>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <HAL_MspInit+0x54>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6193      	str	r3, [r2, #24]
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_MspInit+0x54>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_MspInit+0x54>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a0c      	ldr	r2, [pc, #48]	; (8001b4c <HAL_MspInit+0x54>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	61d3      	str	r3, [r2, #28]
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_MspInit+0x54>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b2e:	2007      	movs	r0, #7
 8001b30:	f001 fc1a 	bl	8003368 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2100      	movs	r1, #0
 8001b38:	2051      	movs	r0, #81	; 0x51
 8001b3a:	f001 fc20 	bl	800337e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001b3e:	2051      	movs	r0, #81	; 0x51
 8001b40:	f001 fc39 	bl	80033b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40021000 	.word	0x40021000

08001b50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08c      	sub	sp, #48	; 0x30
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b70:	d16e      	bne.n	8001c50 <HAL_ADC_MspInit+0x100>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b72:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_ADC_MspInit+0x170>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	4a51      	ldr	r2, [pc, #324]	; (8001cc0 <HAL_ADC_MspInit+0x170>)
 8001b7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b7c:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <HAL_ADC_MspInit+0x170>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d10b      	bne.n	8001b9c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b84:	4b4f      	ldr	r3, [pc, #316]	; (8001cc4 <HAL_ADC_MspInit+0x174>)
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	4a4e      	ldr	r2, [pc, #312]	; (8001cc4 <HAL_ADC_MspInit+0x174>)
 8001b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	6153      	str	r3, [r2, #20]
 8001b90:	4b4c      	ldr	r3, [pc, #304]	; (8001cc4 <HAL_ADC_MspInit+0x174>)
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b98:	61bb      	str	r3, [r7, #24]
 8001b9a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9c:	4b49      	ldr	r3, [pc, #292]	; (8001cc4 <HAL_ADC_MspInit+0x174>)
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	4a48      	ldr	r2, [pc, #288]	; (8001cc4 <HAL_ADC_MspInit+0x174>)
 8001ba2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ba6:	6153      	str	r3, [r2, #20]
 8001ba8:	4b46      	ldr	r3, [pc, #280]	; (8001cc4 <HAL_ADC_MspInit+0x174>)
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb4:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <HAL_ADC_MspInit+0x174>)
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	4a42      	ldr	r2, [pc, #264]	; (8001cc4 <HAL_ADC_MspInit+0x174>)
 8001bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bbe:	6153      	str	r3, [r2, #20]
 8001bc0:	4b40      	ldr	r3, [pc, #256]	; (8001cc4 <HAL_ADC_MspInit+0x174>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = iW_sense_Pin;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(iW_sense_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	4619      	mov	r1, r3
 8001bde:	483a      	ldr	r0, [pc, #232]	; (8001cc8 <HAL_ADC_MspInit+0x178>)
 8001be0:	f001 fde6 	bl	80037b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = iU_sense_Pin|iV_sense_Pin;
 8001be4:	2303      	movs	r3, #3
 8001be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be8:	2303      	movs	r3, #3
 8001bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	f107 031c 	add.w	r3, r7, #28
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfa:	f001 fdd9 	bl	80037b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001bfe:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <HAL_ADC_MspInit+0x17c>)
 8001c00:	4a33      	ldr	r2, [pc, #204]	; (8001cd0 <HAL_ADC_MspInit+0x180>)
 8001c02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c04:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <HAL_ADC_MspInit+0x17c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0a:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <HAL_ADC_MspInit+0x17c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c10:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <HAL_ADC_MspInit+0x17c>)
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c16:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <HAL_ADC_MspInit+0x17c>)
 8001c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <HAL_ADC_MspInit+0x17c>)
 8001c20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c26:	4b29      	ldr	r3, [pc, #164]	; (8001ccc <HAL_ADC_MspInit+0x17c>)
 8001c28:	2220      	movs	r2, #32
 8001c2a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <HAL_ADC_MspInit+0x17c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c32:	4826      	ldr	r0, [pc, #152]	; (8001ccc <HAL_ADC_MspInit+0x17c>)
 8001c34:	f001 fbd9 	bl	80033ea <HAL_DMA_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 8001c3e:	f7ff fc59 	bl	80014f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a21      	ldr	r2, [pc, #132]	; (8001ccc <HAL_ADC_MspInit+0x17c>)
 8001c46:	639a      	str	r2, [r3, #56]	; 0x38
 8001c48:	4a20      	ldr	r2, [pc, #128]	; (8001ccc <HAL_ADC_MspInit+0x17c>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c4e:	e032      	b.n	8001cb6 <HAL_ADC_MspInit+0x166>
  else if(hadc->Instance==ADC2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <HAL_ADC_MspInit+0x184>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d12d      	bne.n	8001cb6 <HAL_ADC_MspInit+0x166>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_ADC_MspInit+0x170>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <HAL_ADC_MspInit+0x170>)
 8001c62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_ADC_MspInit+0x170>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d10b      	bne.n	8001c84 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c6c:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_ADC_MspInit+0x174>)
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <HAL_ADC_MspInit+0x174>)
 8001c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c76:	6153      	str	r3, [r2, #20]
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_ADC_MspInit+0x174>)
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_ADC_MspInit+0x174>)
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <HAL_ADC_MspInit+0x174>)
 8001c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8e:	6153      	str	r3, [r2, #20]
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_ADC_MspInit+0x174>)
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VTH_Pin|DCBSENSE_Pin;
 8001c9c:	23c0      	movs	r3, #192	; 0xc0
 8001c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	4619      	mov	r1, r3
 8001cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb2:	f001 fd7d 	bl	80037b0 <HAL_GPIO_Init>
}
 8001cb6:	bf00      	nop
 8001cb8:	3730      	adds	r7, #48	; 0x30
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	2000012c 	.word	0x2000012c
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	48000800 	.word	0x48000800
 8001ccc:	200006b4 	.word	0x200006b4
 8001cd0:	40020008 	.word	0x40020008
 8001cd4:	50000100 	.word	0x50000100

08001cd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	; 0x28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a48      	ldr	r2, [pc, #288]	; (8001e18 <HAL_I2C_MspInit+0x140>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	f040 8089 	bne.w	8001e0e <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfc:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <HAL_I2C_MspInit+0x144>)
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	4a46      	ldr	r2, [pc, #280]	; (8001e1c <HAL_I2C_MspInit+0x144>)
 8001d02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d06:	6153      	str	r3, [r2, #20]
 8001d08:	4b44      	ldr	r3, [pc, #272]	; (8001e1c <HAL_I2C_MspInit+0x144>)
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d1a:	2312      	movs	r3, #18
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d26:	2304      	movs	r3, #4
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	483b      	ldr	r0, [pc, #236]	; (8001e20 <HAL_I2C_MspInit+0x148>)
 8001d32:	f001 fd3d 	bl	80037b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d36:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <HAL_I2C_MspInit+0x144>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4a38      	ldr	r2, [pc, #224]	; (8001e1c <HAL_I2C_MspInit+0x144>)
 8001d3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d40:	61d3      	str	r3, [r2, #28]
 8001d42:	4b36      	ldr	r3, [pc, #216]	; (8001e1c <HAL_I2C_MspInit+0x144>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel5;
 8001d4e:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <HAL_I2C_MspInit+0x14c>)
 8001d50:	4a35      	ldr	r2, [pc, #212]	; (8001e28 <HAL_I2C_MspInit+0x150>)
 8001d52:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d54:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <HAL_I2C_MspInit+0x14c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d5a:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <HAL_I2C_MspInit+0x14c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d60:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_I2C_MspInit+0x14c>)
 8001d62:	2280      	movs	r2, #128	; 0x80
 8001d64:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d66:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <HAL_I2C_MspInit+0x14c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d6c:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <HAL_I2C_MspInit+0x14c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001d72:	4b2c      	ldr	r3, [pc, #176]	; (8001e24 <HAL_I2C_MspInit+0x14c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d78:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <HAL_I2C_MspInit+0x14c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001d7e:	4829      	ldr	r0, [pc, #164]	; (8001e24 <HAL_I2C_MspInit+0x14c>)
 8001d80:	f001 fb33 	bl	80033ea <HAL_DMA_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_I2C_MspInit+0xb6>
    {
      Error_Handler();
 8001d8a:	f7ff fbb3 	bl	80014f4 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_I2C1_RX_DMA1_CH5);
 8001d8e:	4b27      	ldr	r3, [pc, #156]	; (8001e2c <HAL_I2C_MspInit+0x154>)
 8001d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d92:	4a26      	ldr	r2, [pc, #152]	; (8001e2c <HAL_I2C_MspInit+0x154>)
 8001d94:	f043 0320 	orr.w	r3, r3, #32
 8001d98:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <HAL_I2C_MspInit+0x14c>)
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001da0:	4a20      	ldr	r2, [pc, #128]	; (8001e24 <HAL_I2C_MspInit+0x14c>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8001da6:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <HAL_I2C_MspInit+0x158>)
 8001da8:	4a22      	ldr	r2, [pc, #136]	; (8001e34 <HAL_I2C_MspInit+0x15c>)
 8001daa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dac:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <HAL_I2C_MspInit+0x158>)
 8001dae:	2210      	movs	r2, #16
 8001db0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db2:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <HAL_I2C_MspInit+0x158>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001db8:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <HAL_I2C_MspInit+0x158>)
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <HAL_I2C_MspInit+0x158>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <HAL_I2C_MspInit+0x158>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_I2C_MspInit+0x158>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dd0:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <HAL_I2C_MspInit+0x158>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001dd6:	4816      	ldr	r0, [pc, #88]	; (8001e30 <HAL_I2C_MspInit+0x158>)
 8001dd8:	f001 fb07 	bl	80033ea <HAL_DMA_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8001de2:	f7ff fb87 	bl	80014f4 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_I2C1_TX_DMA1_CH4);
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_I2C_MspInit+0x154>)
 8001de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dea:	4a10      	ldr	r2, [pc, #64]	; (8001e2c <HAL_I2C_MspInit+0x154>)
 8001dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df0:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <HAL_I2C_MspInit+0x158>)
 8001df6:	639a      	str	r2, [r3, #56]	; 0x38
 8001df8:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <HAL_I2C_MspInit+0x158>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	201f      	movs	r0, #31
 8001e04:	f001 fabb 	bl	800337e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e08:	201f      	movs	r0, #31
 8001e0a:	f001 fad4 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	3728      	adds	r7, #40	; 0x28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40005400 	.word	0x40005400
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	48000400 	.word	0x48000400
 8001e24:	20000758 	.word	0x20000758
 8001e28:	40020058 	.word	0x40020058
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	200002e0 	.word	0x200002e0
 8001e34:	40020044 	.word	0x40020044

08001e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a47      	ldr	r2, [pc, #284]	; (8001f64 <HAL_TIM_Base_MspInit+0x12c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	f040 8087 	bne.w	8001f5a <HAL_TIM_Base_MspInit+0x122>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e4c:	4b46      	ldr	r3, [pc, #280]	; (8001f68 <HAL_TIM_Base_MspInit+0x130>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	4a45      	ldr	r2, [pc, #276]	; (8001f68 <HAL_TIM_Base_MspInit+0x130>)
 8001e52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e56:	6193      	str	r3, [r2, #24]
 8001e58:	4b43      	ldr	r3, [pc, #268]	; (8001f68 <HAL_TIM_Base_MspInit+0x130>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001e64:	4b41      	ldr	r3, [pc, #260]	; (8001f6c <HAL_TIM_Base_MspInit+0x134>)
 8001e66:	4a42      	ldr	r2, [pc, #264]	; (8001f70 <HAL_TIM_Base_MspInit+0x138>)
 8001e68:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e6a:	4b40      	ldr	r3, [pc, #256]	; (8001f6c <HAL_TIM_Base_MspInit+0x134>)
 8001e6c:	2210      	movs	r2, #16
 8001e6e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e70:	4b3e      	ldr	r3, [pc, #248]	; (8001f6c <HAL_TIM_Base_MspInit+0x134>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001e76:	4b3d      	ldr	r3, [pc, #244]	; (8001f6c <HAL_TIM_Base_MspInit+0x134>)
 8001e78:	2280      	movs	r2, #128	; 0x80
 8001e7a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e7c:	4b3b      	ldr	r3, [pc, #236]	; (8001f6c <HAL_TIM_Base_MspInit+0x134>)
 8001e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e82:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e84:	4b39      	ldr	r3, [pc, #228]	; (8001f6c <HAL_TIM_Base_MspInit+0x134>)
 8001e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e8a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001e8c:	4b37      	ldr	r3, [pc, #220]	; (8001f6c <HAL_TIM_Base_MspInit+0x134>)
 8001e8e:	2220      	movs	r2, #32
 8001e90:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e92:	4b36      	ldr	r3, [pc, #216]	; (8001f6c <HAL_TIM_Base_MspInit+0x134>)
 8001e94:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001e98:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001e9a:	4834      	ldr	r0, [pc, #208]	; (8001f6c <HAL_TIM_Base_MspInit+0x134>)
 8001e9c:	f001 faa5 	bl	80033ea <HAL_DMA_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8001ea6:	f7ff fb25 	bl	80014f4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a2f      	ldr	r2, [pc, #188]	; (8001f6c <HAL_TIM_Base_MspInit+0x134>)
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24
 8001eb0:	4a2e      	ldr	r2, [pc, #184]	; (8001f6c <HAL_TIM_Base_MspInit+0x134>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8001eb6:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <HAL_TIM_Base_MspInit+0x13c>)
 8001eb8:	4a2f      	ldr	r2, [pc, #188]	; (8001f78 <HAL_TIM_Base_MspInit+0x140>)
 8001eba:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <HAL_TIM_Base_MspInit+0x13c>)
 8001ebe:	2210      	movs	r2, #16
 8001ec0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <HAL_TIM_Base_MspInit+0x13c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001ec8:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <HAL_TIM_Base_MspInit+0x13c>)
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ece:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <HAL_TIM_Base_MspInit+0x13c>)
 8001ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ed4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ed6:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <HAL_TIM_Base_MspInit+0x13c>)
 8001ed8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001edc:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8001ede:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <HAL_TIM_Base_MspInit+0x13c>)
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ee4:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <HAL_TIM_Base_MspInit+0x13c>)
 8001ee6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001eea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8001eec:	4821      	ldr	r0, [pc, #132]	; (8001f74 <HAL_TIM_Base_MspInit+0x13c>)
 8001eee:	f001 fa7c 	bl	80033ea <HAL_DMA_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_TIM_Base_MspInit+0xc4>
    {
      Error_Handler();
 8001ef8:	f7ff fafc 	bl	80014f4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <HAL_TIM_Base_MspInit+0x13c>)
 8001f00:	629a      	str	r2, [r3, #40]	; 0x28
 8001f02:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <HAL_TIM_Base_MspInit+0x13c>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel6;
 8001f08:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <HAL_TIM_Base_MspInit+0x144>)
 8001f0a:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <HAL_TIM_Base_MspInit+0x148>)
 8001f0c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_TIM_Base_MspInit+0x144>)
 8001f10:	2210      	movs	r2, #16
 8001f12:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_TIM_Base_MspInit+0x144>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_TIM_Base_MspInit+0x144>)
 8001f1c:	2280      	movs	r2, #128	; 0x80
 8001f1e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_TIM_Base_MspInit+0x144>)
 8001f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f26:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <HAL_TIM_Base_MspInit+0x144>)
 8001f2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f2e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_TIM_Base_MspInit+0x144>)
 8001f32:	2220      	movs	r2, #32
 8001f34:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_TIM_Base_MspInit+0x144>)
 8001f38:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001f3c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8001f3e:	480f      	ldr	r0, [pc, #60]	; (8001f7c <HAL_TIM_Base_MspInit+0x144>)
 8001f40:	f001 fa53 	bl	80033ea <HAL_DMA_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_TIM_Base_MspInit+0x116>
    {
      Error_Handler();
 8001f4a:	f7ff fad3 	bl	80014f4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <HAL_TIM_Base_MspInit+0x144>)
 8001f52:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f54:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <HAL_TIM_Base_MspInit+0x144>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40012c00 	.word	0x40012c00
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	20000130 	.word	0x20000130
 8001f70:	4002001c 	.word	0x4002001c
 8001f74:	20000380 	.word	0x20000380
 8001f78:	40020030 	.word	0x40020030
 8001f7c:	2000024c 	.word	0x2000024c
 8001f80:	4002006c 	.word	0x4002006c

08001f84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a29      	ldr	r2, [pc, #164]	; (8002048 <HAL_TIM_MspPostInit+0xc4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d14b      	bne.n	800203e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa6:	4b29      	ldr	r3, [pc, #164]	; (800204c <HAL_TIM_MspPostInit+0xc8>)
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	4a28      	ldr	r2, [pc, #160]	; (800204c <HAL_TIM_MspPostInit+0xc8>)
 8001fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb0:	6153      	str	r3, [r2, #20]
 8001fb2:	4b26      	ldr	r3, [pc, #152]	; (800204c <HAL_TIM_MspPostInit+0xc8>)
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	4b23      	ldr	r3, [pc, #140]	; (800204c <HAL_TIM_MspPostInit+0xc8>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4a22      	ldr	r2, [pc, #136]	; (800204c <HAL_TIM_MspPostInit+0xc8>)
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc8:	6153      	str	r3, [r2, #20]
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_TIM_MspPostInit+0xc8>)
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001fd6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001fe8:	2306      	movs	r3, #6
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4817      	ldr	r0, [pc, #92]	; (8002050 <HAL_TIM_MspPostInit+0xcc>)
 8001ff4:	f001 fbdc 	bl	80037b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800200a:	2304      	movs	r3, #4
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4619      	mov	r1, r3
 8002014:	480e      	ldr	r0, [pc, #56]	; (8002050 <HAL_TIM_MspPostInit+0xcc>)
 8002016:	f001 fbcb 	bl	80037b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800201a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800201e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800202c:	2306      	movs	r3, #6
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	4619      	mov	r1, r3
 8002036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800203a:	f001 fbb9 	bl	80037b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800203e:	bf00      	nop
 8002040:	3728      	adds	r7, #40	; 0x28
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40012c00 	.word	0x40012c00
 800204c:	40021000 	.word	0x40021000
 8002050:	48000400 	.word	0x48000400

08002054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <HAL_UART_MspInit+0x7c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d128      	bne.n	80020c8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002076:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <HAL_UART_MspInit+0x80>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	4a16      	ldr	r2, [pc, #88]	; (80020d4 <HAL_UART_MspInit+0x80>)
 800207c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002080:	61d3      	str	r3, [r2, #28]
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <HAL_UART_MspInit+0x80>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_UART_MspInit+0x80>)
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <HAL_UART_MspInit+0x80>)
 8002094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002098:	6153      	str	r3, [r2, #20]
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <HAL_UART_MspInit+0x80>)
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020a6:	230c      	movs	r3, #12
 80020a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b2:	2303      	movs	r3, #3
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020b6:	2307      	movs	r3, #7
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c4:	f001 fb74 	bl	80037b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020c8:	bf00      	nop
 80020ca:	3728      	adds	r7, #40	; 0x28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40004400 	.word	0x40004400
 80020d4:	40021000 	.word	0x40021000

080020d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80020dc:	f004 fa0c 	bl	80064f8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <NMI_Handler+0x8>

080020e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e6:	e7fe      	b.n	80020e6 <HardFault_Handler+0x4>

080020e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <MemManage_Handler+0x4>

080020ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <BusFault_Handler+0x4>

080020f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <UsageFault_Handler+0x4>

080020fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002128:	f000 f8d2 	bl	80022d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}

08002130 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <DMA1_Channel1_IRQHandler+0x10>)
 8002136:	f001 fa3c 	bl	80035b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200006b4 	.word	0x200006b4

08002144 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <DMA1_Channel2_IRQHandler+0x10>)
 800214a:	f001 fa32 	bl	80035b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000130 	.word	0x20000130

08002158 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <DMA1_Channel3_IRQHandler+0x10>)
 800215e:	f001 fa28 	bl	80035b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000380 	.word	0x20000380

0800216c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <DMA1_Channel4_IRQHandler+0x10>)
 8002172:	f001 fa1e 	bl	80035b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	200002e0 	.word	0x200002e0

08002180 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <DMA1_Channel5_IRQHandler+0x10>)
 8002186:	f001 fa14 	bl	80035b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000758 	.word	0x20000758

08002194 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <DMA1_Channel6_IRQHandler+0x10>)
 800219a:	f001 fa0a 	bl	80035b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000024c 	.word	0x2000024c

080021a8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <I2C1_EV_IRQHandler+0x10>)
 80021ae:	f001 fe9f 	bl	8003ef0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000324 	.word	0x20000324

080021bc <FPU_IRQHandler>:

/**
  * @brief This function handles Floating point unit interrupt.
  */
void FPU_IRQHandler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <SystemInit+0x20>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <SystemInit+0x20>)
 80021d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002228 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021f4:	480d      	ldr	r0, [pc, #52]	; (800222c <LoopForever+0x6>)
  ldr r1, =_edata
 80021f6:	490e      	ldr	r1, [pc, #56]	; (8002230 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021f8:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <LoopForever+0xe>)
  movs r3, #0
 80021fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021fc:	e002      	b.n	8002204 <LoopCopyDataInit>

080021fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002202:	3304      	adds	r3, #4

08002204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002208:	d3f9      	bcc.n	80021fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800220a:	4a0b      	ldr	r2, [pc, #44]	; (8002238 <LoopForever+0x12>)
  ldr r4, =_ebss
 800220c:	4c0b      	ldr	r4, [pc, #44]	; (800223c <LoopForever+0x16>)
  movs r3, #0
 800220e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002210:	e001      	b.n	8002216 <LoopFillZerobss>

08002212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002214:	3204      	adds	r2, #4

08002216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002218:	d3fb      	bcc.n	8002212 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800221a:	f7ff ffd7 	bl	80021cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800221e:	f006 faf3 	bl	8008808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002222:	f7fe fc8d 	bl	8000b40 <main>

08002226 <LoopForever>:

LoopForever:
    b LoopForever
 8002226:	e7fe      	b.n	8002226 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002228:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800222c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002230:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8002234:	08009de8 	.word	0x08009de8
  ldr r2, =_sbss
 8002238:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 800223c:	2000207c 	.word	0x2000207c

08002240 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002240:	e7fe      	b.n	8002240 <ADC1_2_IRQHandler>
	...

08002244 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <HAL_Init+0x28>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a07      	ldr	r2, [pc, #28]	; (800226c <HAL_Init+0x28>)
 800224e:	f043 0310 	orr.w	r3, r3, #16
 8002252:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002254:	2003      	movs	r0, #3
 8002256:	f001 f887 	bl	8003368 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800225a:	2000      	movs	r0, #0
 800225c:	f000 f808 	bl	8002270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002260:	f7ff fc4a 	bl	8001af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40022000 	.word	0x40022000

08002270 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_InitTick+0x54>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_InitTick+0x58>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002286:	fbb3 f3f1 	udiv	r3, r3, r1
 800228a:	fbb2 f3f3 	udiv	r3, r2, r3
 800228e:	4618      	mov	r0, r3
 8002290:	f001 f89f 	bl	80033d2 <HAL_SYSTICK_Config>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e00e      	b.n	80022bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b0f      	cmp	r3, #15
 80022a2:	d80a      	bhi.n	80022ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a4:	2200      	movs	r2, #0
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ac:	f001 f867 	bl	800337e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b0:	4a06      	ldr	r2, [pc, #24]	; (80022cc <HAL_InitTick+0x5c>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e000      	b.n	80022bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000094 	.word	0x20000094
 80022c8:	2000009c 	.word	0x2000009c
 80022cc:	20000098 	.word	0x20000098

080022d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_IncTick+0x20>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_IncTick+0x24>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <HAL_IncTick+0x24>)
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	2000009c 	.word	0x2000009c
 80022f4:	20002078 	.word	0x20002078

080022f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80022fc:	4b03      	ldr	r3, [pc, #12]	; (800230c <HAL_GetTick+0x14>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20002078 	.word	0x20002078

08002310 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7ff ffee 	bl	80022f8 <HAL_GetTick>
 800231c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d005      	beq.n	8002336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_Delay+0x44>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002336:	bf00      	nop
 8002338:	f7ff ffde 	bl	80022f8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	429a      	cmp	r2, r3
 8002346:	d8f7      	bhi.n	8002338 <HAL_Delay+0x28>
  {
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	2000009c 	.word	0x2000009c

08002358 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b09a      	sub	sp, #104	; 0x68
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e172      	b.n	8002686 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d176      	bne.n	80024a0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d152      	bne.n	8002460 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff fbbb 	bl	8001b50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d13b      	bne.n	8002460 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 fe87 	bl	80030fc <ADC_Disable>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d12f      	bne.n	8002460 <HAL_ADC_Init+0xe0>
 8002400:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002404:	2b00      	cmp	r3, #0
 8002406:	d12b      	bne.n	8002460 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002410:	f023 0302 	bic.w	r3, r3, #2
 8002414:	f043 0202 	orr.w	r2, r3, #2
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800242a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800243a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800243c:	4b94      	ldr	r3, [pc, #592]	; (8002690 <HAL_ADC_Init+0x310>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a94      	ldr	r2, [pc, #592]	; (8002694 <HAL_ADC_Init+0x314>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	0c9a      	lsrs	r2, r3, #18
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002452:	e002      	b.n	800245a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	3b01      	subs	r3, #1
 8002458:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f9      	bne.n	8002454 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d007      	beq.n	800247e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800247c:	d110      	bne.n	80024a0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f023 0312 	bic.w	r3, r3, #18
 8002486:	f043 0210 	orr.w	r2, r3, #16
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f040 80df 	bne.w	800266c <HAL_ADC_Init+0x2ec>
 80024ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 80da 	bne.w	800266c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 80d2 	bne.w	800266c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024d0:	f043 0202 	orr.w	r2, r3, #2
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024d8:	4b6f      	ldr	r3, [pc, #444]	; (8002698 <HAL_ADC_Init+0x318>)
 80024da:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024e4:	d102      	bne.n	80024ec <HAL_ADC_Init+0x16c>
 80024e6:	4b6d      	ldr	r3, [pc, #436]	; (800269c <HAL_ADC_Init+0x31c>)
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	e002      	b.n	80024f2 <HAL_ADC_Init+0x172>
 80024ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024f0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d108      	bne.n	8002512 <HAL_ADC_Init+0x192>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_ADC_Init+0x192>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_ADC_Init+0x194>
 8002512:	2300      	movs	r3, #0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d11c      	bne.n	8002552 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002518:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800251a:	2b00      	cmp	r3, #0
 800251c:	d010      	beq.n	8002540 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d107      	bne.n	800253a <HAL_ADC_Init+0x1ba>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_ADC_Init+0x1ba>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_ADC_Init+0x1bc>
 800253a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800253c:	2b00      	cmp	r3, #0
 800253e:	d108      	bne.n	8002552 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	431a      	orrs	r2, r3
 800254e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002550:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7e5b      	ldrb	r3, [r3, #25]
 8002556:	035b      	lsls	r3, r3, #13
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800255c:	2a01      	cmp	r2, #1
 800255e:	d002      	beq.n	8002566 <HAL_ADC_Init+0x1e6>
 8002560:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002564:	e000      	b.n	8002568 <HAL_ADC_Init+0x1e8>
 8002566:	2200      	movs	r2, #0
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4313      	orrs	r3, r2
 8002576:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002578:	4313      	orrs	r3, r2
 800257a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d11b      	bne.n	80025be <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	7e5b      	ldrb	r3, [r3, #25]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	3b01      	subs	r3, #1
 8002594:	045a      	lsls	r2, r3, #17
 8002596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002598:	4313      	orrs	r3, r2
 800259a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259e:	663b      	str	r3, [r7, #96]	; 0x60
 80025a0:	e00d      	b.n	80025be <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80025aa:	f043 0220 	orr.w	r2, r3, #32
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f043 0201 	orr.w	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d007      	beq.n	80025d6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	4313      	orrs	r3, r2
 80025d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025d2:	4313      	orrs	r3, r2
 80025d4:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 030c 	and.w	r3, r3, #12
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d114      	bne.n	800260e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025f2:	f023 0302 	bic.w	r3, r3, #2
 80025f6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	7e1b      	ldrb	r3, [r3, #24]
 80025fc:	039a      	lsls	r2, r3, #14
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4313      	orrs	r3, r2
 8002608:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800260a:	4313      	orrs	r3, r2
 800260c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <HAL_ADC_Init+0x320>)
 8002616:	4013      	ands	r3, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800261e:	430b      	orrs	r3, r1
 8002620:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d10c      	bne.n	8002644 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	f023 010f 	bic.w	r1, r3, #15
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	1e5a      	subs	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
 8002642:	e007      	b.n	8002654 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 020f 	bic.w	r2, r2, #15
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f023 0303 	bic.w	r3, r3, #3
 8002662:	f043 0201 	orr.w	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	641a      	str	r2, [r3, #64]	; 0x40
 800266a:	e00a      	b.n	8002682 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f023 0312 	bic.w	r3, r3, #18
 8002674:	f043 0210 	orr.w	r2, r3, #16
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800267c:	2301      	movs	r3, #1
 800267e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002682:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002686:	4618      	mov	r0, r3
 8002688:	3768      	adds	r7, #104	; 0x68
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000094 	.word	0x20000094
 8002694:	431bde83 	.word	0x431bde83
 8002698:	50000300 	.word	0x50000300
 800269c:	50000100 	.word	0x50000100
 80026a0:	fff0c007 	.word	0xfff0c007

080026a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f040 80b9 	bne.w	8002836 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_ADC_Start_DMA+0x2e>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e0b4      	b.n	800283c <HAL_ADC_Start_DMA+0x198>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80026da:	4b5a      	ldr	r3, [pc, #360]	; (8002844 <HAL_ADC_Start_DMA+0x1a0>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 031f 	and.w	r3, r3, #31
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 80a0 	bne.w	8002828 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 fca3 	bl	8003034 <ADC_Enable>
 80026ee:	4603      	mov	r3, r0
 80026f0:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f040 8092 	bne.w	800281e <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800270e:	4b4d      	ldr	r3, [pc, #308]	; (8002844 <HAL_ADC_Start_DMA+0x1a0>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	2b00      	cmp	r3, #0
 8002718:	d004      	beq.n	8002724 <HAL_ADC_Start_DMA+0x80>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002722:	d115      	bne.n	8002750 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d027      	beq.n	800278e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002746:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800274e:	e01e      	b.n	800278e <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002764:	d004      	beq.n	8002770 <HAL_ADC_Start_DMA+0xcc>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a37      	ldr	r2, [pc, #220]	; (8002848 <HAL_ADC_Start_DMA+0x1a4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d10e      	bne.n	800278e <HAL_ADC_Start_DMA+0xea>
 8002770:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002786:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279a:	d106      	bne.n	80027aa <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	f023 0206 	bic.w	r2, r3, #6
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	645a      	str	r2, [r3, #68]	; 0x44
 80027a8:	e002      	b.n	80027b0 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027bc:	4a23      	ldr	r2, [pc, #140]	; (800284c <HAL_ADC_Start_DMA+0x1a8>)
 80027be:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c4:	4a22      	ldr	r2, [pc, #136]	; (8002850 <HAL_ADC_Start_DMA+0x1ac>)
 80027c6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	4a21      	ldr	r2, [pc, #132]	; (8002854 <HAL_ADC_Start_DMA+0x1b0>)
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	221c      	movs	r2, #28
 80027d6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0210 	orr.w	r2, r2, #16
 80027e6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	3340      	adds	r3, #64	; 0x40
 8002802:	4619      	mov	r1, r3
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f000 fe36 	bl	8003478 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0204 	orr.w	r2, r2, #4
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	e00d      	b.n	800283a <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002826:	e008      	b.n	800283a <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002834:	e001      	b.n	800283a <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002836:	2302      	movs	r3, #2
 8002838:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800283a:	7dfb      	ldrb	r3, [r7, #23]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	50000300 	.word	0x50000300
 8002848:	50000100 	.word	0x50000100
 800284c:	08002f69 	.word	0x08002f69
 8002850:	08002fe3 	.word	0x08002fe3
 8002854:	08002fff 	.word	0x08002fff

08002858 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002858:	b480      	push	{r7}
 800285a:	b09b      	sub	sp, #108	; 0x6c
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_ADC_ConfigChannel+0x22>
 8002876:	2302      	movs	r3, #2
 8002878:	e2a5      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x56e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	f040 8289 	bne.w	8002da4 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b04      	cmp	r3, #4
 8002898:	d81c      	bhi.n	80028d4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	461a      	mov	r2, r3
 80028ae:	231f      	movs	r3, #31
 80028b0:	4093      	lsls	r3, r2
 80028b2:	43db      	mvns	r3, r3
 80028b4:	4019      	ands	r1, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	fa00 f203 	lsl.w	r2, r0, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30
 80028d2:	e063      	b.n	800299c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b09      	cmp	r3, #9
 80028da:	d81e      	bhi.n	800291a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4413      	add	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	3b1e      	subs	r3, #30
 80028f0:	221f      	movs	r2, #31
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	4019      	ands	r1, r3
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	3b1e      	subs	r3, #30
 800290c:	fa00 f203 	lsl.w	r2, r0, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	635a      	str	r2, [r3, #52]	; 0x34
 8002918:	e040      	b.n	800299c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b0e      	cmp	r3, #14
 8002920:	d81e      	bhi.n	8002960 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	3b3c      	subs	r3, #60	; 0x3c
 8002936:	221f      	movs	r2, #31
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	4019      	ands	r1, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	3b3c      	subs	r3, #60	; 0x3c
 8002952:	fa00 f203 	lsl.w	r2, r0, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	639a      	str	r2, [r3, #56]	; 0x38
 800295e:	e01d      	b.n	800299c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	3b5a      	subs	r3, #90	; 0x5a
 8002974:	221f      	movs	r2, #31
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	4019      	ands	r1, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	3b5a      	subs	r3, #90	; 0x5a
 8002990:	fa00 f203 	lsl.w	r2, r0, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 80e5 	bne.w	8002b76 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b09      	cmp	r3, #9
 80029b2:	d91c      	bls.n	80029ee <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6999      	ldr	r1, [r3, #24]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	3b1e      	subs	r3, #30
 80029c6:	2207      	movs	r2, #7
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	4019      	ands	r1, r3
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	6898      	ldr	r0, [r3, #8]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4413      	add	r3, r2
 80029de:	3b1e      	subs	r3, #30
 80029e0:	fa00 f203 	lsl.w	r2, r0, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	619a      	str	r2, [r3, #24]
 80029ec:	e019      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6959      	ldr	r1, [r3, #20]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4413      	add	r3, r2
 80029fe:	2207      	movs	r2, #7
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	4019      	ands	r1, r3
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	6898      	ldr	r0, [r3, #8]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4613      	mov	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4413      	add	r3, r2
 8002a16:	fa00 f203 	lsl.w	r2, r0, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	695a      	ldr	r2, [r3, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	08db      	lsrs	r3, r3, #3
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d84f      	bhi.n	8002ae4 <HAL_ADC_ConfigChannel+0x28c>
 8002a44:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <HAL_ADC_ConfigChannel+0x1f4>)
 8002a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4a:	bf00      	nop
 8002a4c:	08002a5d 	.word	0x08002a5d
 8002a50:	08002a7f 	.word	0x08002a7f
 8002a54:	08002aa1 	.word	0x08002aa1
 8002a58:	08002ac3 	.word	0x08002ac3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a62:	4b9e      	ldr	r3, [pc, #632]	; (8002cdc <HAL_ADC_ConfigChannel+0x484>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	0691      	lsls	r1, r2, #26
 8002a6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a7a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a7c:	e07e      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a84:	4b95      	ldr	r3, [pc, #596]	; (8002cdc <HAL_ADC_ConfigChannel+0x484>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	0691      	lsls	r1, r2, #26
 8002a8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a90:	430a      	orrs	r2, r1
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a9c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a9e:	e06d      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002aa6:	4b8d      	ldr	r3, [pc, #564]	; (8002cdc <HAL_ADC_ConfigChannel+0x484>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	0691      	lsls	r1, r2, #26
 8002ab0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002abe:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ac0:	e05c      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ac8:	4b84      	ldr	r3, [pc, #528]	; (8002cdc <HAL_ADC_ConfigChannel+0x484>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	0691      	lsls	r1, r2, #26
 8002ad2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ae0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ae2:	e04b      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	069b      	lsls	r3, r3, #26
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d107      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b06:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	069b      	lsls	r3, r3, #26
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d107      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b2a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	069b      	lsls	r3, r3, #26
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d107      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b4e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	069b      	lsls	r3, r3, #26
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d10a      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b72:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002b74:	e001      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002b76:	bf00      	nop
 8002b78:	e000      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x324>
      break;
 8002b7a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d108      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x344>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x344>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x346>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f040 810b 	bne.w	8002dba <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d00f      	beq.n	8002bcc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002bca:	e049      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b09      	cmp	r3, #9
 8002bec:	d91c      	bls.n	8002c28 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6999      	ldr	r1, [r3, #24]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3b1b      	subs	r3, #27
 8002c00:	2207      	movs	r2, #7
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	4019      	ands	r1, r3
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6898      	ldr	r0, [r3, #8]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	3b1b      	subs	r3, #27
 8002c1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	619a      	str	r2, [r3, #24]
 8002c26:	e01b      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6959      	ldr	r1, [r3, #20]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	4019      	ands	r1, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6898      	ldr	r0, [r3, #8]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	4613      	mov	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4413      	add	r3, r2
 8002c54:	fa00 f203 	lsl.w	r2, r0, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c60:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <HAL_ADC_ConfigChannel+0x488>)
 8002c62:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d105      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d015      	beq.n	8002ca4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c7c:	2b11      	cmp	r3, #17
 8002c7e:	d105      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00b      	beq.n	8002ca4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c90:	2b12      	cmp	r3, #18
 8002c92:	f040 8092 	bne.w	8002dba <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f040 808b 	bne.w	8002dba <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cac:	d102      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x45c>
 8002cae:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <HAL_ADC_ConfigChannel+0x48c>)
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	e002      	b.n	8002cba <HAL_ADC_ConfigChannel+0x462>
 8002cb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cb8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d10f      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x490>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d108      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x490>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e007      	b.n	8002cea <HAL_ADC_ConfigChannel+0x492>
 8002cda:	bf00      	nop
 8002cdc:	83fff000 	.word	0x83fff000
 8002ce0:	50000300 	.word	0x50000300
 8002ce4:	50000100 	.word	0x50000100
 8002ce8:	2300      	movs	r3, #0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d150      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cee:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d010      	beq.n	8002d16 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d107      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x4b8>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x4b8>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x4ba>
 8002d10:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d13c      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b10      	cmp	r3, #16
 8002d1c:	d11d      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x502>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d26:	d118      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d32:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d34:	4b27      	ldr	r3, [pc, #156]	; (8002dd4 <HAL_ADC_ConfigChannel+0x57c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a27      	ldr	r2, [pc, #156]	; (8002dd8 <HAL_ADC_ConfigChannel+0x580>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	0c9a      	lsrs	r2, r3, #18
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d4a:	e002      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f9      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d58:	e02e      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b11      	cmp	r3, #17
 8002d60:	d10b      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x522>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d6a:	d106      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002d74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d76:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d78:	e01e      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b12      	cmp	r3, #18
 8002d80:	d11a      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d8c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d8e:	e013      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f043 0220 	orr.w	r2, r3, #32
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002da2:	e00a      	b.n	8002dba <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	f043 0220 	orr.w	r2, r3, #32
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002db6:	e000      	b.n	8002dba <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002db8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002dc2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	376c      	adds	r7, #108	; 0x6c
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000094 	.word	0x20000094
 8002dd8:	431bde83 	.word	0x431bde83

08002ddc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b099      	sub	sp, #100	; 0x64
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002df4:	d102      	bne.n	8002dfc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002df6:	4b5a      	ldr	r3, [pc, #360]	; (8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	e002      	b.n	8002e02 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002dfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e00:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0a2      	b.n	8002f52 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e09b      	b.n	8002f52 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d17f      	bne.n	8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d179      	bne.n	8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e3c:	4b49      	ldr	r3, [pc, #292]	; (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002e3e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d040      	beq.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002e48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e5a:	035b      	lsls	r3, r3, #13
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e62:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d108      	bne.n	8002e84 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002e84:	2300      	movs	r3, #0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d15c      	bne.n	8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d107      	bne.n	8002ea6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002ea6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d14b      	bne.n	8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002eac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002eb4:	f023 030f 	bic.w	r3, r3, #15
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	6811      	ldr	r1, [r2, #0]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	6892      	ldr	r2, [r2, #8]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ec8:	e03c      	b.n	8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ed4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d108      	bne.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d123      	bne.n	8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d107      	bne.n	8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002f18:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d112      	bne.n	8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f26:	f023 030f 	bic.w	r3, r3, #15
 8002f2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f2c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f2e:	e009      	b.n	8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	f043 0220 	orr.w	r2, r3, #32
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002f42:	e000      	b.n	8002f46 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f44:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002f52:	4618      	mov	r0, r3
 8002f54:	3764      	adds	r7, #100	; 0x64
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	50000100 	.word	0x50000100
 8002f64:	50000300 	.word	0x50000300

08002f68 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d126      	bne.n	8002fd0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d115      	bne.n	8002fc8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d111      	bne.n	8002fc8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d105      	bne.n	8002fc8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f043 0201 	orr.w	r2, r3, #1
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f7fe f9b9 	bl	8001340 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002fce:	e004      	b.n	8002fda <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	4798      	blx	r3
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f7ff f9b1 	bl	8002358 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002ff6:	bf00      	nop
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301c:	f043 0204 	orr.w	r2, r3, #4
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f7ff f9a1 	bl	800236c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800302a:	bf00      	nop
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d108      	bne.n	8003060 <ADC_Enable+0x2c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <ADC_Enable+0x2c>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <ADC_Enable+0x2e>
 8003060:	2300      	movs	r3, #0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d143      	bne.n	80030ee <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <ADC_Enable+0xc4>)
 800306e:	4013      	ands	r3, r2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00d      	beq.n	8003090 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	f043 0210 	orr.w	r2, r3, #16
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003084:	f043 0201 	orr.w	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e02f      	b.n	80030f0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80030a0:	f7ff f92a 	bl	80022f8 <HAL_GetTick>
 80030a4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030a6:	e01b      	b.n	80030e0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030a8:	f7ff f926 	bl	80022f8 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d914      	bls.n	80030e0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d00d      	beq.n	80030e0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	f043 0210 	orr.w	r2, r3, #16
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e007      	b.n	80030f0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d1dc      	bne.n	80030a8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	8000003f 	.word	0x8000003f

080030fc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b01      	cmp	r3, #1
 8003114:	d108      	bne.n	8003128 <ADC_Disable+0x2c>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <ADC_Disable+0x2c>
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <ADC_Disable+0x2e>
 8003128:	2300      	movs	r3, #0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d047      	beq.n	80031be <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 030d 	and.w	r3, r3, #13
 8003138:	2b01      	cmp	r3, #1
 800313a:	d10f      	bne.n	800315c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0202 	orr.w	r2, r2, #2
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2203      	movs	r2, #3
 8003152:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003154:	f7ff f8d0 	bl	80022f8 <HAL_GetTick>
 8003158:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800315a:	e029      	b.n	80031b0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f043 0210 	orr.w	r2, r3, #16
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316c:	f043 0201 	orr.w	r2, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e023      	b.n	80031c0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003178:	f7ff f8be 	bl	80022f8 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d914      	bls.n	80031b0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b01      	cmp	r3, #1
 8003192:	d10d      	bne.n	80031b0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	f043 0210 	orr.w	r2, r3, #16
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a4:	f043 0201 	orr.w	r2, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e007      	b.n	80031c0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d0dc      	beq.n	8003178 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <__NVIC_SetPriorityGrouping+0x44>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031e4:	4013      	ands	r3, r2
 80031e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031fa:	4a04      	ldr	r2, [pc, #16]	; (800320c <__NVIC_SetPriorityGrouping+0x44>)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	60d3      	str	r3, [r2, #12]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003214:	4b04      	ldr	r3, [pc, #16]	; (8003228 <__NVIC_GetPriorityGrouping+0x18>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	0a1b      	lsrs	r3, r3, #8
 800321a:	f003 0307 	and.w	r3, r3, #7
}
 800321e:	4618      	mov	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	2b00      	cmp	r3, #0
 800323c:	db0b      	blt.n	8003256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	f003 021f 	and.w	r2, r3, #31
 8003244:	4907      	ldr	r1, [pc, #28]	; (8003264 <__NVIC_EnableIRQ+0x38>)
 8003246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	2001      	movs	r0, #1
 800324e:	fa00 f202 	lsl.w	r2, r0, r2
 8003252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	e000e100 	.word	0xe000e100

08003268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	6039      	str	r1, [r7, #0]
 8003272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003278:	2b00      	cmp	r3, #0
 800327a:	db0a      	blt.n	8003292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	490c      	ldr	r1, [pc, #48]	; (80032b4 <__NVIC_SetPriority+0x4c>)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	0112      	lsls	r2, r2, #4
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	440b      	add	r3, r1
 800328c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003290:	e00a      	b.n	80032a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	b2da      	uxtb	r2, r3
 8003296:	4908      	ldr	r1, [pc, #32]	; (80032b8 <__NVIC_SetPriority+0x50>)
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	3b04      	subs	r3, #4
 80032a0:	0112      	lsls	r2, r2, #4
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	440b      	add	r3, r1
 80032a6:	761a      	strb	r2, [r3, #24]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	e000e100 	.word	0xe000e100
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032bc:	b480      	push	{r7}
 80032be:	b089      	sub	sp, #36	; 0x24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f1c3 0307 	rsb	r3, r3, #7
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	bf28      	it	cs
 80032da:	2304      	movcs	r3, #4
 80032dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3304      	adds	r3, #4
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	d902      	bls.n	80032ec <NVIC_EncodePriority+0x30>
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3b03      	subs	r3, #3
 80032ea:	e000      	b.n	80032ee <NVIC_EncodePriority+0x32>
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	f04f 32ff 	mov.w	r2, #4294967295
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43da      	mvns	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	401a      	ands	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003304:	f04f 31ff 	mov.w	r1, #4294967295
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	fa01 f303 	lsl.w	r3, r1, r3
 800330e:	43d9      	mvns	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003314:	4313      	orrs	r3, r2
         );
}
 8003316:	4618      	mov	r0, r3
 8003318:	3724      	adds	r7, #36	; 0x24
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3b01      	subs	r3, #1
 8003330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003334:	d301      	bcc.n	800333a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003336:	2301      	movs	r3, #1
 8003338:	e00f      	b.n	800335a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800333a:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <SysTick_Config+0x40>)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3b01      	subs	r3, #1
 8003340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003342:	210f      	movs	r1, #15
 8003344:	f04f 30ff 	mov.w	r0, #4294967295
 8003348:	f7ff ff8e 	bl	8003268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800334c:	4b05      	ldr	r3, [pc, #20]	; (8003364 <SysTick_Config+0x40>)
 800334e:	2200      	movs	r2, #0
 8003350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003352:	4b04      	ldr	r3, [pc, #16]	; (8003364 <SysTick_Config+0x40>)
 8003354:	2207      	movs	r2, #7
 8003356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	e000e010 	.word	0xe000e010

08003368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff ff29 	bl	80031c8 <__NVIC_SetPriorityGrouping>
}
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b086      	sub	sp, #24
 8003382:	af00      	add	r7, sp, #0
 8003384:	4603      	mov	r3, r0
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003390:	f7ff ff3e 	bl	8003210 <__NVIC_GetPriorityGrouping>
 8003394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	6978      	ldr	r0, [r7, #20]
 800339c:	f7ff ff8e 	bl	80032bc <NVIC_EncodePriority>
 80033a0:	4602      	mov	r2, r0
 80033a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ff5d 	bl	8003268 <__NVIC_SetPriority>
}
 80033ae:	bf00      	nop
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	4603      	mov	r3, r0
 80033be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ff31 	bl	800322c <__NVIC_EnableIRQ>
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff ffa2 	bl	8003324 <SysTick_Config>
 80033e0:	4603      	mov	r3, r0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e037      	b.n	8003470 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003416:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800341a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003424:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003430:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800343c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f98c 	bl	8003770 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}  
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_DMA_Start_IT+0x20>
 8003494:	2302      	movs	r3, #2
 8003496:	e04a      	b.n	800352e <HAL_DMA_Start_IT+0xb6>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d13a      	bne.n	8003520 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2202      	movs	r2, #2
 80034ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0201 	bic.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f91f 	bl	8003712 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 020e 	orr.w	r2, r2, #14
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e00f      	b.n	800350e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 020a 	orr.w	r2, r2, #10
 80034fc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0204 	bic.w	r2, r2, #4
 800350c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0201 	orr.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	e005      	b.n	800352c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003528:	2302      	movs	r3, #2
 800352a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800352c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003536:	b580      	push	{r7, lr}
 8003538:	b084      	sub	sp, #16
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003548:	2b02      	cmp	r3, #2
 800354a:	d005      	beq.n	8003558 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2204      	movs	r2, #4
 8003550:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	73fb      	strb	r3, [r7, #15]
 8003556:	e027      	b.n	80035a8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 020e 	bic.w	r2, r2, #14
 8003566:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	2101      	movs	r1, #1
 8003582:	fa01 f202 	lsl.w	r2, r1, r2
 8003586:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	4798      	blx	r3
    } 
  }
  return status;
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	2204      	movs	r2, #4
 80035d0:	409a      	lsls	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d024      	beq.n	8003624 <HAL_DMA_IRQHandler+0x72>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01f      	beq.n	8003624 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d107      	bne.n	8003602 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0204 	bic.w	r2, r2, #4
 8003600:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	2104      	movs	r1, #4
 800360c:	fa01 f202 	lsl.w	r2, r1, r2
 8003610:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003616:	2b00      	cmp	r3, #0
 8003618:	d06a      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003622:	e065      	b.n	80036f0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	2202      	movs	r2, #2
 800362a:	409a      	lsls	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d02c      	beq.n	800368e <HAL_DMA_IRQHandler+0xdc>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d027      	beq.n	800368e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10b      	bne.n	8003664 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 020a 	bic.w	r2, r2, #10
 800365a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	2102      	movs	r1, #2
 800366e:	fa01 f202 	lsl.w	r2, r1, r2
 8003672:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003680:	2b00      	cmp	r3, #0
 8003682:	d035      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800368c:	e030      	b.n	80036f0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	2208      	movs	r2, #8
 8003694:	409a      	lsls	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d028      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x13e>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d023      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 020e 	bic.w	r2, r2, #14
 80036b6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c0:	2101      	movs	r1, #1
 80036c2:	fa01 f202 	lsl.w	r2, r1, r2
 80036c6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d004      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
    }
  }
}  
 80036ee:	e7ff      	b.n	80036f0 <HAL_DMA_IRQHandler+0x13e>
 80036f0:	bf00      	nop
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003712:	b480      	push	{r7}
 8003714:	b085      	sub	sp, #20
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003728:	2101      	movs	r1, #1
 800372a:	fa01 f202 	lsl.w	r2, r1, r2
 800372e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b10      	cmp	r3, #16
 800373e:	d108      	bne.n	8003752 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003750:	e007      	b.n	8003762 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	60da      	str	r2, [r3, #12]
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <DMA_CalcBaseAndBitshift+0x34>)
 8003780:	4413      	add	r3, r2
 8003782:	4a09      	ldr	r2, [pc, #36]	; (80037a8 <DMA_CalcBaseAndBitshift+0x38>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	009a      	lsls	r2, r3, #2
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a06      	ldr	r2, [pc, #24]	; (80037ac <DMA_CalcBaseAndBitshift+0x3c>)
 8003794:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	bffdfff8 	.word	0xbffdfff8
 80037a8:	cccccccd 	.word	0xcccccccd
 80037ac:	40020000 	.word	0x40020000

080037b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037be:	e14e      	b.n	8003a5e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	2101      	movs	r1, #1
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	fa01 f303 	lsl.w	r3, r1, r3
 80037cc:	4013      	ands	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 8140 	beq.w	8003a58 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 0303 	and.w	r3, r3, #3
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d005      	beq.n	80037f0 <HAL_GPIO_Init+0x40>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 0303 	and.w	r3, r3, #3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d130      	bne.n	8003852 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	2203      	movs	r2, #3
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4013      	ands	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003826:	2201      	movs	r2, #1
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4013      	ands	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	091b      	lsrs	r3, r3, #4
 800383c:	f003 0201 	and.w	r2, r3, #1
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	2b03      	cmp	r3, #3
 800385c:	d017      	beq.n	800388e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	2203      	movs	r2, #3
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4013      	ands	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d123      	bne.n	80038e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	08da      	lsrs	r2, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3208      	adds	r2, #8
 80038a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	220f      	movs	r2, #15
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43db      	mvns	r3, r3
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4013      	ands	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	08da      	lsrs	r2, r3, #3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3208      	adds	r2, #8
 80038dc:	6939      	ldr	r1, [r7, #16]
 80038de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	2203      	movs	r2, #3
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4013      	ands	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f003 0203 	and.w	r2, r3, #3
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 809a 	beq.w	8003a58 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003924:	4b55      	ldr	r3, [pc, #340]	; (8003a7c <HAL_GPIO_Init+0x2cc>)
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	4a54      	ldr	r2, [pc, #336]	; (8003a7c <HAL_GPIO_Init+0x2cc>)
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	6193      	str	r3, [r2, #24]
 8003930:	4b52      	ldr	r3, [pc, #328]	; (8003a7c <HAL_GPIO_Init+0x2cc>)
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800393c:	4a50      	ldr	r2, [pc, #320]	; (8003a80 <HAL_GPIO_Init+0x2d0>)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	089b      	lsrs	r3, r3, #2
 8003942:	3302      	adds	r3, #2
 8003944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003948:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	220f      	movs	r2, #15
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4013      	ands	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003966:	d013      	beq.n	8003990 <HAL_GPIO_Init+0x1e0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a46      	ldr	r2, [pc, #280]	; (8003a84 <HAL_GPIO_Init+0x2d4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00d      	beq.n	800398c <HAL_GPIO_Init+0x1dc>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a45      	ldr	r2, [pc, #276]	; (8003a88 <HAL_GPIO_Init+0x2d8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d007      	beq.n	8003988 <HAL_GPIO_Init+0x1d8>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a44      	ldr	r2, [pc, #272]	; (8003a8c <HAL_GPIO_Init+0x2dc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d101      	bne.n	8003984 <HAL_GPIO_Init+0x1d4>
 8003980:	2303      	movs	r3, #3
 8003982:	e006      	b.n	8003992 <HAL_GPIO_Init+0x1e2>
 8003984:	2305      	movs	r3, #5
 8003986:	e004      	b.n	8003992 <HAL_GPIO_Init+0x1e2>
 8003988:	2302      	movs	r3, #2
 800398a:	e002      	b.n	8003992 <HAL_GPIO_Init+0x1e2>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <HAL_GPIO_Init+0x1e2>
 8003990:	2300      	movs	r3, #0
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	f002 0203 	and.w	r2, r2, #3
 8003998:	0092      	lsls	r2, r2, #2
 800399a:	4093      	lsls	r3, r2
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039a2:	4937      	ldr	r1, [pc, #220]	; (8003a80 <HAL_GPIO_Init+0x2d0>)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	089b      	lsrs	r3, r3, #2
 80039a8:	3302      	adds	r3, #2
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039b0:	4b37      	ldr	r3, [pc, #220]	; (8003a90 <HAL_GPIO_Init+0x2e0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4013      	ands	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80039d4:	4a2e      	ldr	r2, [pc, #184]	; (8003a90 <HAL_GPIO_Init+0x2e0>)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039da:	4b2d      	ldr	r3, [pc, #180]	; (8003a90 <HAL_GPIO_Init+0x2e0>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	43db      	mvns	r3, r3
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4013      	ands	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80039fe:	4a24      	ldr	r2, [pc, #144]	; (8003a90 <HAL_GPIO_Init+0x2e0>)
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a04:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <HAL_GPIO_Init+0x2e0>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4013      	ands	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a28:	4a19      	ldr	r2, [pc, #100]	; (8003a90 <HAL_GPIO_Init+0x2e0>)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a2e:	4b18      	ldr	r3, [pc, #96]	; (8003a90 <HAL_GPIO_Init+0x2e0>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	43db      	mvns	r3, r3
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a52:	4a0f      	ldr	r2, [pc, #60]	; (8003a90 <HAL_GPIO_Init+0x2e0>)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f47f aea9 	bne.w	80037c0 <HAL_GPIO_Init+0x10>
  }
}
 8003a6e:	bf00      	nop
 8003a70:	bf00      	nop
 8003a72:	371c      	adds	r7, #28
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	40010000 	.word	0x40010000
 8003a84:	48000400 	.word	0x48000400
 8003a88:	48000800 	.word	0x48000800
 8003a8c:	48000c00 	.word	0x48000c00
 8003a90:	40010400 	.word	0x40010400

08003a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	807b      	strh	r3, [r7, #2]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aa4:	787b      	ldrb	r3, [r7, #1]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aaa:	887a      	ldrh	r2, [r7, #2]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ab0:	e002      	b.n	8003ab8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ab2:	887a      	ldrh	r2, [r7, #2]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ad6:	887a      	ldrh	r2, [r7, #2]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4013      	ands	r3, r2
 8003adc:	041a      	lsls	r2, r3, #16
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	43d9      	mvns	r1, r3
 8003ae2:	887b      	ldrh	r3, [r7, #2]
 8003ae4:	400b      	ands	r3, r1
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	619a      	str	r2, [r3, #24]
}
 8003aec:	bf00      	nop
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e081      	b.n	8003c0e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fe f8da 	bl	8001cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2224      	movs	r2, #36	; 0x24
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d107      	bne.n	8003b72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	e006      	b.n	8003b80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d104      	bne.n	8003b92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ba4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69d9      	ldr	r1, [r3, #28]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1a      	ldr	r2, [r3, #32]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b20      	cmp	r3, #32
 8003c30:	f040 809b 	bne.w	8003d6a <HAL_I2C_Slave_Transmit_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_I2C_Slave_Transmit_DMA+0x28>
 8003c3a:	88fb      	ldrh	r3, [r7, #6]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d105      	bne.n	8003c4c <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e08f      	b.n	8003d6c <HAL_I2C_Slave_Transmit_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_I2C_Slave_Transmit_DMA+0x42>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e088      	b.n	8003d6c <HAL_I2C_Slave_Transmit_DMA+0x154>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2221      	movs	r2, #33	; 0x21
 8003c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	88fa      	ldrh	r2, [r7, #6]
 8003c82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4a38      	ldr	r2, [pc, #224]	; (8003d74 <HAL_I2C_Slave_Transmit_DMA+0x15c>)
 8003c92:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a38      	ldr	r2, [pc, #224]	; (8003d78 <HAL_I2C_Slave_Transmit_DMA+0x160>)
 8003c98:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d020      	beq.n	8003ce4 <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	4a35      	ldr	r2, [pc, #212]	; (8003d7c <HAL_I2C_Slave_Transmit_DMA+0x164>)
 8003ca8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	4a34      	ldr	r2, [pc, #208]	; (8003d80 <HAL_I2C_Slave_Transmit_DMA+0x168>)
 8003cb0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3328      	adds	r3, #40	; 0x28
 8003cce:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003cd4:	f7ff fbd0 	bl	8003478 <HAL_DMA_Start_IT>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d12f      	bne.n	8003d42 <HAL_I2C_Slave_Transmit_DMA+0x12a>
 8003ce2:	e013      	b.n	8003d0c <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2228      	movs	r2, #40	; 0x28
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e02f      	b.n	8003d6c <HAL_I2C_Slave_Transmit_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d1a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003d24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f001 f931 	bl	8004f90 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d3c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e014      	b.n	8003d6c <HAL_I2C_Slave_Transmit_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2228      	movs	r2, #40	; 0x28
 8003d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	f043 0210 	orr.w	r2, r3, #16
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <HAL_I2C_Slave_Transmit_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8003d6a:	2302      	movs	r3, #2
  }
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	ffff0000 	.word	0xffff0000
 8003d78:	080043b9 	.word	0x080043b9
 8003d7c:	08004e43 	.word	0x08004e43
 8003d80:	08004ec9 	.word	0x08004ec9

08003d84 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	f040 809b 	bne.w	8003ed6 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <HAL_I2C_Slave_Receive_DMA+0x28>
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d105      	bne.n	8003db8 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003db2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e08f      	b.n	8003ed8 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_I2C_Slave_Receive_DMA+0x42>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e088      	b.n	8003ed8 <HAL_I2C_Slave_Receive_DMA+0x154>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2222      	movs	r2, #34	; 0x22
 8003dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	88fa      	ldrh	r2, [r7, #6]
 8003dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4a38      	ldr	r2, [pc, #224]	; (8003ee0 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8003dfe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4a38      	ldr	r2, [pc, #224]	; (8003ee4 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8003e04:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d020      	beq.n	8003e50 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e12:	4a35      	ldr	r2, [pc, #212]	; (8003ee8 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8003e14:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1a:	4a34      	ldr	r2, [pc, #208]	; (8003eec <HAL_I2C_Slave_Receive_DMA+0x168>)
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e22:	2200      	movs	r2, #0
 8003e24:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferAbortCallback = NULL;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3324      	adds	r3, #36	; 0x24
 8003e38:	4619      	mov	r1, r3
 8003e3a:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003e40:	f7ff fb1a 	bl	8003478 <HAL_DMA_Start_IT>
 8003e44:	4603      	mov	r3, r0
 8003e46:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d12f      	bne.n	8003eae <HAL_I2C_Slave_Receive_DMA+0x12a>
 8003e4e:	e013      	b.n	8003e78 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2228      	movs	r2, #40	; 0x28
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e02f      	b.n	8003ed8 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e86:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003e90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f001 f87b 	bl	8004f90 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ea8:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e014      	b.n	8003ed8 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2228      	movs	r2, #40	; 0x28
 8003eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec2:	f043 0210 	orr.w	r2, r3, #16
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8003ed6:	2302      	movs	r3, #2
  }
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	ffff0000 	.word	0xffff0000
 8003ee4:	080043b9 	.word	0x080043b9
 8003ee8:	08004e83 	.word	0x08004e83
 8003eec:	08004ec9 	.word	0x08004ec9

08003ef0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	68f9      	ldr	r1, [r7, #12]
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	4798      	blx	r3
  }
}
 8003f1c:	bf00      	nop
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	70fb      	strb	r3, [r7, #3]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <I2C_Slave_ISR_IT+0x24>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e0ec      	b.n	80041ca <I2C_Slave_ISR_IT+0x1fe>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d009      	beq.n	8004018 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004010:	6939      	ldr	r1, [r7, #16]
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 fc9a 	bl	800494c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	091b      	lsrs	r3, r3, #4
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d04d      	beq.n	80040c0 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	091b      	lsrs	r3, r3, #4
 8004028:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800402c:	2b00      	cmp	r3, #0
 800402e:	d047      	beq.n	80040c0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d128      	bne.n	800408c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b28      	cmp	r3, #40	; 0x28
 8004044:	d108      	bne.n	8004058 <I2C_Slave_ISR_IT+0x8c>
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800404c:	d104      	bne.n	8004058 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800404e:	6939      	ldr	r1, [r7, #16]
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 fd85 	bl	8004b60 <I2C_ITListenCplt>
 8004056:	e032      	b.n	80040be <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b29      	cmp	r3, #41	; 0x29
 8004062:	d10e      	bne.n	8004082 <I2C_Slave_ISR_IT+0xb6>
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800406a:	d00a      	beq.n	8004082 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2210      	movs	r2, #16
 8004072:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 fec0 	bl	8004dfa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 fb3d 	bl	80046fa <I2C_ITSlaveSeqCplt>
 8004080:	e01d      	b.n	80040be <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2210      	movs	r2, #16
 8004088:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800408a:	e096      	b.n	80041ba <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2210      	movs	r2, #16
 8004092:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004098:	f043 0204 	orr.w	r2, r3, #4
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d004      	beq.n	80040b0 <I2C_Slave_ISR_IT+0xe4>
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040ac:	f040 8085 	bne.w	80041ba <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b4:	4619      	mov	r1, r3
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 fda8 	bl	8004c0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80040bc:	e07d      	b.n	80041ba <I2C_Slave_ISR_IT+0x1ee>
 80040be:	e07c      	b.n	80041ba <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	089b      	lsrs	r3, r3, #2
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d030      	beq.n	800412e <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	089b      	lsrs	r3, r3, #2
 80040d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d02a      	beq.n	800412e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d018      	beq.n	8004114 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d14f      	bne.n	80041be <I2C_Slave_ISR_IT+0x1f2>
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004124:	d04b      	beq.n	80041be <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fae7 	bl	80046fa <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800412c:	e047      	b.n	80041be <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	08db      	lsrs	r3, r3, #3
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	08db      	lsrs	r3, r3, #3
 800413e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004142:	2b00      	cmp	r3, #0
 8004144:	d004      	beq.n	8004150 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004146:	6939      	ldr	r1, [r7, #16]
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 fa15 	bl	8004578 <I2C_ITAddrCplt>
 800414e:	e037      	b.n	80041c0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	085b      	lsrs	r3, r3, #1
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d031      	beq.n	80041c0 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	085b      	lsrs	r3, r3, #1
 8004160:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004164:	2b00      	cmp	r3, #0
 8004166:	d02b      	beq.n	80041c0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d018      	beq.n	80041a4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	781a      	ldrb	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	851a      	strh	r2, [r3, #40]	; 0x28
 80041a2:	e00d      	b.n	80041c0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041aa:	d002      	beq.n	80041b2 <I2C_Slave_ISR_IT+0x1e6>
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 faa1 	bl	80046fa <I2C_ITSlaveSeqCplt>
 80041b8:	e002      	b.n	80041c0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80041ba:	bf00      	nop
 80041bc:	e000      	b.n	80041c0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80041be:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b088      	sub	sp, #32
 80041d6:	af02      	add	r7, sp, #8
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <I2C_Master_ISR_DMA+0x1a>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e0e1      	b.n	80043b0 <I2C_Master_ISR_DMA+0x1de>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	091b      	lsrs	r3, r3, #4
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d017      	beq.n	8004230 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	091b      	lsrs	r3, r3, #4
 8004204:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004208:	2b00      	cmp	r3, #0
 800420a:	d011      	beq.n	8004230 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2210      	movs	r2, #16
 8004212:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004218:	f043 0204 	orr.w	r2, r3, #4
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004220:	2120      	movs	r1, #32
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 feb4 	bl	8004f90 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 fde6 	bl	8004dfa <I2C_Flush_TXDR>
 800422e:	e0ba      	b.n	80043a6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	09db      	lsrs	r3, r3, #7
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d072      	beq.n	8004322 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	099b      	lsrs	r3, r3, #6
 8004240:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004244:	2b00      	cmp	r3, #0
 8004246:	d06c      	beq.n	8004322 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004256:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d04e      	beq.n	8004300 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	b29b      	uxth	r3, r3
 800426a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800426e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	2bff      	cmp	r3, #255	; 0xff
 8004278:	d906      	bls.n	8004288 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	22ff      	movs	r2, #255	; 0xff
 800427e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8004280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	e010      	b.n	80042aa <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800429a:	d003      	beq.n	80042a4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	e002      	b.n	80042aa <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80042a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042a8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	8a79      	ldrh	r1, [r7, #18]
 80042b2:	2300      	movs	r3, #0
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 fe3b 	bl	8004f34 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b22      	cmp	r3, #34	; 0x22
 80042da:	d108      	bne.n	80042ee <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042ea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80042ec:	e05b      	b.n	80043a6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80042fe:	e052      	b.n	80043a6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800430e:	d003      	beq.n	8004318 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f9b5 	bl	8004680 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004316:	e046      	b.n	80043a6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004318:	2140      	movs	r1, #64	; 0x40
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fc76 	bl	8004c0c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004320:	e041      	b.n	80043a6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	099b      	lsrs	r3, r3, #6
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d029      	beq.n	8004382 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	099b      	lsrs	r3, r3, #6
 8004332:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004336:	2b00      	cmp	r3, #0
 8004338:	d023      	beq.n	8004382 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d119      	bne.n	8004378 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004352:	d027      	beq.n	80043a4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800435c:	d108      	bne.n	8004370 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800436c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800436e:	e019      	b.n	80043a4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f985 	bl	8004680 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004376:	e015      	b.n	80043a4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004378:	2140      	movs	r1, #64	; 0x40
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fc46 	bl	8004c0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004380:	e010      	b.n	80043a4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00b      	beq.n	80043a6 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 fa0b 	bl	80047b8 <I2C_ITMasterCplt>
 80043a2:	e000      	b.n	80043a6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80043a4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <I2C_Slave_ISR_DMA+0x24>
 80043d8:	2302      	movs	r3, #2
 80043da:	e0c9      	b.n	8004570 <I2C_Slave_ISR_DMA+0x1b8>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d009      	beq.n	8004404 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 faa4 	bl	800494c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	091b      	lsrs	r3, r3, #4
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 809a 	beq.w	8004546 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 8093 	beq.w	8004546 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	0b9b      	lsrs	r3, r3, #14
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d105      	bne.n	8004438 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	0bdb      	lsrs	r3, r3, #15
 8004430:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004434:	2b00      	cmp	r3, #0
 8004436:	d07f      	beq.n	8004538 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00d      	beq.n	800445c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	0bdb      	lsrs	r3, r3, #15
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8004458:	2301      	movs	r3, #1
 800445a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00d      	beq.n	8004480 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	0b9b      	lsrs	r3, r3, #14
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d007      	beq.n	8004480 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800447c:	2301      	movs	r3, #1
 800447e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d128      	bne.n	80044d8 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b28      	cmp	r3, #40	; 0x28
 8004490:	d108      	bne.n	80044a4 <I2C_Slave_ISR_DMA+0xec>
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004498:	d104      	bne.n	80044a4 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 fb5f 	bl	8004b60 <I2C_ITListenCplt>
 80044a2:	e048      	b.n	8004536 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b29      	cmp	r3, #41	; 0x29
 80044ae:	d10e      	bne.n	80044ce <I2C_Slave_ISR_DMA+0x116>
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044b6:	d00a      	beq.n	80044ce <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2210      	movs	r2, #16
 80044be:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fc9a 	bl	8004dfa <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 f917 	bl	80046fa <I2C_ITSlaveSeqCplt>
 80044cc:	e033      	b.n	8004536 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2210      	movs	r2, #16
 80044d4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80044d6:	e034      	b.n	8004542 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2210      	movs	r2, #16
 80044de:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e4:	f043 0204 	orr.w	r2, r3, #4
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <I2C_Slave_ISR_DMA+0x14a>
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004500:	d11f      	bne.n	8004542 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004502:	7dfb      	ldrb	r3, [r7, #23]
 8004504:	2b21      	cmp	r3, #33	; 0x21
 8004506:	d002      	beq.n	800450e <I2C_Slave_ISR_DMA+0x156>
 8004508:	7dfb      	ldrb	r3, [r7, #23]
 800450a:	2b29      	cmp	r3, #41	; 0x29
 800450c:	d103      	bne.n	8004516 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2221      	movs	r2, #33	; 0x21
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
 8004514:	e008      	b.n	8004528 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004516:	7dfb      	ldrb	r3, [r7, #23]
 8004518:	2b22      	cmp	r3, #34	; 0x22
 800451a:	d002      	beq.n	8004522 <I2C_Slave_ISR_DMA+0x16a>
 800451c:	7dfb      	ldrb	r3, [r7, #23]
 800451e:	2b2a      	cmp	r3, #42	; 0x2a
 8004520:	d102      	bne.n	8004528 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2222      	movs	r2, #34	; 0x22
 8004526:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452c:	4619      	mov	r1, r3
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fb6c 	bl	8004c0c <I2C_ITError>
      if (treatdmanack == 1U)
 8004534:	e005      	b.n	8004542 <I2C_Slave_ISR_DMA+0x18a>
 8004536:	e004      	b.n	8004542 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2210      	movs	r2, #16
 800453e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004540:	e011      	b.n	8004566 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8004542:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004544:	e00f      	b.n	8004566 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	08db      	lsrs	r3, r3, #3
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d009      	beq.n	8004566 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	08db      	lsrs	r3, r3, #3
 8004556:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800455e:	68b9      	ldr	r1, [r7, #8]
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 f809 	bl	8004578 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004588:	b2db      	uxtb	r3, r3
 800458a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800458e:	2b28      	cmp	r3, #40	; 0x28
 8004590:	d16a      	bne.n	8004668 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	0c1b      	lsrs	r3, r3, #16
 800459a:	b2db      	uxtb	r3, r3
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	0c1b      	lsrs	r3, r3, #16
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80045b0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045be:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80045cc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d138      	bne.n	8004648 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80045d6:	897b      	ldrh	r3, [r7, #10]
 80045d8:	09db      	lsrs	r3, r3, #7
 80045da:	b29a      	uxth	r2, r3
 80045dc:	89bb      	ldrh	r3, [r7, #12]
 80045de:	4053      	eors	r3, r2
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f003 0306 	and.w	r3, r3, #6
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d11c      	bne.n	8004624 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80045ea:	897b      	ldrh	r3, [r7, #10]
 80045ec:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d13b      	bne.n	8004678 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2208      	movs	r2, #8
 800460c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004616:	89ba      	ldrh	r2, [r7, #12]
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	4619      	mov	r1, r3
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff fc95 	bl	8003f4c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004622:	e029      	b.n	8004678 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004624:	893b      	ldrh	r3, [r7, #8]
 8004626:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004628:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fd13 	bl	8005058 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800463a:	89ba      	ldrh	r2, [r7, #12]
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	4619      	mov	r1, r3
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff fc83 	bl	8003f4c <HAL_I2C_AddrCallback>
}
 8004646:	e017      	b.n	8004678 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004648:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fd03 	bl	8005058 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800465a:	89ba      	ldrh	r2, [r7, #12]
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	4619      	mov	r1, r3
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff fc73 	bl	8003f4c <HAL_I2C_AddrCallback>
}
 8004666:	e007      	b.n	8004678 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2208      	movs	r2, #8
 800466e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004678:	bf00      	nop
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b21      	cmp	r3, #33	; 0x21
 800469a:	d115      	bne.n	80046c8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2211      	movs	r2, #17
 80046a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80046b0:	2101      	movs	r1, #1
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fcd0 	bl	8005058 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff fc2f 	bl	8003f24 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046c6:	e014      	b.n	80046f2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2212      	movs	r2, #18
 80046d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80046dc:	2102      	movs	r1, #2
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fcba 	bl	8005058 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff fc23 	bl	8003f38 <HAL_I2C_MasterRxCpltCallback>
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b084      	sub	sp, #16
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	0b9b      	lsrs	r3, r3, #14
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d008      	beq.n	8004730 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	e00d      	b.n	800474c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	0bdb      	lsrs	r3, r3, #15
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d007      	beq.n	800474c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800474a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b29      	cmp	r3, #41	; 0x29
 8004756:	d112      	bne.n	800477e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2228      	movs	r2, #40	; 0x28
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2221      	movs	r2, #33	; 0x21
 8004764:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004766:	2101      	movs	r1, #1
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fc75 	bl	8005058 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7fc fea6 	bl	80014c8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800477c:	e017      	b.n	80047ae <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b2a      	cmp	r3, #42	; 0x2a
 8004788:	d111      	bne.n	80047ae <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2228      	movs	r2, #40	; 0x28
 800478e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2222      	movs	r2, #34	; 0x22
 8004796:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004798:	2102      	movs	r1, #2
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fc5c 	bl	8005058 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7fc fe2b 	bl	8001404 <HAL_I2C_SlaveRxCpltCallback>
}
 80047ae:	bf00      	nop
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2220      	movs	r2, #32
 80047cc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b21      	cmp	r3, #33	; 0x21
 80047d8:	d107      	bne.n	80047ea <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80047da:	2101      	movs	r1, #1
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fc3b 	bl	8005058 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2211      	movs	r2, #17
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
 80047e8:	e00c      	b.n	8004804 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b22      	cmp	r3, #34	; 0x22
 80047f4:	d106      	bne.n	8004804 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80047f6:	2102      	movs	r1, #2
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fc2d 	bl	8005058 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2212      	movs	r2, #18
 8004802:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6859      	ldr	r1, [r3, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4b4d      	ldr	r3, [pc, #308]	; (8004944 <I2C_ITMasterCplt+0x18c>)
 8004810:	400b      	ands	r3, r1
 8004812:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a4a      	ldr	r2, [pc, #296]	; (8004948 <I2C_ITMasterCplt+0x190>)
 800481e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	091b      	lsrs	r3, r3, #4
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2210      	movs	r2, #16
 8004832:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004838:	f043 0204 	orr.w	r2, r3, #4
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b60      	cmp	r3, #96	; 0x60
 800484a:	d10b      	bne.n	8004864 <I2C_ITMasterCplt+0xac>
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	089b      	lsrs	r3, r3, #2
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	b2db      	uxtb	r3, r3
 8004860:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004862:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fac8 	bl	8004dfa <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b60      	cmp	r3, #96	; 0x60
 800487a:	d002      	beq.n	8004882 <I2C_ITMasterCplt+0xca>
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d006      	beq.n	8004890 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004886:	4619      	mov	r1, r3
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f9bf 	bl	8004c0c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800488e:	e054      	b.n	800493a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b21      	cmp	r3, #33	; 0x21
 800489a:	d124      	bne.n	80048e6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b40      	cmp	r3, #64	; 0x40
 80048b4:	d10b      	bne.n	80048ce <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7ff fb58 	bl	8003f7c <HAL_I2C_MemTxCpltCallback>
}
 80048cc:	e035      	b.n	800493a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff fb20 	bl	8003f24 <HAL_I2C_MasterTxCpltCallback>
}
 80048e4:	e029      	b.n	800493a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b22      	cmp	r3, #34	; 0x22
 80048f0:	d123      	bne.n	800493a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2220      	movs	r2, #32
 80048f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b40      	cmp	r3, #64	; 0x40
 800490a:	d10b      	bne.n	8004924 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff fb37 	bl	8003f90 <HAL_I2C_MemRxCpltCallback>
}
 8004922:	e00a      	b.n	800493a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff faff 	bl	8003f38 <HAL_I2C_MasterRxCpltCallback>
}
 800493a:	bf00      	nop
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	fe00e800 	.word	0xfe00e800
 8004948:	ffff0000 	.word	0xffff0000

0800494c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004968:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2220      	movs	r2, #32
 8004970:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004972:	7bfb      	ldrb	r3, [r7, #15]
 8004974:	2b21      	cmp	r3, #33	; 0x21
 8004976:	d002      	beq.n	800497e <I2C_ITSlaveCplt+0x32>
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	2b29      	cmp	r3, #41	; 0x29
 800497c:	d108      	bne.n	8004990 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800497e:	f248 0101 	movw	r1, #32769	; 0x8001
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fb68 	bl	8005058 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2221      	movs	r2, #33	; 0x21
 800498c:	631a      	str	r2, [r3, #48]	; 0x30
 800498e:	e00d      	b.n	80049ac <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	2b22      	cmp	r3, #34	; 0x22
 8004994:	d002      	beq.n	800499c <I2C_ITSlaveCplt+0x50>
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	2b2a      	cmp	r3, #42	; 0x2a
 800499a:	d107      	bne.n	80049ac <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800499c:	f248 0102 	movw	r1, #32770	; 0x8002
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fb59 	bl	8005058 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2222      	movs	r2, #34	; 0x22
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ba:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6859      	ldr	r1, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	4b64      	ldr	r3, [pc, #400]	; (8004b58 <I2C_ITSlaveCplt+0x20c>)
 80049c8:	400b      	ands	r3, r1
 80049ca:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fa14 	bl	8004dfa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	0b9b      	lsrs	r3, r3, #14
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d013      	beq.n	8004a06 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d020      	beq.n	8004a38 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a04:	e018      	b.n	8004a38 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	0bdb      	lsrs	r3, r3, #15
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d012      	beq.n	8004a38 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a20:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d006      	beq.n	8004a38 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	089b      	lsrs	r3, r3, #2
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d020      	beq.n	8004a86 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f023 0304 	bic.w	r3, r3, #4
 8004a4a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00c      	beq.n	8004a86 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a94:	f043 0204 	orr.w	r2, r3, #4
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d010      	beq.n	8004ad4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f8a7 	bl	8004c0c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b28      	cmp	r3, #40	; 0x28
 8004ac8:	d141      	bne.n	8004b4e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004aca:	6979      	ldr	r1, [r7, #20]
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f847 	bl	8004b60 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ad2:	e03c      	b.n	8004b4e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004adc:	d014      	beq.n	8004b08 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff fe0b 	bl	80046fa <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a1d      	ldr	r2, [pc, #116]	; (8004b5c <I2C_ITSlaveCplt+0x210>)
 8004ae8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff fa31 	bl	8003f68 <HAL_I2C_ListenCpltCallback>
}
 8004b06:	e022      	b.n	8004b4e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b22      	cmp	r3, #34	; 0x22
 8004b12:	d10e      	bne.n	8004b32 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fc fc6a 	bl	8001404 <HAL_I2C_SlaveRxCpltCallback>
}
 8004b30:	e00d      	b.n	8004b4e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7fc fcbd 	bl	80014c8 <HAL_I2C_SlaveTxCpltCallback>
}
 8004b4e:	bf00      	nop
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	fe00e800 	.word	0xfe00e800
 8004b5c:	ffff0000 	.word	0xffff0000

08004b60 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a26      	ldr	r2, [pc, #152]	; (8004c08 <I2C_ITListenCplt+0xa8>)
 8004b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	089b      	lsrs	r3, r3, #2
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d022      	beq.n	8004bde <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d012      	beq.n	8004bde <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd6:	f043 0204 	orr.w	r2, r3, #4
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004bde:	f248 0103 	movw	r1, #32771	; 0x8003
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fa38 	bl	8005058 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2210      	movs	r2, #16
 8004bee:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7ff f9b5 	bl	8003f68 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004bfe:	bf00      	nop
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	ffff0000 	.word	0xffff0000

08004c0c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a5d      	ldr	r2, [pc, #372]	; (8004da0 <I2C_ITError+0x194>)
 8004c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	2b28      	cmp	r3, #40	; 0x28
 8004c42:	d005      	beq.n	8004c50 <I2C_ITError+0x44>
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
 8004c46:	2b29      	cmp	r3, #41	; 0x29
 8004c48:	d002      	beq.n	8004c50 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c4e:	d10b      	bne.n	8004c68 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c50:	2103      	movs	r1, #3
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fa00 	bl	8005058 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2228      	movs	r2, #40	; 0x28
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a50      	ldr	r2, [pc, #320]	; (8004da4 <I2C_ITError+0x198>)
 8004c64:	635a      	str	r2, [r3, #52]	; 0x34
 8004c66:	e011      	b.n	8004c8c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c68:	f248 0103 	movw	r1, #32771	; 0x8003
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f9f3 	bl	8005058 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b60      	cmp	r3, #96	; 0x60
 8004c7c:	d003      	beq.n	8004c86 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c90:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d039      	beq.n	8004d0e <I2C_ITError+0x102>
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b11      	cmp	r3, #17
 8004c9e:	d002      	beq.n	8004ca6 <I2C_ITError+0x9a>
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b21      	cmp	r3, #33	; 0x21
 8004ca4:	d133      	bne.n	8004d0e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cb4:	d107      	bne.n	8004cc6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cc4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fe fd14 	bl	80036f8 <HAL_DMA_GetState>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d017      	beq.n	8004d06 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	4a33      	ldr	r2, [pc, #204]	; (8004da8 <I2C_ITError+0x19c>)
 8004cdc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fe fc23 	bl	8003536 <HAL_DMA_Abort_IT>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d04d      	beq.n	8004d92 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d00:	4610      	mov	r0, r2
 8004d02:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d04:	e045      	b.n	8004d92 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f850 	bl	8004dac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d0c:	e041      	b.n	8004d92 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d039      	beq.n	8004d8a <I2C_ITError+0x17e>
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b12      	cmp	r3, #18
 8004d1a:	d002      	beq.n	8004d22 <I2C_ITError+0x116>
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b22      	cmp	r3, #34	; 0x22
 8004d20:	d133      	bne.n	8004d8a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d30:	d107      	bne.n	8004d42 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d40:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe fcd6 	bl	80036f8 <HAL_DMA_GetState>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d017      	beq.n	8004d82 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d56:	4a14      	ldr	r2, [pc, #80]	; (8004da8 <I2C_ITError+0x19c>)
 8004d58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fe fbe5 	bl	8003536 <HAL_DMA_Abort_IT>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d011      	beq.n	8004d96 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d80:	e009      	b.n	8004d96 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f812 	bl	8004dac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d88:	e005      	b.n	8004d96 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f80e 	bl	8004dac <I2C_TreatErrorCallback>
  }
}
 8004d90:	e002      	b.n	8004d98 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d92:	bf00      	nop
 8004d94:	e000      	b.n	8004d98 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d96:	bf00      	nop
}
 8004d98:	bf00      	nop
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	ffff0000 	.word	0xffff0000
 8004da4:	08003fcd 	.word	0x08003fcd
 8004da8:	08004ef7 	.word	0x08004ef7

08004dac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b60      	cmp	r3, #96	; 0x60
 8004dbe:	d10e      	bne.n	8004dde <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7ff f8ee 	bl	8003fb8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ddc:	e009      	b.n	8004df2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff f8d9 	bl	8003fa4 <HAL_I2C_ErrorCallback>
}
 8004df2:	bf00      	nop
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d103      	bne.n	8004e18 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2200      	movs	r2, #0
 8004e16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d007      	beq.n	8004e36 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699a      	ldr	r2, [r3, #24]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0201 	orr.w	r2, r2, #1
 8004e34:	619a      	str	r2, [r3, #24]
  }
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b084      	sub	sp, #16
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e5c:	d002      	beq.n	8004e64 <I2C_DMASlaveTransmitCplt+0x22>
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10a      	bne.n	8004e7a <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e72:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f7ff fc40 	bl	80046fa <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8004e7a:	bf00      	nop
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	60bb      	str	r3, [r7, #8]

  if ((__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U) && \
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10e      	bne.n	8004ec0 <I2C_DMASlaveReceiveCplt+0x3e>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ea8:	d00a      	beq.n	8004ec0 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eb8:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f7ff fc1d 	bl	80046fa <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8004ec0:	bf00      	nop
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ee4:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004ee6:	2110      	movs	r1, #16
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f7ff fe8f 	bl	8004c0c <I2C_ITError>
}
 8004eee:	bf00      	nop
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	2200      	movs	r2, #0
 8004f12:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f20:	2200      	movs	r2, #0
 8004f22:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f7ff ff41 	bl	8004dac <I2C_TreatErrorCallback>
}
 8004f2a:	bf00      	nop
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	607b      	str	r3, [r7, #4]
 8004f3e:	460b      	mov	r3, r1
 8004f40:	817b      	strh	r3, [r7, #10]
 8004f42:	4613      	mov	r3, r2
 8004f44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	0d5b      	lsrs	r3, r3, #21
 8004f50:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004f54:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <I2C_TransferConfig+0x58>)
 8004f56:	430b      	orrs	r3, r1
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	ea02 0103 	and.w	r1, r2, r3
 8004f5e:	897b      	ldrh	r3, [r7, #10]
 8004f60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f64:	7a7b      	ldrb	r3, [r7, #9]
 8004f66:	041b      	lsls	r3, r3, #16
 8004f68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	431a      	orrs	r2, r3
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	431a      	orrs	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004f7e:	bf00      	nop
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	03ff63ff 	.word	0x03ff63ff

08004f90 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa4:	4a2a      	ldr	r2, [pc, #168]	; (8005050 <I2C_Enable_IRQ+0xc0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d004      	beq.n	8004fb4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004fae:	4a29      	ldr	r2, [pc, #164]	; (8005054 <I2C_Enable_IRQ+0xc4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d11d      	bne.n	8004ff0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004fb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	da03      	bge.n	8004fc4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004fc2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004fc4:	887b      	ldrh	r3, [r7, #2]
 8004fc6:	2b10      	cmp	r3, #16
 8004fc8:	d103      	bne.n	8004fd2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004fd0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004fd2:	887b      	ldrh	r3, [r7, #2]
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d103      	bne.n	8004fe0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004fde:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004fe0:	887b      	ldrh	r3, [r7, #2]
 8004fe2:	2b40      	cmp	r3, #64	; 0x40
 8004fe4:	d125      	bne.n	8005032 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fec:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004fee:	e020      	b.n	8005032 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004ff0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	da03      	bge.n	8005000 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004ffe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005000:	887b      	ldrh	r3, [r7, #2]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005010:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005012:	887b      	ldrh	r3, [r7, #2]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8005022:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005024:	887b      	ldrh	r3, [r7, #2]
 8005026:	2b20      	cmp	r3, #32
 8005028:	d103      	bne.n	8005032 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f043 0320 	orr.w	r3, r3, #32
 8005030:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6819      	ldr	r1, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	430a      	orrs	r2, r1
 8005040:	601a      	str	r2, [r3, #0]
}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	080041d3 	.word	0x080041d3
 8005054:	080043b9 	.word	0x080043b9

08005058 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005068:	887b      	ldrh	r3, [r7, #2]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00f      	beq.n	8005092 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005078:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005086:	2b28      	cmp	r3, #40	; 0x28
 8005088:	d003      	beq.n	8005092 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005090:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005092:	887b      	ldrh	r3, [r7, #2]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00f      	beq.n	80050bc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80050a2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050b0:	2b28      	cmp	r3, #40	; 0x28
 80050b2:	d003      	beq.n	80050bc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80050ba:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80050bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	da03      	bge.n	80050cc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80050ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80050cc:	887b      	ldrh	r3, [r7, #2]
 80050ce:	2b10      	cmp	r3, #16
 80050d0:	d103      	bne.n	80050da <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80050d8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80050da:	887b      	ldrh	r3, [r7, #2]
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d103      	bne.n	80050e8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f043 0320 	orr.w	r3, r3, #32
 80050e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80050e8:	887b      	ldrh	r3, [r7, #2]
 80050ea:	2b40      	cmp	r3, #64	; 0x40
 80050ec:	d103      	bne.n	80050f6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050f4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6819      	ldr	r1, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	43da      	mvns	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	400a      	ands	r2, r1
 8005106:	601a      	str	r2, [r3, #0]
}
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b20      	cmp	r3, #32
 8005128:	d138      	bne.n	800519c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005134:	2302      	movs	r3, #2
 8005136:	e032      	b.n	800519e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2224      	movs	r2, #36	; 0x24
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0201 	bic.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005166:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6819      	ldr	r1, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005198:	2300      	movs	r3, #0
 800519a:	e000      	b.n	800519e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800519c:	2302      	movs	r3, #2
  }
}
 800519e:	4618      	mov	r0, r3
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b085      	sub	sp, #20
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b20      	cmp	r3, #32
 80051be:	d139      	bne.n	8005234 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e033      	b.n	8005236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2224      	movs	r2, #36	; 0x24
 80051da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0201 	bic.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80051fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	e000      	b.n	8005236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005234:	2302      	movs	r3, #2
  }
}
 8005236:	4618      	mov	r0, r3
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800524a:	af00      	add	r7, sp, #0
 800524c:	1d3b      	adds	r3, r7, #4
 800524e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005250:	1d3b      	adds	r3, r7, #4
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d102      	bne.n	800525e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	f000 bef4 	b.w	8006046 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800525e:	1d3b      	adds	r3, r7, #4
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 816a 	beq.w	8005542 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800526e:	4bb3      	ldr	r3, [pc, #716]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	2b04      	cmp	r3, #4
 8005278:	d00c      	beq.n	8005294 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800527a:	4bb0      	ldr	r3, [pc, #704]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f003 030c 	and.w	r3, r3, #12
 8005282:	2b08      	cmp	r3, #8
 8005284:	d159      	bne.n	800533a <HAL_RCC_OscConfig+0xf6>
 8005286:	4bad      	ldr	r3, [pc, #692]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800528e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005292:	d152      	bne.n	800533a <HAL_RCC_OscConfig+0xf6>
 8005294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005298:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80052a0:	fa93 f3a3 	rbit	r3, r3
 80052a4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80052a8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ac:	fab3 f383 	clz	r3, r3
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	095b      	lsrs	r3, r3, #5
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d102      	bne.n	80052c6 <HAL_RCC_OscConfig+0x82>
 80052c0:	4b9e      	ldr	r3, [pc, #632]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	e015      	b.n	80052f2 <HAL_RCC_OscConfig+0xae>
 80052c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052ca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ce:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80052d2:	fa93 f3a3 	rbit	r3, r3
 80052d6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80052da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052de:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80052e2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80052e6:	fa93 f3a3 	rbit	r3, r3
 80052ea:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80052ee:	4b93      	ldr	r3, [pc, #588]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052f6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80052fa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80052fe:	fa92 f2a2 	rbit	r2, r2
 8005302:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005306:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800530a:	fab2 f282 	clz	r2, r2
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	f042 0220 	orr.w	r2, r2, #32
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	f002 021f 	and.w	r2, r2, #31
 800531a:	2101      	movs	r1, #1
 800531c:	fa01 f202 	lsl.w	r2, r1, r2
 8005320:	4013      	ands	r3, r2
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 810c 	beq.w	8005540 <HAL_RCC_OscConfig+0x2fc>
 8005328:	1d3b      	adds	r3, r7, #4
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	f040 8106 	bne.w	8005540 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	f000 be86 	b.w	8006046 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800533a:	1d3b      	adds	r3, r7, #4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005344:	d106      	bne.n	8005354 <HAL_RCC_OscConfig+0x110>
 8005346:	4b7d      	ldr	r3, [pc, #500]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a7c      	ldr	r2, [pc, #496]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 800534c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	e030      	b.n	80053b6 <HAL_RCC_OscConfig+0x172>
 8005354:	1d3b      	adds	r3, r7, #4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10c      	bne.n	8005378 <HAL_RCC_OscConfig+0x134>
 800535e:	4b77      	ldr	r3, [pc, #476]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a76      	ldr	r2, [pc, #472]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 8005364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	4b74      	ldr	r3, [pc, #464]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a73      	ldr	r2, [pc, #460]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 8005370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	e01e      	b.n	80053b6 <HAL_RCC_OscConfig+0x172>
 8005378:	1d3b      	adds	r3, r7, #4
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005382:	d10c      	bne.n	800539e <HAL_RCC_OscConfig+0x15a>
 8005384:	4b6d      	ldr	r3, [pc, #436]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a6c      	ldr	r2, [pc, #432]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 800538a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	4b6a      	ldr	r3, [pc, #424]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a69      	ldr	r2, [pc, #420]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 8005396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	e00b      	b.n	80053b6 <HAL_RCC_OscConfig+0x172>
 800539e:	4b67      	ldr	r3, [pc, #412]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a66      	ldr	r2, [pc, #408]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 80053a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	4b64      	ldr	r3, [pc, #400]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a63      	ldr	r2, [pc, #396]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 80053b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053b4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053b6:	4b61      	ldr	r3, [pc, #388]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	f023 020f 	bic.w	r2, r3, #15
 80053be:	1d3b      	adds	r3, r7, #4
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	495d      	ldr	r1, [pc, #372]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053ca:	1d3b      	adds	r3, r7, #4
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d059      	beq.n	8005488 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d4:	f7fc ff90 	bl	80022f8 <HAL_GetTick>
 80053d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053dc:	e00a      	b.n	80053f4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053de:	f7fc ff8b 	bl	80022f8 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b64      	cmp	r3, #100	; 0x64
 80053ec:	d902      	bls.n	80053f4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	f000 be29 	b.w	8006046 <HAL_RCC_OscConfig+0xe02>
 80053f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053f8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005400:	fa93 f3a3 	rbit	r3, r3
 8005404:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005408:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540c:	fab3 f383 	clz	r3, r3
 8005410:	b2db      	uxtb	r3, r3
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	b2db      	uxtb	r3, r3
 8005416:	f043 0301 	orr.w	r3, r3, #1
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b01      	cmp	r3, #1
 800541e:	d102      	bne.n	8005426 <HAL_RCC_OscConfig+0x1e2>
 8005420:	4b46      	ldr	r3, [pc, #280]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	e015      	b.n	8005452 <HAL_RCC_OscConfig+0x20e>
 8005426:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800542a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800542e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005432:	fa93 f3a3 	rbit	r3, r3
 8005436:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800543a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800543e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005442:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005446:	fa93 f3a3 	rbit	r3, r3
 800544a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800544e:	4b3b      	ldr	r3, [pc, #236]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005456:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800545a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800545e:	fa92 f2a2 	rbit	r2, r2
 8005462:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005466:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800546a:	fab2 f282 	clz	r2, r2
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	f042 0220 	orr.w	r2, r2, #32
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	f002 021f 	and.w	r2, r2, #31
 800547a:	2101      	movs	r1, #1
 800547c:	fa01 f202 	lsl.w	r2, r1, r2
 8005480:	4013      	ands	r3, r2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0ab      	beq.n	80053de <HAL_RCC_OscConfig+0x19a>
 8005486:	e05c      	b.n	8005542 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005488:	f7fc ff36 	bl	80022f8 <HAL_GetTick>
 800548c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005490:	e00a      	b.n	80054a8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005492:	f7fc ff31 	bl	80022f8 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b64      	cmp	r3, #100	; 0x64
 80054a0:	d902      	bls.n	80054a8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	f000 bdcf 	b.w	8006046 <HAL_RCC_OscConfig+0xe02>
 80054a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054ac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80054b4:	fa93 f3a3 	rbit	r3, r3
 80054b8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80054bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054c0:	fab3 f383 	clz	r3, r3
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	095b      	lsrs	r3, r3, #5
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	f043 0301 	orr.w	r3, r3, #1
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d102      	bne.n	80054da <HAL_RCC_OscConfig+0x296>
 80054d4:	4b19      	ldr	r3, [pc, #100]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	e015      	b.n	8005506 <HAL_RCC_OscConfig+0x2c2>
 80054da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054de:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80054e6:	fa93 f3a3 	rbit	r3, r3
 80054ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80054ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054f2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80054f6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80054fa:	fa93 f3a3 	rbit	r3, r3
 80054fe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005502:	4b0e      	ldr	r3, [pc, #56]	; (800553c <HAL_RCC_OscConfig+0x2f8>)
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800550a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800550e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005512:	fa92 f2a2 	rbit	r2, r2
 8005516:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800551a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800551e:	fab2 f282 	clz	r2, r2
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	f042 0220 	orr.w	r2, r2, #32
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	f002 021f 	and.w	r2, r2, #31
 800552e:	2101      	movs	r1, #1
 8005530:	fa01 f202 	lsl.w	r2, r1, r2
 8005534:	4013      	ands	r3, r2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1ab      	bne.n	8005492 <HAL_RCC_OscConfig+0x24e>
 800553a:	e002      	b.n	8005542 <HAL_RCC_OscConfig+0x2fe>
 800553c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005542:	1d3b      	adds	r3, r7, #4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 816f 	beq.w	8005830 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005552:	4bd0      	ldr	r3, [pc, #832]	; (8005894 <HAL_RCC_OscConfig+0x650>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f003 030c 	and.w	r3, r3, #12
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00b      	beq.n	8005576 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800555e:	4bcd      	ldr	r3, [pc, #820]	; (8005894 <HAL_RCC_OscConfig+0x650>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f003 030c 	and.w	r3, r3, #12
 8005566:	2b08      	cmp	r3, #8
 8005568:	d16c      	bne.n	8005644 <HAL_RCC_OscConfig+0x400>
 800556a:	4bca      	ldr	r3, [pc, #808]	; (8005894 <HAL_RCC_OscConfig+0x650>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d166      	bne.n	8005644 <HAL_RCC_OscConfig+0x400>
 8005576:	2302      	movs	r3, #2
 8005578:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005580:	fa93 f3a3 	rbit	r3, r3
 8005584:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005588:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800558c:	fab3 f383 	clz	r3, r3
 8005590:	b2db      	uxtb	r3, r3
 8005592:	095b      	lsrs	r3, r3, #5
 8005594:	b2db      	uxtb	r3, r3
 8005596:	f043 0301 	orr.w	r3, r3, #1
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b01      	cmp	r3, #1
 800559e:	d102      	bne.n	80055a6 <HAL_RCC_OscConfig+0x362>
 80055a0:	4bbc      	ldr	r3, [pc, #752]	; (8005894 <HAL_RCC_OscConfig+0x650>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	e013      	b.n	80055ce <HAL_RCC_OscConfig+0x38a>
 80055a6:	2302      	movs	r3, #2
 80055a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ac:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80055b0:	fa93 f3a3 	rbit	r3, r3
 80055b4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80055b8:	2302      	movs	r3, #2
 80055ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80055be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80055c2:	fa93 f3a3 	rbit	r3, r3
 80055c6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80055ca:	4bb2      	ldr	r3, [pc, #712]	; (8005894 <HAL_RCC_OscConfig+0x650>)
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	2202      	movs	r2, #2
 80055d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80055d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80055d8:	fa92 f2a2 	rbit	r2, r2
 80055dc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80055e0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80055e4:	fab2 f282 	clz	r2, r2
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	f042 0220 	orr.w	r2, r2, #32
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	f002 021f 	and.w	r2, r2, #31
 80055f4:	2101      	movs	r1, #1
 80055f6:	fa01 f202 	lsl.w	r2, r1, r2
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <HAL_RCC_OscConfig+0x3cc>
 8005600:	1d3b      	adds	r3, r7, #4
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d002      	beq.n	8005610 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	f000 bd1b 	b.w	8006046 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005610:	4ba0      	ldr	r3, [pc, #640]	; (8005894 <HAL_RCC_OscConfig+0x650>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005618:	1d3b      	adds	r3, r7, #4
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	21f8      	movs	r1, #248	; 0xf8
 8005620:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005624:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005628:	fa91 f1a1 	rbit	r1, r1
 800562c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005630:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005634:	fab1 f181 	clz	r1, r1
 8005638:	b2c9      	uxtb	r1, r1
 800563a:	408b      	lsls	r3, r1
 800563c:	4995      	ldr	r1, [pc, #596]	; (8005894 <HAL_RCC_OscConfig+0x650>)
 800563e:	4313      	orrs	r3, r2
 8005640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005642:	e0f5      	b.n	8005830 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005644:	1d3b      	adds	r3, r7, #4
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 8085 	beq.w	800575a <HAL_RCC_OscConfig+0x516>
 8005650:	2301      	movs	r3, #1
 8005652:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005656:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800565a:	fa93 f3a3 	rbit	r3, r3
 800565e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005662:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005666:	fab3 f383 	clz	r3, r3
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005670:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	461a      	mov	r2, r3
 8005678:	2301      	movs	r3, #1
 800567a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567c:	f7fc fe3c 	bl	80022f8 <HAL_GetTick>
 8005680:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005684:	e00a      	b.n	800569c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005686:	f7fc fe37 	bl	80022f8 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d902      	bls.n	800569c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	f000 bcd5 	b.w	8006046 <HAL_RCC_OscConfig+0xe02>
 800569c:	2302      	movs	r3, #2
 800569e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80056a6:	fa93 f3a3 	rbit	r3, r3
 80056aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80056ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b2:	fab3 f383 	clz	r3, r3
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	f043 0301 	orr.w	r3, r3, #1
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d102      	bne.n	80056cc <HAL_RCC_OscConfig+0x488>
 80056c6:	4b73      	ldr	r3, [pc, #460]	; (8005894 <HAL_RCC_OscConfig+0x650>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	e013      	b.n	80056f4 <HAL_RCC_OscConfig+0x4b0>
 80056cc:	2302      	movs	r3, #2
 80056ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80056d6:	fa93 f3a3 	rbit	r3, r3
 80056da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80056de:	2302      	movs	r3, #2
 80056e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80056e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80056e8:	fa93 f3a3 	rbit	r3, r3
 80056ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80056f0:	4b68      	ldr	r3, [pc, #416]	; (8005894 <HAL_RCC_OscConfig+0x650>)
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	2202      	movs	r2, #2
 80056f6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80056fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80056fe:	fa92 f2a2 	rbit	r2, r2
 8005702:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005706:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800570a:	fab2 f282 	clz	r2, r2
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	f042 0220 	orr.w	r2, r2, #32
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	f002 021f 	and.w	r2, r2, #31
 800571a:	2101      	movs	r1, #1
 800571c:	fa01 f202 	lsl.w	r2, r1, r2
 8005720:	4013      	ands	r3, r2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0af      	beq.n	8005686 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005726:	4b5b      	ldr	r3, [pc, #364]	; (8005894 <HAL_RCC_OscConfig+0x650>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800572e:	1d3b      	adds	r3, r7, #4
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	21f8      	movs	r1, #248	; 0xf8
 8005736:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800573e:	fa91 f1a1 	rbit	r1, r1
 8005742:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005746:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800574a:	fab1 f181 	clz	r1, r1
 800574e:	b2c9      	uxtb	r1, r1
 8005750:	408b      	lsls	r3, r1
 8005752:	4950      	ldr	r1, [pc, #320]	; (8005894 <HAL_RCC_OscConfig+0x650>)
 8005754:	4313      	orrs	r3, r2
 8005756:	600b      	str	r3, [r1, #0]
 8005758:	e06a      	b.n	8005830 <HAL_RCC_OscConfig+0x5ec>
 800575a:	2301      	movs	r3, #1
 800575c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005760:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005764:	fa93 f3a3 	rbit	r3, r3
 8005768:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800576c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005770:	fab3 f383 	clz	r3, r3
 8005774:	b2db      	uxtb	r3, r3
 8005776:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800577a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	461a      	mov	r2, r3
 8005782:	2300      	movs	r3, #0
 8005784:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005786:	f7fc fdb7 	bl	80022f8 <HAL_GetTick>
 800578a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800578e:	e00a      	b.n	80057a6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005790:	f7fc fdb2 	bl	80022f8 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d902      	bls.n	80057a6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	f000 bc50 	b.w	8006046 <HAL_RCC_OscConfig+0xe02>
 80057a6:	2302      	movs	r3, #2
 80057a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80057b0:	fa93 f3a3 	rbit	r3, r3
 80057b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80057b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057bc:	fab3 f383 	clz	r3, r3
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	f043 0301 	orr.w	r3, r3, #1
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d102      	bne.n	80057d6 <HAL_RCC_OscConfig+0x592>
 80057d0:	4b30      	ldr	r3, [pc, #192]	; (8005894 <HAL_RCC_OscConfig+0x650>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	e013      	b.n	80057fe <HAL_RCC_OscConfig+0x5ba>
 80057d6:	2302      	movs	r3, #2
 80057d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057e0:	fa93 f3a3 	rbit	r3, r3
 80057e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80057e8:	2302      	movs	r3, #2
 80057ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80057ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80057f2:	fa93 f3a3 	rbit	r3, r3
 80057f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80057fa:	4b26      	ldr	r3, [pc, #152]	; (8005894 <HAL_RCC_OscConfig+0x650>)
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	2202      	movs	r2, #2
 8005800:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005804:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005808:	fa92 f2a2 	rbit	r2, r2
 800580c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005810:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005814:	fab2 f282 	clz	r2, r2
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	f042 0220 	orr.w	r2, r2, #32
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	f002 021f 	and.w	r2, r2, #31
 8005824:	2101      	movs	r1, #1
 8005826:	fa01 f202 	lsl.w	r2, r1, r2
 800582a:	4013      	ands	r3, r2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1af      	bne.n	8005790 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005830:	1d3b      	adds	r3, r7, #4
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 80da 	beq.w	80059f4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005840:	1d3b      	adds	r3, r7, #4
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d069      	beq.n	800591e <HAL_RCC_OscConfig+0x6da>
 800584a:	2301      	movs	r3, #1
 800584c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005850:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005854:	fa93 f3a3 	rbit	r3, r3
 8005858:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800585c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005860:	fab3 f383 	clz	r3, r3
 8005864:	b2db      	uxtb	r3, r3
 8005866:	461a      	mov	r2, r3
 8005868:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <HAL_RCC_OscConfig+0x654>)
 800586a:	4413      	add	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	461a      	mov	r2, r3
 8005870:	2301      	movs	r3, #1
 8005872:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005874:	f7fc fd40 	bl	80022f8 <HAL_GetTick>
 8005878:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800587c:	e00e      	b.n	800589c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800587e:	f7fc fd3b 	bl	80022f8 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d906      	bls.n	800589c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e3d9      	b.n	8006046 <HAL_RCC_OscConfig+0xe02>
 8005892:	bf00      	nop
 8005894:	40021000 	.word	0x40021000
 8005898:	10908120 	.word	0x10908120
 800589c:	2302      	movs	r3, #2
 800589e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058a6:	fa93 f3a3 	rbit	r3, r3
 80058aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80058b2:	2202      	movs	r2, #2
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	fa93 f2a3 	rbit	r2, r3
 80058c0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80058ca:	2202      	movs	r2, #2
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	fa93 f2a3 	rbit	r2, r3
 80058d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80058dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058de:	4ba5      	ldr	r3, [pc, #660]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 80058e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80058e6:	2102      	movs	r1, #2
 80058e8:	6019      	str	r1, [r3, #0]
 80058ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	fa93 f1a3 	rbit	r1, r3
 80058f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80058f8:	6019      	str	r1, [r3, #0]
  return result;
 80058fa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	fab3 f383 	clz	r3, r3
 8005904:	b2db      	uxtb	r3, r3
 8005906:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800590a:	b2db      	uxtb	r3, r3
 800590c:	f003 031f 	and.w	r3, r3, #31
 8005910:	2101      	movs	r1, #1
 8005912:	fa01 f303 	lsl.w	r3, r1, r3
 8005916:	4013      	ands	r3, r2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0b0      	beq.n	800587e <HAL_RCC_OscConfig+0x63a>
 800591c:	e06a      	b.n	80059f4 <HAL_RCC_OscConfig+0x7b0>
 800591e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005922:	2201      	movs	r2, #1
 8005924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005926:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	fa93 f2a3 	rbit	r2, r3
 8005930:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005934:	601a      	str	r2, [r3, #0]
  return result;
 8005936:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800593a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800593c:	fab3 f383 	clz	r3, r3
 8005940:	b2db      	uxtb	r3, r3
 8005942:	461a      	mov	r2, r3
 8005944:	4b8c      	ldr	r3, [pc, #560]	; (8005b78 <HAL_RCC_OscConfig+0x934>)
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	461a      	mov	r2, r3
 800594c:	2300      	movs	r3, #0
 800594e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005950:	f7fc fcd2 	bl	80022f8 <HAL_GetTick>
 8005954:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005958:	e009      	b.n	800596e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800595a:	f7fc fccd 	bl	80022f8 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e36b      	b.n	8006046 <HAL_RCC_OscConfig+0xe02>
 800596e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005972:	2202      	movs	r2, #2
 8005974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005976:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	fa93 f2a3 	rbit	r2, r3
 8005980:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800598a:	2202      	movs	r2, #2
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	fa93 f2a3 	rbit	r2, r3
 8005998:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80059a2:	2202      	movs	r2, #2
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	fa93 f2a3 	rbit	r2, r3
 80059b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80059b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b6:	4b6f      	ldr	r3, [pc, #444]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 80059b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059ba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80059be:	2102      	movs	r1, #2
 80059c0:	6019      	str	r1, [r3, #0]
 80059c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	fa93 f1a3 	rbit	r1, r3
 80059cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80059d0:	6019      	str	r1, [r3, #0]
  return result;
 80059d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	fab3 f383 	clz	r3, r3
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	f003 031f 	and.w	r3, r3, #31
 80059e8:	2101      	movs	r1, #1
 80059ea:	fa01 f303 	lsl.w	r3, r1, r3
 80059ee:	4013      	ands	r3, r2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1b2      	bne.n	800595a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059f4:	1d3b      	adds	r3, r7, #4
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0304 	and.w	r3, r3, #4
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 8158 	beq.w	8005cb4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a04:	2300      	movs	r3, #0
 8005a06:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a0a:	4b5a      	ldr	r3, [pc, #360]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d112      	bne.n	8005a3c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a16:	4b57      	ldr	r3, [pc, #348]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	4a56      	ldr	r2, [pc, #344]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 8005a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a20:	61d3      	str	r3, [r2, #28]
 8005a22:	4b54      	ldr	r3, [pc, #336]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005a2a:	f107 0308 	add.w	r3, r7, #8
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	f107 0308 	add.w	r3, r7, #8
 8005a34:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a3c:	4b4f      	ldr	r3, [pc, #316]	; (8005b7c <HAL_RCC_OscConfig+0x938>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11a      	bne.n	8005a7e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a48:	4b4c      	ldr	r3, [pc, #304]	; (8005b7c <HAL_RCC_OscConfig+0x938>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a4b      	ldr	r2, [pc, #300]	; (8005b7c <HAL_RCC_OscConfig+0x938>)
 8005a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a52:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a54:	f7fc fc50 	bl	80022f8 <HAL_GetTick>
 8005a58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a5c:	e009      	b.n	8005a72 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a5e:	f7fc fc4b 	bl	80022f8 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b64      	cmp	r3, #100	; 0x64
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e2e9      	b.n	8006046 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a72:	4b42      	ldr	r3, [pc, #264]	; (8005b7c <HAL_RCC_OscConfig+0x938>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0ef      	beq.n	8005a5e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a7e:	1d3b      	adds	r3, r7, #4
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d106      	bne.n	8005a96 <HAL_RCC_OscConfig+0x852>
 8005a88:	4b3a      	ldr	r3, [pc, #232]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	4a39      	ldr	r2, [pc, #228]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	6213      	str	r3, [r2, #32]
 8005a94:	e02f      	b.n	8005af6 <HAL_RCC_OscConfig+0x8b2>
 8005a96:	1d3b      	adds	r3, r7, #4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10c      	bne.n	8005aba <HAL_RCC_OscConfig+0x876>
 8005aa0:	4b34      	ldr	r3, [pc, #208]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	4a33      	ldr	r2, [pc, #204]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 8005aa6:	f023 0301 	bic.w	r3, r3, #1
 8005aaa:	6213      	str	r3, [r2, #32]
 8005aac:	4b31      	ldr	r3, [pc, #196]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	4a30      	ldr	r2, [pc, #192]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 8005ab2:	f023 0304 	bic.w	r3, r3, #4
 8005ab6:	6213      	str	r3, [r2, #32]
 8005ab8:	e01d      	b.n	8005af6 <HAL_RCC_OscConfig+0x8b2>
 8005aba:	1d3b      	adds	r3, r7, #4
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	2b05      	cmp	r3, #5
 8005ac2:	d10c      	bne.n	8005ade <HAL_RCC_OscConfig+0x89a>
 8005ac4:	4b2b      	ldr	r3, [pc, #172]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	4a2a      	ldr	r2, [pc, #168]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 8005aca:	f043 0304 	orr.w	r3, r3, #4
 8005ace:	6213      	str	r3, [r2, #32]
 8005ad0:	4b28      	ldr	r3, [pc, #160]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	4a27      	ldr	r2, [pc, #156]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 8005ad6:	f043 0301 	orr.w	r3, r3, #1
 8005ada:	6213      	str	r3, [r2, #32]
 8005adc:	e00b      	b.n	8005af6 <HAL_RCC_OscConfig+0x8b2>
 8005ade:	4b25      	ldr	r3, [pc, #148]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	4a24      	ldr	r2, [pc, #144]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 8005ae4:	f023 0301 	bic.w	r3, r3, #1
 8005ae8:	6213      	str	r3, [r2, #32]
 8005aea:	4b22      	ldr	r3, [pc, #136]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	4a21      	ldr	r2, [pc, #132]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 8005af0:	f023 0304 	bic.w	r3, r3, #4
 8005af4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005af6:	1d3b      	adds	r3, r7, #4
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d06b      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b00:	f7fc fbfa 	bl	80022f8 <HAL_GetTick>
 8005b04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b08:	e00b      	b.n	8005b22 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b0a:	f7fc fbf5 	bl	80022f8 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e291      	b.n	8006046 <HAL_RCC_OscConfig+0xe02>
 8005b22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005b26:	2202      	movs	r2, #2
 8005b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b2a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	fa93 f2a3 	rbit	r2, r3
 8005b34:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005b3e:	2202      	movs	r2, #2
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	fa93 f2a3 	rbit	r2, r3
 8005b4c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005b50:	601a      	str	r2, [r3, #0]
  return result;
 8005b52:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005b56:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b58:	fab3 f383 	clz	r3, r3
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	f043 0302 	orr.w	r3, r3, #2
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d109      	bne.n	8005b80 <HAL_RCC_OscConfig+0x93c>
 8005b6c:	4b01      	ldr	r3, [pc, #4]	; (8005b74 <HAL_RCC_OscConfig+0x930>)
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	e014      	b.n	8005b9c <HAL_RCC_OscConfig+0x958>
 8005b72:	bf00      	nop
 8005b74:	40021000 	.word	0x40021000
 8005b78:	10908120 	.word	0x10908120
 8005b7c:	40007000 	.word	0x40007000
 8005b80:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005b84:	2202      	movs	r2, #2
 8005b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b88:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	fa93 f2a3 	rbit	r2, r3
 8005b92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	4bbb      	ldr	r3, [pc, #748]	; (8005e88 <HAL_RCC_OscConfig+0xc44>)
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005ba0:	2102      	movs	r1, #2
 8005ba2:	6011      	str	r1, [r2, #0]
 8005ba4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005ba8:	6812      	ldr	r2, [r2, #0]
 8005baa:	fa92 f1a2 	rbit	r1, r2
 8005bae:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005bb2:	6011      	str	r1, [r2, #0]
  return result;
 8005bb4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005bb8:	6812      	ldr	r2, [r2, #0]
 8005bba:	fab2 f282 	clz	r2, r2
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bc4:	b2d2      	uxtb	r2, r2
 8005bc6:	f002 021f 	and.w	r2, r2, #31
 8005bca:	2101      	movs	r1, #1
 8005bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d099      	beq.n	8005b0a <HAL_RCC_OscConfig+0x8c6>
 8005bd6:	e063      	b.n	8005ca0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bd8:	f7fc fb8e 	bl	80022f8 <HAL_GetTick>
 8005bdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005be0:	e00b      	b.n	8005bfa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005be2:	f7fc fb89 	bl	80022f8 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e225      	b.n	8006046 <HAL_RCC_OscConfig+0xe02>
 8005bfa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005bfe:	2202      	movs	r2, #2
 8005c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	fa93 f2a3 	rbit	r2, r3
 8005c0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005c16:	2202      	movs	r2, #2
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	fa93 f2a3 	rbit	r2, r3
 8005c24:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005c28:	601a      	str	r2, [r3, #0]
  return result;
 8005c2a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005c2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c30:	fab3 f383 	clz	r3, r3
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	095b      	lsrs	r3, r3, #5
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	f043 0302 	orr.w	r3, r3, #2
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d102      	bne.n	8005c4a <HAL_RCC_OscConfig+0xa06>
 8005c44:	4b90      	ldr	r3, [pc, #576]	; (8005e88 <HAL_RCC_OscConfig+0xc44>)
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	e00d      	b.n	8005c66 <HAL_RCC_OscConfig+0xa22>
 8005c4a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005c4e:	2202      	movs	r2, #2
 8005c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c52:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	fa93 f2a3 	rbit	r2, r3
 8005c5c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	4b89      	ldr	r3, [pc, #548]	; (8005e88 <HAL_RCC_OscConfig+0xc44>)
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005c6a:	2102      	movs	r1, #2
 8005c6c:	6011      	str	r1, [r2, #0]
 8005c6e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005c72:	6812      	ldr	r2, [r2, #0]
 8005c74:	fa92 f1a2 	rbit	r1, r2
 8005c78:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005c7c:	6011      	str	r1, [r2, #0]
  return result;
 8005c7e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005c82:	6812      	ldr	r2, [r2, #0]
 8005c84:	fab2 f282 	clz	r2, r2
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	f002 021f 	and.w	r2, r2, #31
 8005c94:	2101      	movs	r1, #1
 8005c96:	fa01 f202 	lsl.w	r2, r1, r2
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1a0      	bne.n	8005be2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005ca0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d105      	bne.n	8005cb4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ca8:	4b77      	ldr	r3, [pc, #476]	; (8005e88 <HAL_RCC_OscConfig+0xc44>)
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	4a76      	ldr	r2, [pc, #472]	; (8005e88 <HAL_RCC_OscConfig+0xc44>)
 8005cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cb2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cb4:	1d3b      	adds	r3, r7, #4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 81c2 	beq.w	8006044 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cc0:	4b71      	ldr	r3, [pc, #452]	; (8005e88 <HAL_RCC_OscConfig+0xc44>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f003 030c 	and.w	r3, r3, #12
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	f000 819c 	beq.w	8006006 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cce:	1d3b      	adds	r3, r7, #4
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	f040 8114 	bne.w	8005f02 <HAL_RCC_OscConfig+0xcbe>
 8005cda:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005cde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	fa93 f2a3 	rbit	r2, r3
 8005cee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005cf2:	601a      	str	r2, [r3, #0]
  return result;
 8005cf4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005cf8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cfa:	fab3 f383 	clz	r3, r3
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005d04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d10:	f7fc faf2 	bl	80022f8 <HAL_GetTick>
 8005d14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d18:	e009      	b.n	8005d2e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d1a:	f7fc faed 	bl	80022f8 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e18b      	b.n	8006046 <HAL_RCC_OscConfig+0xe02>
 8005d2e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005d32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d38:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	fa93 f2a3 	rbit	r2, r3
 8005d42:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005d46:	601a      	str	r2, [r3, #0]
  return result;
 8005d48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005d4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d4e:	fab3 f383 	clz	r3, r3
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	095b      	lsrs	r3, r3, #5
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	f043 0301 	orr.w	r3, r3, #1
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d102      	bne.n	8005d68 <HAL_RCC_OscConfig+0xb24>
 8005d62:	4b49      	ldr	r3, [pc, #292]	; (8005e88 <HAL_RCC_OscConfig+0xc44>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	e01b      	b.n	8005da0 <HAL_RCC_OscConfig+0xb5c>
 8005d68:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005d6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d72:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	fa93 f2a3 	rbit	r2, r3
 8005d7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005d86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	fa93 f2a3 	rbit	r2, r3
 8005d96:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	4b3a      	ldr	r3, [pc, #232]	; (8005e88 <HAL_RCC_OscConfig+0xc44>)
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005da4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005da8:	6011      	str	r1, [r2, #0]
 8005daa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005dae:	6812      	ldr	r2, [r2, #0]
 8005db0:	fa92 f1a2 	rbit	r1, r2
 8005db4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005db8:	6011      	str	r1, [r2, #0]
  return result;
 8005dba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005dbe:	6812      	ldr	r2, [r2, #0]
 8005dc0:	fab2 f282 	clz	r2, r2
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	f042 0220 	orr.w	r2, r2, #32
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	f002 021f 	and.w	r2, r2, #31
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d19e      	bne.n	8005d1a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ddc:	4b2a      	ldr	r3, [pc, #168]	; (8005e88 <HAL_RCC_OscConfig+0xc44>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005de4:	1d3b      	adds	r3, r7, #4
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005dea:	1d3b      	adds	r3, r7, #4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	430b      	orrs	r3, r1
 8005df2:	4925      	ldr	r1, [pc, #148]	; (8005e88 <HAL_RCC_OscConfig+0xc44>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	604b      	str	r3, [r1, #4]
 8005df8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005dfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	fa93 f2a3 	rbit	r2, r3
 8005e0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005e10:	601a      	str	r2, [r3, #0]
  return result;
 8005e12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005e16:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e18:	fab3 f383 	clz	r3, r3
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005e22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	461a      	mov	r2, r3
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e2e:	f7fc fa63 	bl	80022f8 <HAL_GetTick>
 8005e32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e36:	e009      	b.n	8005e4c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e38:	f7fc fa5e 	bl	80022f8 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d901      	bls.n	8005e4c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e0fc      	b.n	8006046 <HAL_RCC_OscConfig+0xe02>
 8005e4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005e50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	fa93 f2a3 	rbit	r2, r3
 8005e60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005e64:	601a      	str	r2, [r3, #0]
  return result;
 8005e66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005e6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e6c:	fab3 f383 	clz	r3, r3
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	f043 0301 	orr.w	r3, r3, #1
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d105      	bne.n	8005e8c <HAL_RCC_OscConfig+0xc48>
 8005e80:	4b01      	ldr	r3, [pc, #4]	; (8005e88 <HAL_RCC_OscConfig+0xc44>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	e01e      	b.n	8005ec4 <HAL_RCC_OscConfig+0xc80>
 8005e86:	bf00      	nop
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	fa93 f2a3 	rbit	r2, r3
 8005ea0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005eaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	fa93 f2a3 	rbit	r2, r3
 8005eba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	4b63      	ldr	r3, [pc, #396]	; (8006050 <HAL_RCC_OscConfig+0xe0c>)
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005ec8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005ecc:	6011      	str	r1, [r2, #0]
 8005ece:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005ed2:	6812      	ldr	r2, [r2, #0]
 8005ed4:	fa92 f1a2 	rbit	r1, r2
 8005ed8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005edc:	6011      	str	r1, [r2, #0]
  return result;
 8005ede:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005ee2:	6812      	ldr	r2, [r2, #0]
 8005ee4:	fab2 f282 	clz	r2, r2
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	f042 0220 	orr.w	r2, r2, #32
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	f002 021f 	and.w	r2, r2, #31
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8005efa:	4013      	ands	r3, r2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d09b      	beq.n	8005e38 <HAL_RCC_OscConfig+0xbf4>
 8005f00:	e0a0      	b.n	8006044 <HAL_RCC_OscConfig+0xe00>
 8005f02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	fa93 f2a3 	rbit	r2, r3
 8005f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f1a:	601a      	str	r2, [r3, #0]
  return result;
 8005f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f20:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f22:	fab3 f383 	clz	r3, r3
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	461a      	mov	r2, r3
 8005f34:	2300      	movs	r3, #0
 8005f36:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f38:	f7fc f9de 	bl	80022f8 <HAL_GetTick>
 8005f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f40:	e009      	b.n	8005f56 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f42:	f7fc f9d9 	bl	80022f8 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e077      	b.n	8006046 <HAL_RCC_OscConfig+0xe02>
 8005f56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	fa93 f2a3 	rbit	r2, r3
 8005f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f6e:	601a      	str	r2, [r3, #0]
  return result;
 8005f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f76:	fab3 f383 	clz	r3, r3
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	095b      	lsrs	r3, r3, #5
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	f043 0301 	orr.w	r3, r3, #1
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d102      	bne.n	8005f90 <HAL_RCC_OscConfig+0xd4c>
 8005f8a:	4b31      	ldr	r3, [pc, #196]	; (8006050 <HAL_RCC_OscConfig+0xe0c>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	e01b      	b.n	8005fc8 <HAL_RCC_OscConfig+0xd84>
 8005f90:	f107 0320 	add.w	r3, r7, #32
 8005f94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f9a:	f107 0320 	add.w	r3, r7, #32
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	fa93 f2a3 	rbit	r2, r3
 8005fa4:	f107 031c 	add.w	r3, r7, #28
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	f107 0318 	add.w	r3, r7, #24
 8005fae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	f107 0318 	add.w	r3, r7, #24
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	fa93 f2a3 	rbit	r2, r3
 8005fbe:	f107 0314 	add.w	r3, r7, #20
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	4b22      	ldr	r3, [pc, #136]	; (8006050 <HAL_RCC_OscConfig+0xe0c>)
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	f107 0210 	add.w	r2, r7, #16
 8005fcc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005fd0:	6011      	str	r1, [r2, #0]
 8005fd2:	f107 0210 	add.w	r2, r7, #16
 8005fd6:	6812      	ldr	r2, [r2, #0]
 8005fd8:	fa92 f1a2 	rbit	r1, r2
 8005fdc:	f107 020c 	add.w	r2, r7, #12
 8005fe0:	6011      	str	r1, [r2, #0]
  return result;
 8005fe2:	f107 020c 	add.w	r2, r7, #12
 8005fe6:	6812      	ldr	r2, [r2, #0]
 8005fe8:	fab2 f282 	clz	r2, r2
 8005fec:	b2d2      	uxtb	r2, r2
 8005fee:	f042 0220 	orr.w	r2, r2, #32
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	f002 021f 	and.w	r2, r2, #31
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8005ffe:	4013      	ands	r3, r2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d19e      	bne.n	8005f42 <HAL_RCC_OscConfig+0xcfe>
 8006004:	e01e      	b.n	8006044 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006006:	1d3b      	adds	r3, r7, #4
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d101      	bne.n	8006014 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e018      	b.n	8006046 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006014:	4b0e      	ldr	r3, [pc, #56]	; (8006050 <HAL_RCC_OscConfig+0xe0c>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800601c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006020:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006024:	1d3b      	adds	r3, r7, #4
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	429a      	cmp	r2, r3
 800602c:	d108      	bne.n	8006040 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800602e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006032:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006036:	1d3b      	adds	r3, r7, #4
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800603c:	429a      	cmp	r2, r3
 800603e:	d001      	beq.n	8006044 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e000      	b.n	8006046 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	40021000 	.word	0x40021000

08006054 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b09e      	sub	sp, #120	; 0x78
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e162      	b.n	8006332 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800606c:	4b90      	ldr	r3, [pc, #576]	; (80062b0 <HAL_RCC_ClockConfig+0x25c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	429a      	cmp	r2, r3
 8006078:	d910      	bls.n	800609c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800607a:	4b8d      	ldr	r3, [pc, #564]	; (80062b0 <HAL_RCC_ClockConfig+0x25c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f023 0207 	bic.w	r2, r3, #7
 8006082:	498b      	ldr	r1, [pc, #556]	; (80062b0 <HAL_RCC_ClockConfig+0x25c>)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	4313      	orrs	r3, r2
 8006088:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800608a:	4b89      	ldr	r3, [pc, #548]	; (80062b0 <HAL_RCC_ClockConfig+0x25c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d001      	beq.n	800609c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e14a      	b.n	8006332 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d008      	beq.n	80060ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060a8:	4b82      	ldr	r3, [pc, #520]	; (80062b4 <HAL_RCC_ClockConfig+0x260>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	497f      	ldr	r1, [pc, #508]	; (80062b4 <HAL_RCC_ClockConfig+0x260>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 80dc 	beq.w	8006280 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d13c      	bne.n	800614a <HAL_RCC_ClockConfig+0xf6>
 80060d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060d8:	fa93 f3a3 	rbit	r3, r3
 80060dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80060de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060e0:	fab3 f383 	clz	r3, r3
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	f043 0301 	orr.w	r3, r3, #1
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d102      	bne.n	80060fa <HAL_RCC_ClockConfig+0xa6>
 80060f4:	4b6f      	ldr	r3, [pc, #444]	; (80062b4 <HAL_RCC_ClockConfig+0x260>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	e00f      	b.n	800611a <HAL_RCC_ClockConfig+0xc6>
 80060fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006100:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006102:	fa93 f3a3 	rbit	r3, r3
 8006106:	667b      	str	r3, [r7, #100]	; 0x64
 8006108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800610c:	663b      	str	r3, [r7, #96]	; 0x60
 800610e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006110:	fa93 f3a3 	rbit	r3, r3
 8006114:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006116:	4b67      	ldr	r3, [pc, #412]	; (80062b4 <HAL_RCC_ClockConfig+0x260>)
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800611e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006120:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006122:	fa92 f2a2 	rbit	r2, r2
 8006126:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006128:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800612a:	fab2 f282 	clz	r2, r2
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	f042 0220 	orr.w	r2, r2, #32
 8006134:	b2d2      	uxtb	r2, r2
 8006136:	f002 021f 	and.w	r2, r2, #31
 800613a:	2101      	movs	r1, #1
 800613c:	fa01 f202 	lsl.w	r2, r1, r2
 8006140:	4013      	ands	r3, r2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d17b      	bne.n	800623e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e0f3      	b.n	8006332 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2b02      	cmp	r3, #2
 8006150:	d13c      	bne.n	80061cc <HAL_RCC_ClockConfig+0x178>
 8006152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006156:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800615a:	fa93 f3a3 	rbit	r3, r3
 800615e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006162:	fab3 f383 	clz	r3, r3
 8006166:	b2db      	uxtb	r3, r3
 8006168:	095b      	lsrs	r3, r3, #5
 800616a:	b2db      	uxtb	r3, r3
 800616c:	f043 0301 	orr.w	r3, r3, #1
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b01      	cmp	r3, #1
 8006174:	d102      	bne.n	800617c <HAL_RCC_ClockConfig+0x128>
 8006176:	4b4f      	ldr	r3, [pc, #316]	; (80062b4 <HAL_RCC_ClockConfig+0x260>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	e00f      	b.n	800619c <HAL_RCC_ClockConfig+0x148>
 800617c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006180:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006184:	fa93 f3a3 	rbit	r3, r3
 8006188:	647b      	str	r3, [r7, #68]	; 0x44
 800618a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800618e:	643b      	str	r3, [r7, #64]	; 0x40
 8006190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006192:	fa93 f3a3 	rbit	r3, r3
 8006196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006198:	4b46      	ldr	r3, [pc, #280]	; (80062b4 <HAL_RCC_ClockConfig+0x260>)
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80061a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061a4:	fa92 f2a2 	rbit	r2, r2
 80061a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80061aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061ac:	fab2 f282 	clz	r2, r2
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	f042 0220 	orr.w	r2, r2, #32
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	f002 021f 	and.w	r2, r2, #31
 80061bc:	2101      	movs	r1, #1
 80061be:	fa01 f202 	lsl.w	r2, r1, r2
 80061c2:	4013      	ands	r3, r2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d13a      	bne.n	800623e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e0b2      	b.n	8006332 <HAL_RCC_ClockConfig+0x2de>
 80061cc:	2302      	movs	r3, #2
 80061ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d2:	fa93 f3a3 	rbit	r3, r3
 80061d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80061d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061da:	fab3 f383 	clz	r3, r3
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	095b      	lsrs	r3, r3, #5
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	f043 0301 	orr.w	r3, r3, #1
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d102      	bne.n	80061f4 <HAL_RCC_ClockConfig+0x1a0>
 80061ee:	4b31      	ldr	r3, [pc, #196]	; (80062b4 <HAL_RCC_ClockConfig+0x260>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	e00d      	b.n	8006210 <HAL_RCC_ClockConfig+0x1bc>
 80061f4:	2302      	movs	r3, #2
 80061f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	fa93 f3a3 	rbit	r3, r3
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006200:	2302      	movs	r3, #2
 8006202:	623b      	str	r3, [r7, #32]
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	fa93 f3a3 	rbit	r3, r3
 800620a:	61fb      	str	r3, [r7, #28]
 800620c:	4b29      	ldr	r3, [pc, #164]	; (80062b4 <HAL_RCC_ClockConfig+0x260>)
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	2202      	movs	r2, #2
 8006212:	61ba      	str	r2, [r7, #24]
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	fa92 f2a2 	rbit	r2, r2
 800621a:	617a      	str	r2, [r7, #20]
  return result;
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	fab2 f282 	clz	r2, r2
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	f042 0220 	orr.w	r2, r2, #32
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	f002 021f 	and.w	r2, r2, #31
 800622e:	2101      	movs	r1, #1
 8006230:	fa01 f202 	lsl.w	r2, r1, r2
 8006234:	4013      	ands	r3, r2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e079      	b.n	8006332 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800623e:	4b1d      	ldr	r3, [pc, #116]	; (80062b4 <HAL_RCC_ClockConfig+0x260>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f023 0203 	bic.w	r2, r3, #3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	491a      	ldr	r1, [pc, #104]	; (80062b4 <HAL_RCC_ClockConfig+0x260>)
 800624c:	4313      	orrs	r3, r2
 800624e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006250:	f7fc f852 	bl	80022f8 <HAL_GetTick>
 8006254:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006256:	e00a      	b.n	800626e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006258:	f7fc f84e 	bl	80022f8 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	f241 3288 	movw	r2, #5000	; 0x1388
 8006266:	4293      	cmp	r3, r2
 8006268:	d901      	bls.n	800626e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e061      	b.n	8006332 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800626e:	4b11      	ldr	r3, [pc, #68]	; (80062b4 <HAL_RCC_ClockConfig+0x260>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f003 020c 	and.w	r2, r3, #12
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	429a      	cmp	r2, r3
 800627e:	d1eb      	bne.n	8006258 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006280:	4b0b      	ldr	r3, [pc, #44]	; (80062b0 <HAL_RCC_ClockConfig+0x25c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	429a      	cmp	r2, r3
 800628c:	d214      	bcs.n	80062b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800628e:	4b08      	ldr	r3, [pc, #32]	; (80062b0 <HAL_RCC_ClockConfig+0x25c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f023 0207 	bic.w	r2, r3, #7
 8006296:	4906      	ldr	r1, [pc, #24]	; (80062b0 <HAL_RCC_ClockConfig+0x25c>)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	4313      	orrs	r3, r2
 800629c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800629e:	4b04      	ldr	r3, [pc, #16]	; (80062b0 <HAL_RCC_ClockConfig+0x25c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d005      	beq.n	80062b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e040      	b.n	8006332 <HAL_RCC_ClockConfig+0x2de>
 80062b0:	40022000 	.word	0x40022000
 80062b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d008      	beq.n	80062d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062c4:	4b1d      	ldr	r3, [pc, #116]	; (800633c <HAL_RCC_ClockConfig+0x2e8>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	491a      	ldr	r1, [pc, #104]	; (800633c <HAL_RCC_ClockConfig+0x2e8>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0308 	and.w	r3, r3, #8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d009      	beq.n	80062f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062e2:	4b16      	ldr	r3, [pc, #88]	; (800633c <HAL_RCC_ClockConfig+0x2e8>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	4912      	ldr	r1, [pc, #72]	; (800633c <HAL_RCC_ClockConfig+0x2e8>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80062f6:	f000 f845 	bl	8006384 <HAL_RCC_GetSysClockFreq>
 80062fa:	4601      	mov	r1, r0
 80062fc:	4b0f      	ldr	r3, [pc, #60]	; (800633c <HAL_RCC_ClockConfig+0x2e8>)
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006304:	22f0      	movs	r2, #240	; 0xf0
 8006306:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	fa92 f2a2 	rbit	r2, r2
 800630e:	60fa      	str	r2, [r7, #12]
  return result;
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	fab2 f282 	clz	r2, r2
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	40d3      	lsrs	r3, r2
 800631a:	4a09      	ldr	r2, [pc, #36]	; (8006340 <HAL_RCC_ClockConfig+0x2ec>)
 800631c:	5cd3      	ldrb	r3, [r2, r3]
 800631e:	fa21 f303 	lsr.w	r3, r1, r3
 8006322:	4a08      	ldr	r2, [pc, #32]	; (8006344 <HAL_RCC_ClockConfig+0x2f0>)
 8006324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006326:	4b08      	ldr	r3, [pc, #32]	; (8006348 <HAL_RCC_ClockConfig+0x2f4>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f7fb ffa0 	bl	8002270 <HAL_InitTick>
  
  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3778      	adds	r7, #120	; 0x78
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	40021000 	.word	0x40021000
 8006340:	08009bbc 	.word	0x08009bbc
 8006344:	20000094 	.word	0x20000094
 8006348:	20000098 	.word	0x20000098

0800634c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006356:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	fa93 f3a3 	rbit	r3, r3
 800635e:	603b      	str	r3, [r7, #0]
  return result;
 8006360:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006362:	fab3 f383 	clz	r3, r3
 8006366:	b2db      	uxtb	r3, r3
 8006368:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800636c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	461a      	mov	r2, r3
 8006374:	2301      	movs	r3, #1
 8006376:	6013      	str	r3, [r2, #0]
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006384:	b480      	push	{r7}
 8006386:	b08b      	sub	sp, #44	; 0x2c
 8006388:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	61fb      	str	r3, [r7, #28]
 800638e:	2300      	movs	r3, #0
 8006390:	61bb      	str	r3, [r7, #24]
 8006392:	2300      	movs	r3, #0
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
 8006396:	2300      	movs	r3, #0
 8006398:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800639e:	4b29      	ldr	r3, [pc, #164]	; (8006444 <HAL_RCC_GetSysClockFreq+0xc0>)
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	f003 030c 	and.w	r3, r3, #12
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d002      	beq.n	80063b4 <HAL_RCC_GetSysClockFreq+0x30>
 80063ae:	2b08      	cmp	r3, #8
 80063b0:	d003      	beq.n	80063ba <HAL_RCC_GetSysClockFreq+0x36>
 80063b2:	e03c      	b.n	800642e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80063b4:	4b24      	ldr	r3, [pc, #144]	; (8006448 <HAL_RCC_GetSysClockFreq+0xc4>)
 80063b6:	623b      	str	r3, [r7, #32]
      break;
 80063b8:	e03c      	b.n	8006434 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80063c0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80063c4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	fa92 f2a2 	rbit	r2, r2
 80063cc:	607a      	str	r2, [r7, #4]
  return result;
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	fab2 f282 	clz	r2, r2
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	40d3      	lsrs	r3, r2
 80063d8:	4a1c      	ldr	r2, [pc, #112]	; (800644c <HAL_RCC_GetSysClockFreq+0xc8>)
 80063da:	5cd3      	ldrb	r3, [r2, r3]
 80063dc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80063de:	4b19      	ldr	r3, [pc, #100]	; (8006444 <HAL_RCC_GetSysClockFreq+0xc0>)
 80063e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e2:	f003 030f 	and.w	r3, r3, #15
 80063e6:	220f      	movs	r2, #15
 80063e8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	fa92 f2a2 	rbit	r2, r2
 80063f0:	60fa      	str	r2, [r7, #12]
  return result;
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	fab2 f282 	clz	r2, r2
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	40d3      	lsrs	r3, r2
 80063fc:	4a14      	ldr	r2, [pc, #80]	; (8006450 <HAL_RCC_GetSysClockFreq+0xcc>)
 80063fe:	5cd3      	ldrb	r3, [r2, r3]
 8006400:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d008      	beq.n	800641e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800640c:	4a0e      	ldr	r2, [pc, #56]	; (8006448 <HAL_RCC_GetSysClockFreq+0xc4>)
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	fbb2 f2f3 	udiv	r2, r2, r3
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	fb02 f303 	mul.w	r3, r2, r3
 800641a:	627b      	str	r3, [r7, #36]	; 0x24
 800641c:	e004      	b.n	8006428 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	4a0c      	ldr	r2, [pc, #48]	; (8006454 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006422:	fb02 f303 	mul.w	r3, r2, r3
 8006426:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	623b      	str	r3, [r7, #32]
      break;
 800642c:	e002      	b.n	8006434 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800642e:	4b06      	ldr	r3, [pc, #24]	; (8006448 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006430:	623b      	str	r3, [r7, #32]
      break;
 8006432:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006434:	6a3b      	ldr	r3, [r7, #32]
}
 8006436:	4618      	mov	r0, r3
 8006438:	372c      	adds	r7, #44	; 0x2c
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	40021000 	.word	0x40021000
 8006448:	007a1200 	.word	0x007a1200
 800644c:	08009bd4 	.word	0x08009bd4
 8006450:	08009be4 	.word	0x08009be4
 8006454:	003d0900 	.word	0x003d0900

08006458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006458:	b480      	push	{r7}
 800645a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800645c:	4b03      	ldr	r3, [pc, #12]	; (800646c <HAL_RCC_GetHCLKFreq+0x14>)
 800645e:	681b      	ldr	r3, [r3, #0]
}
 8006460:	4618      	mov	r0, r3
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	20000094 	.word	0x20000094

08006470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006476:	f7ff ffef 	bl	8006458 <HAL_RCC_GetHCLKFreq>
 800647a:	4601      	mov	r1, r0
 800647c:	4b0b      	ldr	r3, [pc, #44]	; (80064ac <HAL_RCC_GetPCLK1Freq+0x3c>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006484:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006488:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	fa92 f2a2 	rbit	r2, r2
 8006490:	603a      	str	r2, [r7, #0]
  return result;
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	fab2 f282 	clz	r2, r2
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	40d3      	lsrs	r3, r2
 800649c:	4a04      	ldr	r2, [pc, #16]	; (80064b0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800649e:	5cd3      	ldrb	r3, [r2, r3]
 80064a0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	40021000 	.word	0x40021000
 80064b0:	08009bcc 	.word	0x08009bcc

080064b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80064ba:	f7ff ffcd 	bl	8006458 <HAL_RCC_GetHCLKFreq>
 80064be:	4601      	mov	r1, r0
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80064c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80064cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	fa92 f2a2 	rbit	r2, r2
 80064d4:	603a      	str	r2, [r7, #0]
  return result;
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	fab2 f282 	clz	r2, r2
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	40d3      	lsrs	r3, r2
 80064e0:	4a04      	ldr	r2, [pc, #16]	; (80064f4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80064e2:	5cd3      	ldrb	r3, [r2, r3]
 80064e4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	40021000 	.word	0x40021000
 80064f4:	08009bcc 	.word	0x08009bcc

080064f8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80064fc:	4b06      	ldr	r3, [pc, #24]	; (8006518 <HAL_RCC_NMI_IRQHandler+0x20>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006504:	2b80      	cmp	r3, #128	; 0x80
 8006506:	d104      	bne.n	8006512 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006508:	f000 f80a 	bl	8006520 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800650c:	4b03      	ldr	r3, [pc, #12]	; (800651c <HAL_RCC_NMI_IRQHandler+0x24>)
 800650e:	2280      	movs	r2, #128	; 0x80
 8006510:	701a      	strb	r2, [r3, #0]
  }
}
 8006512:	bf00      	nop
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	40021000 	.word	0x40021000
 800651c:	4002100a 	.word	0x4002100a

08006520 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006520:	b480      	push	{r7}
 8006522:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8006524:	bf00      	nop
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
	...

08006530 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b092      	sub	sp, #72	; 0x48
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006540:	2300      	movs	r3, #0
 8006542:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 80cd 	beq.w	80066ee <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006554:	4b8e      	ldr	r3, [pc, #568]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10e      	bne.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006560:	4b8b      	ldr	r3, [pc, #556]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	4a8a      	ldr	r2, [pc, #552]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800656a:	61d3      	str	r3, [r2, #28]
 800656c:	4b88      	ldr	r3, [pc, #544]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006574:	60bb      	str	r3, [r7, #8]
 8006576:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006578:	2301      	movs	r3, #1
 800657a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800657e:	4b85      	ldr	r3, [pc, #532]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006586:	2b00      	cmp	r3, #0
 8006588:	d118      	bne.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800658a:	4b82      	ldr	r3, [pc, #520]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a81      	ldr	r2, [pc, #516]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006594:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006596:	f7fb feaf 	bl	80022f8 <HAL_GetTick>
 800659a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800659c:	e008      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800659e:	f7fb feab 	bl	80022f8 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b64      	cmp	r3, #100	; 0x64
 80065aa:	d901      	bls.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e0ea      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065b0:	4b78      	ldr	r3, [pc, #480]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0f0      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065bc:	4b74      	ldr	r3, [pc, #464]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d07d      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d076      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065da:	4b6d      	ldr	r3, [pc, #436]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80065e8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	fa93 f3a3 	rbit	r3, r3
 80065f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80065f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80065f4:	fab3 f383 	clz	r3, r3
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	461a      	mov	r2, r3
 80065fc:	4b66      	ldr	r3, [pc, #408]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065fe:	4413      	add	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	461a      	mov	r2, r3
 8006604:	2301      	movs	r3, #1
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800660c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800660e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006610:	fa93 f3a3 	rbit	r3, r3
 8006614:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006618:	fab3 f383 	clz	r3, r3
 800661c:	b2db      	uxtb	r3, r3
 800661e:	461a      	mov	r2, r3
 8006620:	4b5d      	ldr	r3, [pc, #372]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	461a      	mov	r2, r3
 8006628:	2300      	movs	r3, #0
 800662a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800662c:	4a58      	ldr	r2, [pc, #352]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800662e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006630:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d045      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800663c:	f7fb fe5c 	bl	80022f8 <HAL_GetTick>
 8006640:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006642:	e00a      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006644:	f7fb fe58 	bl	80022f8 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006652:	4293      	cmp	r3, r2
 8006654:	d901      	bls.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e095      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800665a:	2302      	movs	r3, #2
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	fa93 f3a3 	rbit	r3, r3
 8006664:	627b      	str	r3, [r7, #36]	; 0x24
 8006666:	2302      	movs	r3, #2
 8006668:	623b      	str	r3, [r7, #32]
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	fa93 f3a3 	rbit	r3, r3
 8006670:	61fb      	str	r3, [r7, #28]
  return result;
 8006672:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006674:	fab3 f383 	clz	r3, r3
 8006678:	b2db      	uxtb	r3, r3
 800667a:	095b      	lsrs	r3, r3, #5
 800667c:	b2db      	uxtb	r3, r3
 800667e:	f043 0302 	orr.w	r3, r3, #2
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b02      	cmp	r3, #2
 8006686:	d102      	bne.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006688:	4b41      	ldr	r3, [pc, #260]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	e007      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800668e:	2302      	movs	r3, #2
 8006690:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	fa93 f3a3 	rbit	r3, r3
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	4b3d      	ldr	r3, [pc, #244]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	2202      	movs	r2, #2
 80066a0:	613a      	str	r2, [r7, #16]
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	fa92 f2a2 	rbit	r2, r2
 80066a8:	60fa      	str	r2, [r7, #12]
  return result;
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	fab2 f282 	clz	r2, r2
 80066b0:	b2d2      	uxtb	r2, r2
 80066b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	f002 021f 	and.w	r2, r2, #31
 80066bc:	2101      	movs	r1, #1
 80066be:	fa01 f202 	lsl.w	r2, r1, r2
 80066c2:	4013      	ands	r3, r2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0bd      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80066c8:	4b31      	ldr	r3, [pc, #196]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	492e      	ldr	r1, [pc, #184]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80066da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d105      	bne.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066e2:	4b2b      	ldr	r3, [pc, #172]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	4a2a      	ldr	r2, [pc, #168]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066ec:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d008      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066fa:	4b25      	ldr	r3, [pc, #148]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fe:	f023 0203 	bic.w	r2, r3, #3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	4922      	ldr	r1, [pc, #136]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006708:	4313      	orrs	r3, r2
 800670a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0320 	and.w	r3, r3, #32
 8006714:	2b00      	cmp	r3, #0
 8006716:	d008      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006718:	4b1d      	ldr	r3, [pc, #116]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800671a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671c:	f023 0210 	bic.w	r2, r3, #16
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	491a      	ldr	r1, [pc, #104]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006726:	4313      	orrs	r3, r2
 8006728:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006732:	2b00      	cmp	r3, #0
 8006734:	d008      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006736:	4b16      	ldr	r3, [pc, #88]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	4913      	ldr	r1, [pc, #76]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006744:	4313      	orrs	r3, r2
 8006746:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d008      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006754:	4b0e      	ldr	r3, [pc, #56]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006758:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	490b      	ldr	r1, [pc, #44]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006762:	4313      	orrs	r3, r2
 8006764:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d008      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006772:	4b07      	ldr	r3, [pc, #28]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	4904      	ldr	r1, [pc, #16]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006780:	4313      	orrs	r3, r2
 8006782:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3748      	adds	r7, #72	; 0x48
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	40021000 	.word	0x40021000
 8006794:	40007000 	.word	0x40007000
 8006798:	10908100 	.word	0x10908100

0800679c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e049      	b.n	8006842 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d106      	bne.n	80067c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7fb fb38 	bl	8001e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3304      	adds	r3, #4
 80067d8:	4619      	mov	r1, r3
 80067da:	4610      	mov	r0, r2
 80067dc:	f000 fe58 	bl	8007490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b082      	sub	sp, #8
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e049      	b.n	80068f0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b00      	cmp	r3, #0
 8006866:	d106      	bne.n	8006876 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f841 	bl	80068f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2202      	movs	r2, #2
 800687a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	3304      	adds	r3, #4
 8006886:	4619      	mov	r1, r3
 8006888:	4610      	mov	r0, r2
 800688a:	f000 fe01 	bl	8007490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
 8006918:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d109      	bne.n	8006938 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	bf0c      	ite	eq
 8006930:	2301      	moveq	r3, #1
 8006932:	2300      	movne	r3, #0
 8006934:	b2db      	uxtb	r3, r3
 8006936:	e03c      	b.n	80069b2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b04      	cmp	r3, #4
 800693c:	d109      	bne.n	8006952 <HAL_TIM_PWM_Start_DMA+0x46>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b02      	cmp	r3, #2
 8006948:	bf0c      	ite	eq
 800694a:	2301      	moveq	r3, #1
 800694c:	2300      	movne	r3, #0
 800694e:	b2db      	uxtb	r3, r3
 8006950:	e02f      	b.n	80069b2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2b08      	cmp	r3, #8
 8006956:	d109      	bne.n	800696c <HAL_TIM_PWM_Start_DMA+0x60>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	bf0c      	ite	eq
 8006964:	2301      	moveq	r3, #1
 8006966:	2300      	movne	r3, #0
 8006968:	b2db      	uxtb	r3, r3
 800696a:	e022      	b.n	80069b2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2b0c      	cmp	r3, #12
 8006970:	d109      	bne.n	8006986 <HAL_TIM_PWM_Start_DMA+0x7a>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b02      	cmp	r3, #2
 800697c:	bf0c      	ite	eq
 800697e:	2301      	moveq	r3, #1
 8006980:	2300      	movne	r3, #0
 8006982:	b2db      	uxtb	r3, r3
 8006984:	e015      	b.n	80069b2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b10      	cmp	r3, #16
 800698a:	d109      	bne.n	80069a0 <HAL_TIM_PWM_Start_DMA+0x94>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	bf0c      	ite	eq
 8006998:	2301      	moveq	r3, #1
 800699a:	2300      	movne	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	e008      	b.n	80069b2 <HAL_TIM_PWM_Start_DMA+0xa6>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	bf0c      	ite	eq
 80069ac:	2301      	moveq	r3, #1
 80069ae:	2300      	movne	r3, #0
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80069b6:	2302      	movs	r3, #2
 80069b8:	e197      	b.n	8006cea <HAL_TIM_PWM_Start_DMA+0x3de>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d109      	bne.n	80069d4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	bf0c      	ite	eq
 80069cc:	2301      	moveq	r3, #1
 80069ce:	2300      	movne	r3, #0
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	e03c      	b.n	8006a4e <HAL_TIM_PWM_Start_DMA+0x142>
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d109      	bne.n	80069ee <HAL_TIM_PWM_Start_DMA+0xe2>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	bf0c      	ite	eq
 80069e6:	2301      	moveq	r3, #1
 80069e8:	2300      	movne	r3, #0
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	e02f      	b.n	8006a4e <HAL_TIM_PWM_Start_DMA+0x142>
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d109      	bne.n	8006a08 <HAL_TIM_PWM_Start_DMA+0xfc>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	bf0c      	ite	eq
 8006a00:	2301      	moveq	r3, #1
 8006a02:	2300      	movne	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	e022      	b.n	8006a4e <HAL_TIM_PWM_Start_DMA+0x142>
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2b0c      	cmp	r3, #12
 8006a0c:	d109      	bne.n	8006a22 <HAL_TIM_PWM_Start_DMA+0x116>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	bf0c      	ite	eq
 8006a1a:	2301      	moveq	r3, #1
 8006a1c:	2300      	movne	r3, #0
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	e015      	b.n	8006a4e <HAL_TIM_PWM_Start_DMA+0x142>
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2b10      	cmp	r3, #16
 8006a26:	d109      	bne.n	8006a3c <HAL_TIM_PWM_Start_DMA+0x130>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	bf0c      	ite	eq
 8006a34:	2301      	moveq	r3, #1
 8006a36:	2300      	movne	r3, #0
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	e008      	b.n	8006a4e <HAL_TIM_PWM_Start_DMA+0x142>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	bf0c      	ite	eq
 8006a48:	2301      	moveq	r3, #1
 8006a4a:	2300      	movne	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d034      	beq.n	8006abc <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d104      	bne.n	8006a62 <HAL_TIM_PWM_Start_DMA+0x156>
 8006a58:	887b      	ldrh	r3, [r7, #2]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e143      	b.n	8006cea <HAL_TIM_PWM_Start_DMA+0x3de>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d104      	bne.n	8006a72 <HAL_TIM_PWM_Start_DMA+0x166>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a70:	e026      	b.n	8006ac0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b04      	cmp	r3, #4
 8006a76:	d104      	bne.n	8006a82 <HAL_TIM_PWM_Start_DMA+0x176>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a80:	e01e      	b.n	8006ac0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	d104      	bne.n	8006a92 <HAL_TIM_PWM_Start_DMA+0x186>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a90:	e016      	b.n	8006ac0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b0c      	cmp	r3, #12
 8006a96:	d104      	bne.n	8006aa2 <HAL_TIM_PWM_Start_DMA+0x196>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006aa0:	e00e      	b.n	8006ac0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b10      	cmp	r3, #16
 8006aa6:	d104      	bne.n	8006ab2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ab0:	e006      	b.n	8006ac0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006aba:	e001      	b.n	8006ac0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e114      	b.n	8006cea <HAL_TIM_PWM_Start_DMA+0x3de>
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2b0c      	cmp	r3, #12
 8006ac4:	f200 80ae 	bhi.w	8006c24 <HAL_TIM_PWM_Start_DMA+0x318>
 8006ac8:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8006aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ace:	bf00      	nop
 8006ad0:	08006b05 	.word	0x08006b05
 8006ad4:	08006c25 	.word	0x08006c25
 8006ad8:	08006c25 	.word	0x08006c25
 8006adc:	08006c25 	.word	0x08006c25
 8006ae0:	08006b4d 	.word	0x08006b4d
 8006ae4:	08006c25 	.word	0x08006c25
 8006ae8:	08006c25 	.word	0x08006c25
 8006aec:	08006c25 	.word	0x08006c25
 8006af0:	08006b95 	.word	0x08006b95
 8006af4:	08006c25 	.word	0x08006c25
 8006af8:	08006c25 	.word	0x08006c25
 8006afc:	08006c25 	.word	0x08006c25
 8006b00:	08006bdd 	.word	0x08006bdd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	4a7a      	ldr	r2, [pc, #488]	; (8006cf4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8006b0a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	4a79      	ldr	r2, [pc, #484]	; (8006cf8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8006b12:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	4a78      	ldr	r2, [pc, #480]	; (8006cfc <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8006b1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3334      	adds	r3, #52	; 0x34
 8006b28:	461a      	mov	r2, r3
 8006b2a:	887b      	ldrh	r3, [r7, #2]
 8006b2c:	f7fc fca4 	bl	8003478 <HAL_DMA_Start_IT>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e0d7      	b.n	8006cea <HAL_TIM_PWM_Start_DMA+0x3de>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68da      	ldr	r2, [r3, #12]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b48:	60da      	str	r2, [r3, #12]
      break;
 8006b4a:	e06e      	b.n	8006c2a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b50:	4a68      	ldr	r2, [pc, #416]	; (8006cf4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8006b52:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b58:	4a67      	ldr	r2, [pc, #412]	; (8006cf8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8006b5a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b60:	4a66      	ldr	r2, [pc, #408]	; (8006cfc <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8006b62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3338      	adds	r3, #56	; 0x38
 8006b70:	461a      	mov	r2, r3
 8006b72:	887b      	ldrh	r3, [r7, #2]
 8006b74:	f7fc fc80 	bl	8003478 <HAL_DMA_Start_IT>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e0b3      	b.n	8006cea <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68da      	ldr	r2, [r3, #12]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b90:	60da      	str	r2, [r3, #12]
      break;
 8006b92:	e04a      	b.n	8006c2a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	4a56      	ldr	r2, [pc, #344]	; (8006cf4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8006b9a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba0:	4a55      	ldr	r2, [pc, #340]	; (8006cf8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8006ba2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	4a54      	ldr	r2, [pc, #336]	; (8006cfc <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8006baa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006bb0:	6879      	ldr	r1, [r7, #4]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	333c      	adds	r3, #60	; 0x3c
 8006bb8:	461a      	mov	r2, r3
 8006bba:	887b      	ldrh	r3, [r7, #2]
 8006bbc:	f7fc fc5c 	bl	8003478 <HAL_DMA_Start_IT>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e08f      	b.n	8006cea <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bd8:	60da      	str	r2, [r3, #12]
      break;
 8006bda:	e026      	b.n	8006c2a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be0:	4a44      	ldr	r2, [pc, #272]	; (8006cf4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8006be2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be8:	4a43      	ldr	r2, [pc, #268]	; (8006cf8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8006bea:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf0:	4a42      	ldr	r2, [pc, #264]	; (8006cfc <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8006bf2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006bf8:	6879      	ldr	r1, [r7, #4]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3340      	adds	r3, #64	; 0x40
 8006c00:	461a      	mov	r2, r3
 8006c02:	887b      	ldrh	r3, [r7, #2]
 8006c04:	f7fc fc38 	bl	8003478 <HAL_DMA_Start_IT>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e06b      	b.n	8006cea <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68da      	ldr	r2, [r3, #12]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c20:	60da      	str	r2, [r3, #12]
      break;
 8006c22:	e002      	b.n	8006c2a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	75fb      	strb	r3, [r7, #23]
      break;
 8006c28:	bf00      	nop
  }

  if (status == HAL_OK)
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d15b      	bne.n	8006ce8 <HAL_TIM_PWM_Start_DMA+0x3dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2201      	movs	r2, #1
 8006c36:	68b9      	ldr	r1, [r7, #8]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 ffe1 	bl	8007c00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a2f      	ldr	r2, [pc, #188]	; (8006d00 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d00e      	beq.n	8006c66 <HAL_TIM_PWM_Start_DMA+0x35a>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a2d      	ldr	r2, [pc, #180]	; (8006d04 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d009      	beq.n	8006c66 <HAL_TIM_PWM_Start_DMA+0x35a>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a2c      	ldr	r2, [pc, #176]	; (8006d08 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d004      	beq.n	8006c66 <HAL_TIM_PWM_Start_DMA+0x35a>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a2a      	ldr	r2, [pc, #168]	; (8006d0c <HAL_TIM_PWM_Start_DMA+0x400>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d101      	bne.n	8006c6a <HAL_TIM_PWM_Start_DMA+0x35e>
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <HAL_TIM_PWM_Start_DMA+0x360>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d007      	beq.n	8006c80 <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c7e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a1e      	ldr	r2, [pc, #120]	; (8006d00 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d00e      	beq.n	8006ca8 <HAL_TIM_PWM_Start_DMA+0x39c>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c92:	d009      	beq.n	8006ca8 <HAL_TIM_PWM_Start_DMA+0x39c>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a1d      	ldr	r2, [pc, #116]	; (8006d10 <HAL_TIM_PWM_Start_DMA+0x404>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d004      	beq.n	8006ca8 <HAL_TIM_PWM_Start_DMA+0x39c>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a18      	ldr	r2, [pc, #96]	; (8006d04 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d115      	bne.n	8006cd4 <HAL_TIM_PWM_Start_DMA+0x3c8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	4b19      	ldr	r3, [pc, #100]	; (8006d14 <HAL_TIM_PWM_Start_DMA+0x408>)
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2b06      	cmp	r3, #6
 8006cb8:	d015      	beq.n	8006ce6 <HAL_TIM_PWM_Start_DMA+0x3da>
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cc0:	d011      	beq.n	8006ce6 <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        __HAL_TIM_ENABLE(htim);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f042 0201 	orr.w	r2, r2, #1
 8006cd0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cd2:	e008      	b.n	8006ce6 <HAL_TIM_PWM_Start_DMA+0x3da>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0201 	orr.w	r2, r2, #1
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	e000      	b.n	8006ce8 <HAL_TIM_PWM_Start_DMA+0x3dc>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	08007381 	.word	0x08007381
 8006cf8:	08007429 	.word	0x08007429
 8006cfc:	080072ef 	.word	0x080072ef
 8006d00:	40012c00 	.word	0x40012c00
 8006d04:	40014000 	.word	0x40014000
 8006d08:	40014400 	.word	0x40014400
 8006d0c:	40014800 	.word	0x40014800
 8006d10:	40000400 	.word	0x40000400
 8006d14:	00010007 	.word	0x00010007

08006d18 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	73fb      	strb	r3, [r7, #15]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2b0c      	cmp	r3, #12
 8006d2a:	d855      	bhi.n	8006dd8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006d2c:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d32:	bf00      	nop
 8006d34:	08006d69 	.word	0x08006d69
 8006d38:	08006dd9 	.word	0x08006dd9
 8006d3c:	08006dd9 	.word	0x08006dd9
 8006d40:	08006dd9 	.word	0x08006dd9
 8006d44:	08006d85 	.word	0x08006d85
 8006d48:	08006dd9 	.word	0x08006dd9
 8006d4c:	08006dd9 	.word	0x08006dd9
 8006d50:	08006dd9 	.word	0x08006dd9
 8006d54:	08006da1 	.word	0x08006da1
 8006d58:	08006dd9 	.word	0x08006dd9
 8006d5c:	08006dd9 	.word	0x08006dd9
 8006d60:	08006dd9 	.word	0x08006dd9
 8006d64:	08006dbd 	.word	0x08006dbd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006d76:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fc fbda 	bl	8003536 <HAL_DMA_Abort_IT>
      break;
 8006d82:	e02c      	b.n	8006dde <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d92:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fc fbcc 	bl	8003536 <HAL_DMA_Abort_IT>
      break;
 8006d9e:	e01e      	b.n	8006dde <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fc fbbe 	bl	8003536 <HAL_DMA_Abort_IT>
      break;
 8006dba:	e010      	b.n	8006dde <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68da      	ldr	r2, [r3, #12]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006dca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fc fbb0 	bl	8003536 <HAL_DMA_Abort_IT>
      break;
 8006dd6:	e002      	b.n	8006dde <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	73fb      	strb	r3, [r7, #15]
      break;
 8006ddc:	bf00      	nop
  }

  if (status == HAL_OK)
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d17b      	bne.n	8006edc <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2200      	movs	r2, #0
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 ff07 	bl	8007c00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a3c      	ldr	r2, [pc, #240]	; (8006ee8 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d00e      	beq.n	8006e1a <HAL_TIM_PWM_Stop_DMA+0x102>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a3a      	ldr	r2, [pc, #232]	; (8006eec <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d009      	beq.n	8006e1a <HAL_TIM_PWM_Stop_DMA+0x102>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a39      	ldr	r2, [pc, #228]	; (8006ef0 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d004      	beq.n	8006e1a <HAL_TIM_PWM_Stop_DMA+0x102>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a37      	ldr	r2, [pc, #220]	; (8006ef4 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d101      	bne.n	8006e1e <HAL_TIM_PWM_Stop_DMA+0x106>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <HAL_TIM_PWM_Stop_DMA+0x108>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d017      	beq.n	8006e54 <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6a1a      	ldr	r2, [r3, #32]
 8006e2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e2e:	4013      	ands	r3, r2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10f      	bne.n	8006e54 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6a1a      	ldr	r2, [r3, #32]
 8006e3a:	f240 4344 	movw	r3, #1092	; 0x444
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d107      	bne.n	8006e54 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e52:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6a1a      	ldr	r2, [r3, #32]
 8006e5a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e5e:	4013      	ands	r3, r2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10f      	bne.n	8006e84 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6a1a      	ldr	r2, [r3, #32]
 8006e6a:	f240 4344 	movw	r3, #1092	; 0x444
 8006e6e:	4013      	ands	r3, r2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d107      	bne.n	8006e84 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 0201 	bic.w	r2, r2, #1
 8006e82:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d104      	bne.n	8006e94 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e92:	e023      	b.n	8006edc <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d104      	bne.n	8006ea4 <HAL_TIM_PWM_Stop_DMA+0x18c>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ea2:	e01b      	b.n	8006edc <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b08      	cmp	r3, #8
 8006ea8:	d104      	bne.n	8006eb4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006eb2:	e013      	b.n	8006edc <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b0c      	cmp	r3, #12
 8006eb8:	d104      	bne.n	8006ec4 <HAL_TIM_PWM_Stop_DMA+0x1ac>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ec2:	e00b      	b.n	8006edc <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2b10      	cmp	r3, #16
 8006ec8:	d104      	bne.n	8006ed4 <HAL_TIM_PWM_Stop_DMA+0x1bc>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ed2:	e003      	b.n	8006edc <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	40012c00 	.word	0x40012c00
 8006eec:	40014000 	.word	0x40014000
 8006ef0:	40014400 	.word	0x40014400
 8006ef4:	40014800 	.word	0x40014800

08006ef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d101      	bne.n	8006f16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f12:	2302      	movs	r3, #2
 8006f14:	e0ff      	b.n	8007116 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b14      	cmp	r3, #20
 8006f22:	f200 80f0 	bhi.w	8007106 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006f26:	a201      	add	r2, pc, #4	; (adr r2, 8006f2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2c:	08006f81 	.word	0x08006f81
 8006f30:	08007107 	.word	0x08007107
 8006f34:	08007107 	.word	0x08007107
 8006f38:	08007107 	.word	0x08007107
 8006f3c:	08006fc1 	.word	0x08006fc1
 8006f40:	08007107 	.word	0x08007107
 8006f44:	08007107 	.word	0x08007107
 8006f48:	08007107 	.word	0x08007107
 8006f4c:	08007003 	.word	0x08007003
 8006f50:	08007107 	.word	0x08007107
 8006f54:	08007107 	.word	0x08007107
 8006f58:	08007107 	.word	0x08007107
 8006f5c:	08007043 	.word	0x08007043
 8006f60:	08007107 	.word	0x08007107
 8006f64:	08007107 	.word	0x08007107
 8006f68:	08007107 	.word	0x08007107
 8006f6c:	08007085 	.word	0x08007085
 8006f70:	08007107 	.word	0x08007107
 8006f74:	08007107 	.word	0x08007107
 8006f78:	08007107 	.word	0x08007107
 8006f7c:	080070c5 	.word	0x080070c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68b9      	ldr	r1, [r7, #8]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 fafa 	bl	8007580 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699a      	ldr	r2, [r3, #24]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f042 0208 	orr.w	r2, r2, #8
 8006f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	699a      	ldr	r2, [r3, #24]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0204 	bic.w	r2, r2, #4
 8006faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6999      	ldr	r1, [r3, #24]
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	691a      	ldr	r2, [r3, #16]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	619a      	str	r2, [r3, #24]
      break;
 8006fbe:	e0a5      	b.n	800710c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68b9      	ldr	r1, [r7, #8]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fb60 	bl	800768c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	699a      	ldr	r2, [r3, #24]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6999      	ldr	r1, [r3, #24]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	021a      	lsls	r2, r3, #8
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	619a      	str	r2, [r3, #24]
      break;
 8007000:	e084      	b.n	800710c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68b9      	ldr	r1, [r7, #8]
 8007008:	4618      	mov	r0, r3
 800700a:	f000 fbbf 	bl	800778c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	69da      	ldr	r2, [r3, #28]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f042 0208 	orr.w	r2, r2, #8
 800701c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69da      	ldr	r2, [r3, #28]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0204 	bic.w	r2, r2, #4
 800702c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69d9      	ldr	r1, [r3, #28]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	691a      	ldr	r2, [r3, #16]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	430a      	orrs	r2, r1
 800703e:	61da      	str	r2, [r3, #28]
      break;
 8007040:	e064      	b.n	800710c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68b9      	ldr	r1, [r7, #8]
 8007048:	4618      	mov	r0, r3
 800704a:	f000 fc1d 	bl	8007888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69da      	ldr	r2, [r3, #28]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800705c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	69da      	ldr	r2, [r3, #28]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800706c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69d9      	ldr	r1, [r3, #28]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	021a      	lsls	r2, r3, #8
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	61da      	str	r2, [r3, #28]
      break;
 8007082:	e043      	b.n	800710c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68b9      	ldr	r1, [r7, #8]
 800708a:	4618      	mov	r0, r3
 800708c:	f000 fc60 	bl	8007950 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 0208 	orr.w	r2, r2, #8
 800709e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0204 	bic.w	r2, r2, #4
 80070ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	691a      	ldr	r2, [r3, #16]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80070c2:	e023      	b.n	800710c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68b9      	ldr	r1, [r7, #8]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fc9e 	bl	8007a0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	021a      	lsls	r2, r3, #8
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007104:	e002      	b.n	800710c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	75fb      	strb	r3, [r7, #23]
      break;
 800710a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007114:	7dfb      	ldrb	r3, [r7, #23]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop

08007120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007134:	2b01      	cmp	r3, #1
 8007136:	d101      	bne.n	800713c <HAL_TIM_ConfigClockSource+0x1c>
 8007138:	2302      	movs	r3, #2
 800713a:	e0b6      	b.n	80072aa <HAL_TIM_ConfigClockSource+0x18a>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800715a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800715e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007166:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007178:	d03e      	beq.n	80071f8 <HAL_TIM_ConfigClockSource+0xd8>
 800717a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800717e:	f200 8087 	bhi.w	8007290 <HAL_TIM_ConfigClockSource+0x170>
 8007182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007186:	f000 8086 	beq.w	8007296 <HAL_TIM_ConfigClockSource+0x176>
 800718a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800718e:	d87f      	bhi.n	8007290 <HAL_TIM_ConfigClockSource+0x170>
 8007190:	2b70      	cmp	r3, #112	; 0x70
 8007192:	d01a      	beq.n	80071ca <HAL_TIM_ConfigClockSource+0xaa>
 8007194:	2b70      	cmp	r3, #112	; 0x70
 8007196:	d87b      	bhi.n	8007290 <HAL_TIM_ConfigClockSource+0x170>
 8007198:	2b60      	cmp	r3, #96	; 0x60
 800719a:	d050      	beq.n	800723e <HAL_TIM_ConfigClockSource+0x11e>
 800719c:	2b60      	cmp	r3, #96	; 0x60
 800719e:	d877      	bhi.n	8007290 <HAL_TIM_ConfigClockSource+0x170>
 80071a0:	2b50      	cmp	r3, #80	; 0x50
 80071a2:	d03c      	beq.n	800721e <HAL_TIM_ConfigClockSource+0xfe>
 80071a4:	2b50      	cmp	r3, #80	; 0x50
 80071a6:	d873      	bhi.n	8007290 <HAL_TIM_ConfigClockSource+0x170>
 80071a8:	2b40      	cmp	r3, #64	; 0x40
 80071aa:	d058      	beq.n	800725e <HAL_TIM_ConfigClockSource+0x13e>
 80071ac:	2b40      	cmp	r3, #64	; 0x40
 80071ae:	d86f      	bhi.n	8007290 <HAL_TIM_ConfigClockSource+0x170>
 80071b0:	2b30      	cmp	r3, #48	; 0x30
 80071b2:	d064      	beq.n	800727e <HAL_TIM_ConfigClockSource+0x15e>
 80071b4:	2b30      	cmp	r3, #48	; 0x30
 80071b6:	d86b      	bhi.n	8007290 <HAL_TIM_ConfigClockSource+0x170>
 80071b8:	2b20      	cmp	r3, #32
 80071ba:	d060      	beq.n	800727e <HAL_TIM_ConfigClockSource+0x15e>
 80071bc:	2b20      	cmp	r3, #32
 80071be:	d867      	bhi.n	8007290 <HAL_TIM_ConfigClockSource+0x170>
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d05c      	beq.n	800727e <HAL_TIM_ConfigClockSource+0x15e>
 80071c4:	2b10      	cmp	r3, #16
 80071c6:	d05a      	beq.n	800727e <HAL_TIM_ConfigClockSource+0x15e>
 80071c8:	e062      	b.n	8007290 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6818      	ldr	r0, [r3, #0]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	6899      	ldr	r1, [r3, #8]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	f000 fcf1 	bl	8007bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	609a      	str	r2, [r3, #8]
      break;
 80071f6:	e04f      	b.n	8007298 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6818      	ldr	r0, [r3, #0]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	6899      	ldr	r1, [r3, #8]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f000 fcda 	bl	8007bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689a      	ldr	r2, [r3, #8]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800721a:	609a      	str	r2, [r3, #8]
      break;
 800721c:	e03c      	b.n	8007298 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6818      	ldr	r0, [r3, #0]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	6859      	ldr	r1, [r3, #4]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	461a      	mov	r2, r3
 800722c:	f000 fc4e 	bl	8007acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2150      	movs	r1, #80	; 0x50
 8007236:	4618      	mov	r0, r3
 8007238:	f000 fca7 	bl	8007b8a <TIM_ITRx_SetConfig>
      break;
 800723c:	e02c      	b.n	8007298 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6818      	ldr	r0, [r3, #0]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	6859      	ldr	r1, [r3, #4]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	461a      	mov	r2, r3
 800724c:	f000 fc6d 	bl	8007b2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2160      	movs	r1, #96	; 0x60
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fc97 	bl	8007b8a <TIM_ITRx_SetConfig>
      break;
 800725c:	e01c      	b.n	8007298 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	6859      	ldr	r1, [r3, #4]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	461a      	mov	r2, r3
 800726c:	f000 fc2e 	bl	8007acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2140      	movs	r1, #64	; 0x40
 8007276:	4618      	mov	r0, r3
 8007278:	f000 fc87 	bl	8007b8a <TIM_ITRx_SetConfig>
      break;
 800727c:	e00c      	b.n	8007298 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4619      	mov	r1, r3
 8007288:	4610      	mov	r0, r2
 800728a:	f000 fc7e 	bl	8007b8a <TIM_ITRx_SetConfig>
      break;
 800728e:	e003      	b.n	8007298 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	73fb      	strb	r3, [r7, #15]
      break;
 8007294:	e000      	b.n	8007298 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007296:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b083      	sub	sp, #12
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072ba:	bf00      	nop
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b083      	sub	sp, #12
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80072ce:	bf00      	nop
 80072d0:	370c      	adds	r7, #12
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80072da:	b480      	push	{r7}
 80072dc:	b083      	sub	sp, #12
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80072e2:	bf00      	nop
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	429a      	cmp	r2, r3
 8007304:	d107      	bne.n	8007316 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2201      	movs	r2, #1
 800730a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007314:	e02a      	b.n	800736c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	429a      	cmp	r2, r3
 800731e:	d107      	bne.n	8007330 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2202      	movs	r2, #2
 8007324:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800732e:	e01d      	b.n	800736c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	429a      	cmp	r2, r3
 8007338:	d107      	bne.n	800734a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2204      	movs	r2, #4
 800733e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007348:	e010      	b.n	800736c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	429a      	cmp	r2, r3
 8007352:	d107      	bne.n	8007364 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2208      	movs	r2, #8
 8007358:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007362:	e003      	b.n	800736c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f7ff ffb4 	bl	80072da <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	771a      	strb	r2, [r3, #28]
}
 8007378:	bf00      	nop
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	429a      	cmp	r2, r3
 8007396:	d10b      	bne.n	80073b0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2201      	movs	r2, #1
 800739c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d136      	bne.n	8007414 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073ae:	e031      	b.n	8007414 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d10b      	bne.n	80073d2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2202      	movs	r2, #2
 80073be:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d125      	bne.n	8007414 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073d0:	e020      	b.n	8007414 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d10b      	bne.n	80073f4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2204      	movs	r2, #4
 80073e0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d114      	bne.n	8007414 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073f2:	e00f      	b.n	8007414 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d10a      	bne.n	8007414 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2208      	movs	r2, #8
 8007402:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d103      	bne.n	8007414 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f7ff ff4c 	bl	80072b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	771a      	strb	r2, [r3, #28]
}
 8007420:	bf00      	nop
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007434:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	429a      	cmp	r2, r3
 800743e:	d103      	bne.n	8007448 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2201      	movs	r2, #1
 8007444:	771a      	strb	r2, [r3, #28]
 8007446:	e019      	b.n	800747c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	429a      	cmp	r2, r3
 8007450:	d103      	bne.n	800745a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2202      	movs	r2, #2
 8007456:	771a      	strb	r2, [r3, #28]
 8007458:	e010      	b.n	800747c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	429a      	cmp	r2, r3
 8007462:	d103      	bne.n	800746c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2204      	movs	r2, #4
 8007468:	771a      	strb	r2, [r3, #28]
 800746a:	e007      	b.n	800747c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	429a      	cmp	r2, r3
 8007474:	d102      	bne.n	800747c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2208      	movs	r2, #8
 800747a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f7ff ff22 	bl	80072c6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	771a      	strb	r2, [r3, #28]
}
 8007488:	bf00      	nop
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a32      	ldr	r2, [pc, #200]	; (800756c <TIM_Base_SetConfig+0xdc>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d007      	beq.n	80074b8 <TIM_Base_SetConfig+0x28>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ae:	d003      	beq.n	80074b8 <TIM_Base_SetConfig+0x28>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a2f      	ldr	r2, [pc, #188]	; (8007570 <TIM_Base_SetConfig+0xe0>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d108      	bne.n	80074ca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a27      	ldr	r2, [pc, #156]	; (800756c <TIM_Base_SetConfig+0xdc>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d013      	beq.n	80074fa <TIM_Base_SetConfig+0x6a>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d8:	d00f      	beq.n	80074fa <TIM_Base_SetConfig+0x6a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a24      	ldr	r2, [pc, #144]	; (8007570 <TIM_Base_SetConfig+0xe0>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d00b      	beq.n	80074fa <TIM_Base_SetConfig+0x6a>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a23      	ldr	r2, [pc, #140]	; (8007574 <TIM_Base_SetConfig+0xe4>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d007      	beq.n	80074fa <TIM_Base_SetConfig+0x6a>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a22      	ldr	r2, [pc, #136]	; (8007578 <TIM_Base_SetConfig+0xe8>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d003      	beq.n	80074fa <TIM_Base_SetConfig+0x6a>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a21      	ldr	r2, [pc, #132]	; (800757c <TIM_Base_SetConfig+0xec>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d108      	bne.n	800750c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	4313      	orrs	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a0e      	ldr	r2, [pc, #56]	; (800756c <TIM_Base_SetConfig+0xdc>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00b      	beq.n	8007550 <TIM_Base_SetConfig+0xc0>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a0e      	ldr	r2, [pc, #56]	; (8007574 <TIM_Base_SetConfig+0xe4>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d007      	beq.n	8007550 <TIM_Base_SetConfig+0xc0>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a0d      	ldr	r2, [pc, #52]	; (8007578 <TIM_Base_SetConfig+0xe8>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d003      	beq.n	8007550 <TIM_Base_SetConfig+0xc0>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a0c      	ldr	r2, [pc, #48]	; (800757c <TIM_Base_SetConfig+0xec>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d103      	bne.n	8007558 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	691a      	ldr	r2, [r3, #16]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	615a      	str	r2, [r3, #20]
}
 800755e:	bf00      	nop
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	40012c00 	.word	0x40012c00
 8007570:	40000400 	.word	0x40000400
 8007574:	40014000 	.word	0x40014000
 8007578:	40014400 	.word	0x40014400
 800757c:	40014800 	.word	0x40014800

08007580 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	f023 0201 	bic.w	r2, r3, #1
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f023 0303 	bic.w	r3, r3, #3
 80075ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f023 0302 	bic.w	r3, r3, #2
 80075cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a28      	ldr	r2, [pc, #160]	; (800767c <TIM_OC1_SetConfig+0xfc>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d00b      	beq.n	80075f8 <TIM_OC1_SetConfig+0x78>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a27      	ldr	r2, [pc, #156]	; (8007680 <TIM_OC1_SetConfig+0x100>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d007      	beq.n	80075f8 <TIM_OC1_SetConfig+0x78>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a26      	ldr	r2, [pc, #152]	; (8007684 <TIM_OC1_SetConfig+0x104>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d003      	beq.n	80075f8 <TIM_OC1_SetConfig+0x78>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a25      	ldr	r2, [pc, #148]	; (8007688 <TIM_OC1_SetConfig+0x108>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d10c      	bne.n	8007612 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f023 0308 	bic.w	r3, r3, #8
 80075fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	4313      	orrs	r3, r2
 8007608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f023 0304 	bic.w	r3, r3, #4
 8007610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a19      	ldr	r2, [pc, #100]	; (800767c <TIM_OC1_SetConfig+0xfc>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00b      	beq.n	8007632 <TIM_OC1_SetConfig+0xb2>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a18      	ldr	r2, [pc, #96]	; (8007680 <TIM_OC1_SetConfig+0x100>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d007      	beq.n	8007632 <TIM_OC1_SetConfig+0xb2>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a17      	ldr	r2, [pc, #92]	; (8007684 <TIM_OC1_SetConfig+0x104>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d003      	beq.n	8007632 <TIM_OC1_SetConfig+0xb2>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a16      	ldr	r2, [pc, #88]	; (8007688 <TIM_OC1_SetConfig+0x108>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d111      	bne.n	8007656 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	4313      	orrs	r3, r2
 800764a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	4313      	orrs	r3, r2
 8007654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	621a      	str	r2, [r3, #32]
}
 8007670:	bf00      	nop
 8007672:	371c      	adds	r7, #28
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	40012c00 	.word	0x40012c00
 8007680:	40014000 	.word	0x40014000
 8007684:	40014400 	.word	0x40014400
 8007688:	40014800 	.word	0x40014800

0800768c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	f023 0210 	bic.w	r2, r3, #16
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	021b      	lsls	r3, r3, #8
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f023 0320 	bic.w	r3, r3, #32
 80076da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	011b      	lsls	r3, r3, #4
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a24      	ldr	r2, [pc, #144]	; (800777c <TIM_OC2_SetConfig+0xf0>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d10d      	bne.n	800770c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	011b      	lsls	r3, r3, #4
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	4313      	orrs	r3, r2
 8007702:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800770a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a1b      	ldr	r2, [pc, #108]	; (800777c <TIM_OC2_SetConfig+0xf0>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d00b      	beq.n	800772c <TIM_OC2_SetConfig+0xa0>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a1a      	ldr	r2, [pc, #104]	; (8007780 <TIM_OC2_SetConfig+0xf4>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d007      	beq.n	800772c <TIM_OC2_SetConfig+0xa0>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a19      	ldr	r2, [pc, #100]	; (8007784 <TIM_OC2_SetConfig+0xf8>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d003      	beq.n	800772c <TIM_OC2_SetConfig+0xa0>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a18      	ldr	r2, [pc, #96]	; (8007788 <TIM_OC2_SetConfig+0xfc>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d113      	bne.n	8007754 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007732:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800773a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	4313      	orrs	r3, r2
 8007746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	4313      	orrs	r3, r2
 8007752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	621a      	str	r2, [r3, #32]
}
 800776e:	bf00      	nop
 8007770:	371c      	adds	r7, #28
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	40012c00 	.word	0x40012c00
 8007780:	40014000 	.word	0x40014000
 8007784:	40014400 	.word	0x40014400
 8007788:	40014800 	.word	0x40014800

0800778c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0303 	bic.w	r3, r3, #3
 80077c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	021b      	lsls	r3, r3, #8
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a23      	ldr	r2, [pc, #140]	; (8007878 <TIM_OC3_SetConfig+0xec>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d10d      	bne.n	800780a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	021b      	lsls	r3, r3, #8
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	4313      	orrs	r3, r2
 8007800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007808:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a1a      	ldr	r2, [pc, #104]	; (8007878 <TIM_OC3_SetConfig+0xec>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00b      	beq.n	800782a <TIM_OC3_SetConfig+0x9e>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a19      	ldr	r2, [pc, #100]	; (800787c <TIM_OC3_SetConfig+0xf0>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d007      	beq.n	800782a <TIM_OC3_SetConfig+0x9e>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a18      	ldr	r2, [pc, #96]	; (8007880 <TIM_OC3_SetConfig+0xf4>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d003      	beq.n	800782a <TIM_OC3_SetConfig+0x9e>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a17      	ldr	r2, [pc, #92]	; (8007884 <TIM_OC3_SetConfig+0xf8>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d113      	bne.n	8007852 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	621a      	str	r2, [r3, #32]
}
 800786c:	bf00      	nop
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	40012c00 	.word	0x40012c00
 800787c:	40014000 	.word	0x40014000
 8007880:	40014400 	.word	0x40014400
 8007884:	40014800 	.word	0x40014800

08007888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007888:	b480      	push	{r7}
 800788a:	b087      	sub	sp, #28
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	021b      	lsls	r3, r3, #8
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	031b      	lsls	r3, r3, #12
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a16      	ldr	r2, [pc, #88]	; (8007940 <TIM_OC4_SetConfig+0xb8>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d00b      	beq.n	8007904 <TIM_OC4_SetConfig+0x7c>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a15      	ldr	r2, [pc, #84]	; (8007944 <TIM_OC4_SetConfig+0xbc>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d007      	beq.n	8007904 <TIM_OC4_SetConfig+0x7c>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a14      	ldr	r2, [pc, #80]	; (8007948 <TIM_OC4_SetConfig+0xc0>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d003      	beq.n	8007904 <TIM_OC4_SetConfig+0x7c>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a13      	ldr	r2, [pc, #76]	; (800794c <TIM_OC4_SetConfig+0xc4>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d109      	bne.n	8007918 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800790a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	019b      	lsls	r3, r3, #6
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	4313      	orrs	r3, r2
 8007916:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	693a      	ldr	r2, [r7, #16]
 8007930:	621a      	str	r2, [r3, #32]
}
 8007932:	bf00      	nop
 8007934:	371c      	adds	r7, #28
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	40012c00 	.word	0x40012c00
 8007944:	40014000 	.word	0x40014000
 8007948:	40014400 	.word	0x40014400
 800794c:	40014800 	.word	0x40014800

08007950 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007950:	b480      	push	{r7}
 8007952:	b087      	sub	sp, #28
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800797e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	4313      	orrs	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007994:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	041b      	lsls	r3, r3, #16
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	4313      	orrs	r3, r2
 80079a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a15      	ldr	r2, [pc, #84]	; (80079fc <TIM_OC5_SetConfig+0xac>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d00b      	beq.n	80079c2 <TIM_OC5_SetConfig+0x72>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a14      	ldr	r2, [pc, #80]	; (8007a00 <TIM_OC5_SetConfig+0xb0>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d007      	beq.n	80079c2 <TIM_OC5_SetConfig+0x72>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a13      	ldr	r2, [pc, #76]	; (8007a04 <TIM_OC5_SetConfig+0xb4>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d003      	beq.n	80079c2 <TIM_OC5_SetConfig+0x72>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a12      	ldr	r2, [pc, #72]	; (8007a08 <TIM_OC5_SetConfig+0xb8>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d109      	bne.n	80079d6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	021b      	lsls	r3, r3, #8
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	621a      	str	r2, [r3, #32]
}
 80079f0:	bf00      	nop
 80079f2:	371c      	adds	r7, #28
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	40012c00 	.word	0x40012c00
 8007a00:	40014000 	.word	0x40014000
 8007a04:	40014400 	.word	0x40014400
 8007a08:	40014800 	.word	0x40014800

08007a0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	021b      	lsls	r3, r3, #8
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	051b      	lsls	r3, r3, #20
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a16      	ldr	r2, [pc, #88]	; (8007abc <TIM_OC6_SetConfig+0xb0>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d00b      	beq.n	8007a80 <TIM_OC6_SetConfig+0x74>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a15      	ldr	r2, [pc, #84]	; (8007ac0 <TIM_OC6_SetConfig+0xb4>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d007      	beq.n	8007a80 <TIM_OC6_SetConfig+0x74>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a14      	ldr	r2, [pc, #80]	; (8007ac4 <TIM_OC6_SetConfig+0xb8>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d003      	beq.n	8007a80 <TIM_OC6_SetConfig+0x74>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a13      	ldr	r2, [pc, #76]	; (8007ac8 <TIM_OC6_SetConfig+0xbc>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d109      	bne.n	8007a94 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	695b      	ldr	r3, [r3, #20]
 8007a8c:	029b      	lsls	r3, r3, #10
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	621a      	str	r2, [r3, #32]
}
 8007aae:	bf00      	nop
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	40012c00 	.word	0x40012c00
 8007ac0:	40014000 	.word	0x40014000
 8007ac4:	40014400 	.word	0x40014400
 8007ac8:	40014800 	.word	0x40014800

08007acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	f023 0201 	bic.w	r2, r3, #1
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	011b      	lsls	r3, r3, #4
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f023 030a 	bic.w	r3, r3, #10
 8007b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	621a      	str	r2, [r3, #32]
}
 8007b1e:	bf00      	nop
 8007b20:	371c      	adds	r7, #28
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b087      	sub	sp, #28
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	60b9      	str	r1, [r7, #8]
 8007b34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	f023 0210 	bic.w	r2, r3, #16
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	031b      	lsls	r3, r3, #12
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	621a      	str	r2, [r3, #32]
}
 8007b7e:	bf00      	nop
 8007b80:	371c      	adds	r7, #28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b085      	sub	sp, #20
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	f043 0307 	orr.w	r3, r3, #7
 8007bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	609a      	str	r2, [r3, #8]
}
 8007bb4:	bf00      	nop
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b087      	sub	sp, #28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	021a      	lsls	r2, r3, #8
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	431a      	orrs	r2, r3
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	609a      	str	r2, [r3, #8]
}
 8007bf4:	bf00      	nop
 8007bf6:	371c      	adds	r7, #28
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	f003 031f 	and.w	r3, r3, #31
 8007c12:	2201      	movs	r2, #1
 8007c14:	fa02 f303 	lsl.w	r3, r2, r3
 8007c18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6a1a      	ldr	r2, [r3, #32]
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	43db      	mvns	r3, r3
 8007c22:	401a      	ands	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6a1a      	ldr	r2, [r3, #32]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f003 031f 	and.w	r3, r3, #31
 8007c32:	6879      	ldr	r1, [r7, #4]
 8007c34:	fa01 f303 	lsl.w	r3, r1, r3
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	621a      	str	r2, [r3, #32]
}
 8007c3e:	bf00      	nop
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
	...

08007c4c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d109      	bne.n	8007c70 <HAL_TIMEx_PWMN_Start+0x24>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	bf14      	ite	ne
 8007c68:	2301      	movne	r3, #1
 8007c6a:	2300      	moveq	r3, #0
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	e022      	b.n	8007cb6 <HAL_TIMEx_PWMN_Start+0x6a>
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d109      	bne.n	8007c8a <HAL_TIMEx_PWMN_Start+0x3e>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	bf14      	ite	ne
 8007c82:	2301      	movne	r3, #1
 8007c84:	2300      	moveq	r3, #0
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	e015      	b.n	8007cb6 <HAL_TIMEx_PWMN_Start+0x6a>
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d109      	bne.n	8007ca4 <HAL_TIMEx_PWMN_Start+0x58>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	bf14      	ite	ne
 8007c9c:	2301      	movne	r3, #1
 8007c9e:	2300      	moveq	r3, #0
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	e008      	b.n	8007cb6 <HAL_TIMEx_PWMN_Start+0x6a>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	bf14      	ite	ne
 8007cb0:	2301      	movne	r3, #1
 8007cb2:	2300      	moveq	r3, #0
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e05f      	b.n	8007d7e <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d104      	bne.n	8007cce <HAL_TIMEx_PWMN_Start+0x82>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ccc:	e013      	b.n	8007cf6 <HAL_TIMEx_PWMN_Start+0xaa>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b04      	cmp	r3, #4
 8007cd2:	d104      	bne.n	8007cde <HAL_TIMEx_PWMN_Start+0x92>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cdc:	e00b      	b.n	8007cf6 <HAL_TIMEx_PWMN_Start+0xaa>
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b08      	cmp	r3, #8
 8007ce2:	d104      	bne.n	8007cee <HAL_TIMEx_PWMN_Start+0xa2>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007cec:	e003      	b.n	8007cf6 <HAL_TIMEx_PWMN_Start+0xaa>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2204      	movs	r2, #4
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 f98e 	bl	8008020 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a1b      	ldr	r2, [pc, #108]	; (8007d88 <HAL_TIMEx_PWMN_Start+0x13c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d00e      	beq.n	8007d3c <HAL_TIMEx_PWMN_Start+0xf0>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d26:	d009      	beq.n	8007d3c <HAL_TIMEx_PWMN_Start+0xf0>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a17      	ldr	r2, [pc, #92]	; (8007d8c <HAL_TIMEx_PWMN_Start+0x140>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d004      	beq.n	8007d3c <HAL_TIMEx_PWMN_Start+0xf0>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a16      	ldr	r2, [pc, #88]	; (8007d90 <HAL_TIMEx_PWMN_Start+0x144>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d115      	bne.n	8007d68 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689a      	ldr	r2, [r3, #8]
 8007d42:	4b14      	ldr	r3, [pc, #80]	; (8007d94 <HAL_TIMEx_PWMN_Start+0x148>)
 8007d44:	4013      	ands	r3, r2
 8007d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b06      	cmp	r3, #6
 8007d4c:	d015      	beq.n	8007d7a <HAL_TIMEx_PWMN_Start+0x12e>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d54:	d011      	beq.n	8007d7a <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f042 0201 	orr.w	r2, r2, #1
 8007d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d66:	e008      	b.n	8007d7a <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0201 	orr.w	r2, r2, #1
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	e000      	b.n	8007d7c <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	40012c00 	.word	0x40012c00
 8007d8c:	40000400 	.word	0x40000400
 8007d90:	40014000 	.word	0x40014000
 8007d94:	00010007 	.word	0x00010007

08007d98 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2200      	movs	r2, #0
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f938 	bl	8008020 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6a1a      	ldr	r2, [r3, #32]
 8007db6:	f241 1311 	movw	r3, #4369	; 0x1111
 8007dba:	4013      	ands	r3, r2
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10f      	bne.n	8007de0 <HAL_TIMEx_PWMN_Stop+0x48>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6a1a      	ldr	r2, [r3, #32]
 8007dc6:	f240 4344 	movw	r3, #1092	; 0x444
 8007dca:	4013      	ands	r3, r2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d107      	bne.n	8007de0 <HAL_TIMEx_PWMN_Stop+0x48>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007dde:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6a1a      	ldr	r2, [r3, #32]
 8007de6:	f241 1311 	movw	r3, #4369	; 0x1111
 8007dea:	4013      	ands	r3, r2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10f      	bne.n	8007e10 <HAL_TIMEx_PWMN_Stop+0x78>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6a1a      	ldr	r2, [r3, #32]
 8007df6:	f240 4344 	movw	r3, #1092	; 0x444
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d107      	bne.n	8007e10 <HAL_TIMEx_PWMN_Stop+0x78>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 0201 	bic.w	r2, r2, #1
 8007e0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d104      	bne.n	8007e20 <HAL_TIMEx_PWMN_Stop+0x88>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e1e:	e013      	b.n	8007e48 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2b04      	cmp	r3, #4
 8007e24:	d104      	bne.n	8007e30 <HAL_TIMEx_PWMN_Stop+0x98>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e2e:	e00b      	b.n	8007e48 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b08      	cmp	r3, #8
 8007e34:	d104      	bne.n	8007e40 <HAL_TIMEx_PWMN_Stop+0xa8>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e3e:	e003      	b.n	8007e48 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
	...

08007e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d101      	bne.n	8007e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e68:	2302      	movs	r3, #2
 8007e6a:	e054      	b.n	8007f16 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2202      	movs	r2, #2
 8007e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a24      	ldr	r2, [pc, #144]	; (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d108      	bne.n	8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007e9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a17      	ldr	r2, [pc, #92]	; (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d00e      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ed4:	d009      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a13      	ldr	r2, [pc, #76]	; (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d004      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a11      	ldr	r2, [pc, #68]	; (8007f2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d10c      	bne.n	8007f04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	40012c00 	.word	0x40012c00
 8007f28:	40000400 	.word	0x40000400
 8007f2c:	40014000 	.word	0x40014000

08007f30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d101      	bne.n	8007f4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f48:	2302      	movs	r3, #2
 8007f4a:	e060      	b.n	800800e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	695b      	ldr	r3, [r3, #20]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	041b      	lsls	r3, r3, #16
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a14      	ldr	r2, [pc, #80]	; (800801c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d115      	bne.n	8007ffc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fda:	051b      	lsls	r3, r3, #20
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	6a1b      	ldr	r3, [r3, #32]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	40012c00 	.word	0x40012c00

08008020 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f003 031f 	and.w	r3, r3, #31
 8008032:	2204      	movs	r2, #4
 8008034:	fa02 f303 	lsl.w	r3, r2, r3
 8008038:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6a1a      	ldr	r2, [r3, #32]
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	43db      	mvns	r3, r3
 8008042:	401a      	ands	r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6a1a      	ldr	r2, [r3, #32]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	f003 031f 	and.w	r3, r3, #31
 8008052:	6879      	ldr	r1, [r7, #4]
 8008054:	fa01 f303 	lsl.w	r3, r1, r3
 8008058:	431a      	orrs	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	621a      	str	r2, [r3, #32]
}
 800805e:	bf00      	nop
 8008060:	371c      	adds	r7, #28
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr

0800806a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b082      	sub	sp, #8
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e040      	b.n	80080fe <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008080:	2b00      	cmp	r3, #0
 8008082:	d106      	bne.n	8008092 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7f9 ffe1 	bl	8002054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2224      	movs	r2, #36	; 0x24
 8008096:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f022 0201 	bic.w	r2, r2, #1
 80080a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f8c1 	bl	8008230 <UART_SetConfig>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d101      	bne.n	80080b8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e022      	b.n	80080fe <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f9eb 	bl	800849c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	689a      	ldr	r2, [r3, #8]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f042 0201 	orr.w	r2, r2, #1
 80080f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fa72 	bl	80085e0 <UART_CheckIdleState>
 80080fc:	4603      	mov	r3, r0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b08a      	sub	sp, #40	; 0x28
 800810a:	af02      	add	r7, sp, #8
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	60b9      	str	r1, [r7, #8]
 8008110:	603b      	str	r3, [r7, #0]
 8008112:	4613      	mov	r3, r2
 8008114:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800811a:	2b20      	cmp	r3, #32
 800811c:	f040 8082 	bne.w	8008224 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <HAL_UART_Transmit+0x26>
 8008126:	88fb      	ldrh	r3, [r7, #6]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e07a      	b.n	8008226 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008136:	2b01      	cmp	r3, #1
 8008138:	d101      	bne.n	800813e <HAL_UART_Transmit+0x38>
 800813a:	2302      	movs	r3, #2
 800813c:	e073      	b.n	8008226 <HAL_UART_Transmit+0x120>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2221      	movs	r2, #33	; 0x21
 8008152:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008154:	f7fa f8d0 	bl	80022f8 <HAL_GetTick>
 8008158:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	88fa      	ldrh	r2, [r7, #6]
 800815e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	88fa      	ldrh	r2, [r7, #6]
 8008166:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008172:	d108      	bne.n	8008186 <HAL_UART_Transmit+0x80>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d104      	bne.n	8008186 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800817c:	2300      	movs	r3, #0
 800817e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	61bb      	str	r3, [r7, #24]
 8008184:	e003      	b.n	800818e <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800818a:	2300      	movs	r3, #0
 800818c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008196:	e02d      	b.n	80081f4 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2200      	movs	r2, #0
 80081a0:	2180      	movs	r1, #128	; 0x80
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 fa65 	bl	8008672 <UART_WaitOnFlagUntilTimeout>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e039      	b.n	8008226 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10b      	bne.n	80081d0 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	881a      	ldrh	r2, [r3, #0]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081c4:	b292      	uxth	r2, r2
 80081c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	3302      	adds	r3, #2
 80081cc:	61bb      	str	r3, [r7, #24]
 80081ce:	e008      	b.n	80081e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	781a      	ldrb	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	b292      	uxth	r2, r2
 80081da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	3301      	adds	r3, #1
 80081e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	3b01      	subs	r3, #1
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1cb      	bne.n	8008198 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	2200      	movs	r2, #0
 8008208:	2140      	movs	r1, #64	; 0x40
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 fa31 	bl	8008672 <UART_WaitOnFlagUntilTimeout>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e005      	b.n	8008226 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2220      	movs	r2, #32
 800821e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	e000      	b.n	8008226 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008224:	2302      	movs	r3, #2
  }
}
 8008226:	4618      	mov	r0, r3
 8008228:	3720      	adds	r7, #32
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
	...

08008230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b088      	sub	sp, #32
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	431a      	orrs	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	431a      	orrs	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	4313      	orrs	r3, r2
 8008252:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	4b8a      	ldr	r3, [pc, #552]	; (8008484 <UART_SetConfig+0x254>)
 800825c:	4013      	ands	r3, r2
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	6812      	ldr	r2, [r2, #0]
 8008262:	6979      	ldr	r1, [r7, #20]
 8008264:	430b      	orrs	r3, r1
 8008266:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68da      	ldr	r2, [r3, #12]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a1b      	ldr	r3, [r3, #32]
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	4313      	orrs	r3, r2
 800828c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	430a      	orrs	r2, r1
 80082a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a78      	ldr	r2, [pc, #480]	; (8008488 <UART_SetConfig+0x258>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d120      	bne.n	80082ee <UART_SetConfig+0xbe>
 80082ac:	4b77      	ldr	r3, [pc, #476]	; (800848c <UART_SetConfig+0x25c>)
 80082ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b0:	f003 0303 	and.w	r3, r3, #3
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d817      	bhi.n	80082e8 <UART_SetConfig+0xb8>
 80082b8:	a201      	add	r2, pc, #4	; (adr r2, 80082c0 <UART_SetConfig+0x90>)
 80082ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082be:	bf00      	nop
 80082c0:	080082d1 	.word	0x080082d1
 80082c4:	080082dd 	.word	0x080082dd
 80082c8:	080082e3 	.word	0x080082e3
 80082cc:	080082d7 	.word	0x080082d7
 80082d0:	2300      	movs	r3, #0
 80082d2:	77fb      	strb	r3, [r7, #31]
 80082d4:	e01d      	b.n	8008312 <UART_SetConfig+0xe2>
 80082d6:	2302      	movs	r3, #2
 80082d8:	77fb      	strb	r3, [r7, #31]
 80082da:	e01a      	b.n	8008312 <UART_SetConfig+0xe2>
 80082dc:	2304      	movs	r3, #4
 80082de:	77fb      	strb	r3, [r7, #31]
 80082e0:	e017      	b.n	8008312 <UART_SetConfig+0xe2>
 80082e2:	2308      	movs	r3, #8
 80082e4:	77fb      	strb	r3, [r7, #31]
 80082e6:	e014      	b.n	8008312 <UART_SetConfig+0xe2>
 80082e8:	2310      	movs	r3, #16
 80082ea:	77fb      	strb	r3, [r7, #31]
 80082ec:	e011      	b.n	8008312 <UART_SetConfig+0xe2>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a67      	ldr	r2, [pc, #412]	; (8008490 <UART_SetConfig+0x260>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d102      	bne.n	80082fe <UART_SetConfig+0xce>
 80082f8:	2300      	movs	r3, #0
 80082fa:	77fb      	strb	r3, [r7, #31]
 80082fc:	e009      	b.n	8008312 <UART_SetConfig+0xe2>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a64      	ldr	r2, [pc, #400]	; (8008494 <UART_SetConfig+0x264>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d102      	bne.n	800830e <UART_SetConfig+0xde>
 8008308:	2300      	movs	r3, #0
 800830a:	77fb      	strb	r3, [r7, #31]
 800830c:	e001      	b.n	8008312 <UART_SetConfig+0xe2>
 800830e:	2310      	movs	r3, #16
 8008310:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	69db      	ldr	r3, [r3, #28]
 8008316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800831a:	d15b      	bne.n	80083d4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800831c:	7ffb      	ldrb	r3, [r7, #31]
 800831e:	2b08      	cmp	r3, #8
 8008320:	d827      	bhi.n	8008372 <UART_SetConfig+0x142>
 8008322:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <UART_SetConfig+0xf8>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	0800834d 	.word	0x0800834d
 800832c:	08008355 	.word	0x08008355
 8008330:	0800835d 	.word	0x0800835d
 8008334:	08008373 	.word	0x08008373
 8008338:	08008363 	.word	0x08008363
 800833c:	08008373 	.word	0x08008373
 8008340:	08008373 	.word	0x08008373
 8008344:	08008373 	.word	0x08008373
 8008348:	0800836b 	.word	0x0800836b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800834c:	f7fe f890 	bl	8006470 <HAL_RCC_GetPCLK1Freq>
 8008350:	61b8      	str	r0, [r7, #24]
        break;
 8008352:	e013      	b.n	800837c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008354:	f7fe f8ae 	bl	80064b4 <HAL_RCC_GetPCLK2Freq>
 8008358:	61b8      	str	r0, [r7, #24]
        break;
 800835a:	e00f      	b.n	800837c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800835c:	4b4e      	ldr	r3, [pc, #312]	; (8008498 <UART_SetConfig+0x268>)
 800835e:	61bb      	str	r3, [r7, #24]
        break;
 8008360:	e00c      	b.n	800837c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008362:	f7fe f80f 	bl	8006384 <HAL_RCC_GetSysClockFreq>
 8008366:	61b8      	str	r0, [r7, #24]
        break;
 8008368:	e008      	b.n	800837c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800836a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800836e:	61bb      	str	r3, [r7, #24]
        break;
 8008370:	e004      	b.n	800837c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8008372:	2300      	movs	r3, #0
 8008374:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	77bb      	strb	r3, [r7, #30]
        break;
 800837a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d074      	beq.n	800846c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	005a      	lsls	r2, r3, #1
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	085b      	lsrs	r3, r3, #1
 800838c:	441a      	add	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	fbb2 f3f3 	udiv	r3, r2, r3
 8008396:	b29b      	uxth	r3, r3
 8008398:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	2b0f      	cmp	r3, #15
 800839e:	d916      	bls.n	80083ce <UART_SetConfig+0x19e>
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083a6:	d212      	bcs.n	80083ce <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	f023 030f 	bic.w	r3, r3, #15
 80083b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	085b      	lsrs	r3, r3, #1
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	f003 0307 	and.w	r3, r3, #7
 80083bc:	b29a      	uxth	r2, r3
 80083be:	89fb      	ldrh	r3, [r7, #14]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	89fa      	ldrh	r2, [r7, #14]
 80083ca:	60da      	str	r2, [r3, #12]
 80083cc:	e04e      	b.n	800846c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	77bb      	strb	r3, [r7, #30]
 80083d2:	e04b      	b.n	800846c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083d4:	7ffb      	ldrb	r3, [r7, #31]
 80083d6:	2b08      	cmp	r3, #8
 80083d8:	d827      	bhi.n	800842a <UART_SetConfig+0x1fa>
 80083da:	a201      	add	r2, pc, #4	; (adr r2, 80083e0 <UART_SetConfig+0x1b0>)
 80083dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e0:	08008405 	.word	0x08008405
 80083e4:	0800840d 	.word	0x0800840d
 80083e8:	08008415 	.word	0x08008415
 80083ec:	0800842b 	.word	0x0800842b
 80083f0:	0800841b 	.word	0x0800841b
 80083f4:	0800842b 	.word	0x0800842b
 80083f8:	0800842b 	.word	0x0800842b
 80083fc:	0800842b 	.word	0x0800842b
 8008400:	08008423 	.word	0x08008423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008404:	f7fe f834 	bl	8006470 <HAL_RCC_GetPCLK1Freq>
 8008408:	61b8      	str	r0, [r7, #24]
        break;
 800840a:	e013      	b.n	8008434 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800840c:	f7fe f852 	bl	80064b4 <HAL_RCC_GetPCLK2Freq>
 8008410:	61b8      	str	r0, [r7, #24]
        break;
 8008412:	e00f      	b.n	8008434 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008414:	4b20      	ldr	r3, [pc, #128]	; (8008498 <UART_SetConfig+0x268>)
 8008416:	61bb      	str	r3, [r7, #24]
        break;
 8008418:	e00c      	b.n	8008434 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800841a:	f7fd ffb3 	bl	8006384 <HAL_RCC_GetSysClockFreq>
 800841e:	61b8      	str	r0, [r7, #24]
        break;
 8008420:	e008      	b.n	8008434 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008426:	61bb      	str	r3, [r7, #24]
        break;
 8008428:	e004      	b.n	8008434 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	77bb      	strb	r3, [r7, #30]
        break;
 8008432:	bf00      	nop
    }

    if (pclk != 0U)
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d018      	beq.n	800846c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	085a      	lsrs	r2, r3, #1
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	441a      	add	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	fbb2 f3f3 	udiv	r3, r2, r3
 800844c:	b29b      	uxth	r3, r3
 800844e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	2b0f      	cmp	r3, #15
 8008454:	d908      	bls.n	8008468 <UART_SetConfig+0x238>
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800845c:	d204      	bcs.n	8008468 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	60da      	str	r2, [r3, #12]
 8008466:	e001      	b.n	800846c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008478:	7fbb      	ldrb	r3, [r7, #30]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3720      	adds	r7, #32
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	efff69f3 	.word	0xefff69f3
 8008488:	40013800 	.word	0x40013800
 800848c:	40021000 	.word	0x40021000
 8008490:	40004400 	.word	0x40004400
 8008494:	40004800 	.word	0x40004800
 8008498:	007a1200 	.word	0x007a1200

0800849c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00a      	beq.n	80084c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00a      	beq.n	80084e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	430a      	orrs	r2, r1
 80084e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ec:	f003 0304 	and.w	r3, r3, #4
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00a      	beq.n	800850a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	430a      	orrs	r2, r1
 8008508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850e:	f003 0308 	and.w	r3, r3, #8
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00a      	beq.n	800852c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	430a      	orrs	r2, r1
 800852a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008530:	f003 0310 	and.w	r3, r3, #16
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00a      	beq.n	800854e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	430a      	orrs	r2, r1
 800854c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008552:	f003 0320 	and.w	r3, r3, #32
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	430a      	orrs	r2, r1
 800856e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008578:	2b00      	cmp	r3, #0
 800857a:	d01a      	beq.n	80085b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800859a:	d10a      	bne.n	80085b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	605a      	str	r2, [r3, #4]
  }
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af02      	add	r7, sp, #8
 80085e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085f0:	f7f9 fe82 	bl	80022f8 <HAL_GetTick>
 80085f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0308 	and.w	r3, r3, #8
 8008600:	2b08      	cmp	r3, #8
 8008602:	d10e      	bne.n	8008622 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f82d 	bl	8008672 <UART_WaitOnFlagUntilTimeout>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e023      	b.n	800866a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0304 	and.w	r3, r3, #4
 800862c:	2b04      	cmp	r3, #4
 800862e:	d10e      	bne.n	800864e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008630:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2200      	movs	r2, #0
 800863a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f817 	bl	8008672 <UART_WaitOnFlagUntilTimeout>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e00d      	b.n	800866a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2220      	movs	r2, #32
 8008652:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2220      	movs	r2, #32
 8008658:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b09c      	sub	sp, #112	; 0x70
 8008676:	af00      	add	r7, sp, #0
 8008678:	60f8      	str	r0, [r7, #12]
 800867a:	60b9      	str	r1, [r7, #8]
 800867c:	603b      	str	r3, [r7, #0]
 800867e:	4613      	mov	r3, r2
 8008680:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008682:	e0a5      	b.n	80087d0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868a:	f000 80a1 	beq.w	80087d0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800868e:	f7f9 fe33 	bl	80022f8 <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800869a:	429a      	cmp	r2, r3
 800869c:	d302      	bcc.n	80086a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800869e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d13e      	bne.n	8008722 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ac:	e853 3f00 	ldrex	r3, [r3]
 80086b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086b8:	667b      	str	r3, [r7, #100]	; 0x64
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80086ca:	e841 2300 	strex	r3, r2, [r1]
 80086ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80086d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1e6      	bne.n	80086a4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3308      	adds	r3, #8
 80086dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e0:	e853 3f00 	ldrex	r3, [r3]
 80086e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e8:	f023 0301 	bic.w	r3, r3, #1
 80086ec:	663b      	str	r3, [r7, #96]	; 0x60
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3308      	adds	r3, #8
 80086f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80086f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086fe:	e841 2300 	strex	r3, r2, [r1]
 8008702:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1e5      	bne.n	80086d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2220      	movs	r2, #32
 800870e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2220      	movs	r2, #32
 8008714:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e067      	b.n	80087f2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0304 	and.w	r3, r3, #4
 800872c:	2b00      	cmp	r3, #0
 800872e:	d04f      	beq.n	80087d0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800873a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800873e:	d147      	bne.n	80087d0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008748:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008752:	e853 3f00 	ldrex	r3, [r3]
 8008756:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800875e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	461a      	mov	r2, r3
 8008766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008768:	637b      	str	r3, [r7, #52]	; 0x34
 800876a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800876e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008770:	e841 2300 	strex	r3, r2, [r1]
 8008774:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1e6      	bne.n	800874a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3308      	adds	r3, #8
 8008782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	e853 3f00 	ldrex	r3, [r3]
 800878a:	613b      	str	r3, [r7, #16]
   return(result);
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	f023 0301 	bic.w	r3, r3, #1
 8008792:	66bb      	str	r3, [r7, #104]	; 0x68
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	3308      	adds	r3, #8
 800879a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800879c:	623a      	str	r2, [r7, #32]
 800879e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a0:	69f9      	ldr	r1, [r7, #28]
 80087a2:	6a3a      	ldr	r2, [r7, #32]
 80087a4:	e841 2300 	strex	r3, r2, [r1]
 80087a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1e5      	bne.n	800877c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2220      	movs	r2, #32
 80087b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2220      	movs	r2, #32
 80087ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2220      	movs	r2, #32
 80087c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e010      	b.n	80087f2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	69da      	ldr	r2, [r3, #28]
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	4013      	ands	r3, r2
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	429a      	cmp	r2, r3
 80087de:	bf0c      	ite	eq
 80087e0:	2301      	moveq	r3, #1
 80087e2:	2300      	movne	r3, #0
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	461a      	mov	r2, r3
 80087e8:	79fb      	ldrb	r3, [r7, #7]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	f43f af4a 	beq.w	8008684 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3770      	adds	r7, #112	; 0x70
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <__errno>:
 80087fc:	4b01      	ldr	r3, [pc, #4]	; (8008804 <__errno+0x8>)
 80087fe:	6818      	ldr	r0, [r3, #0]
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	200000a0 	.word	0x200000a0

08008808 <__libc_init_array>:
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	4d0d      	ldr	r5, [pc, #52]	; (8008840 <__libc_init_array+0x38>)
 800880c:	4c0d      	ldr	r4, [pc, #52]	; (8008844 <__libc_init_array+0x3c>)
 800880e:	1b64      	subs	r4, r4, r5
 8008810:	10a4      	asrs	r4, r4, #2
 8008812:	2600      	movs	r6, #0
 8008814:	42a6      	cmp	r6, r4
 8008816:	d109      	bne.n	800882c <__libc_init_array+0x24>
 8008818:	4d0b      	ldr	r5, [pc, #44]	; (8008848 <__libc_init_array+0x40>)
 800881a:	4c0c      	ldr	r4, [pc, #48]	; (800884c <__libc_init_array+0x44>)
 800881c:	f001 f9a6 	bl	8009b6c <_init>
 8008820:	1b64      	subs	r4, r4, r5
 8008822:	10a4      	asrs	r4, r4, #2
 8008824:	2600      	movs	r6, #0
 8008826:	42a6      	cmp	r6, r4
 8008828:	d105      	bne.n	8008836 <__libc_init_array+0x2e>
 800882a:	bd70      	pop	{r4, r5, r6, pc}
 800882c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008830:	4798      	blx	r3
 8008832:	3601      	adds	r6, #1
 8008834:	e7ee      	b.n	8008814 <__libc_init_array+0xc>
 8008836:	f855 3b04 	ldr.w	r3, [r5], #4
 800883a:	4798      	blx	r3
 800883c:	3601      	adds	r6, #1
 800883e:	e7f2      	b.n	8008826 <__libc_init_array+0x1e>
 8008840:	08009de0 	.word	0x08009de0
 8008844:	08009de0 	.word	0x08009de0
 8008848:	08009de0 	.word	0x08009de0
 800884c:	08009de4 	.word	0x08009de4

08008850 <memset>:
 8008850:	4402      	add	r2, r0
 8008852:	4603      	mov	r3, r0
 8008854:	4293      	cmp	r3, r2
 8008856:	d100      	bne.n	800885a <memset+0xa>
 8008858:	4770      	bx	lr
 800885a:	f803 1b01 	strb.w	r1, [r3], #1
 800885e:	e7f9      	b.n	8008854 <memset+0x4>

08008860 <sin>:
 8008860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008862:	ec53 2b10 	vmov	r2, r3, d0
 8008866:	4826      	ldr	r0, [pc, #152]	; (8008900 <sin+0xa0>)
 8008868:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800886c:	4281      	cmp	r1, r0
 800886e:	dc07      	bgt.n	8008880 <sin+0x20>
 8008870:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80088f8 <sin+0x98>
 8008874:	2000      	movs	r0, #0
 8008876:	f000 ffab 	bl	80097d0 <__kernel_sin>
 800887a:	ec51 0b10 	vmov	r0, r1, d0
 800887e:	e007      	b.n	8008890 <sin+0x30>
 8008880:	4820      	ldr	r0, [pc, #128]	; (8008904 <sin+0xa4>)
 8008882:	4281      	cmp	r1, r0
 8008884:	dd09      	ble.n	800889a <sin+0x3a>
 8008886:	ee10 0a10 	vmov	r0, s0
 800888a:	4619      	mov	r1, r3
 800888c:	f7f7 fca8 	bl	80001e0 <__aeabi_dsub>
 8008890:	ec41 0b10 	vmov	d0, r0, r1
 8008894:	b005      	add	sp, #20
 8008896:	f85d fb04 	ldr.w	pc, [sp], #4
 800889a:	4668      	mov	r0, sp
 800889c:	f000 f984 	bl	8008ba8 <__ieee754_rem_pio2>
 80088a0:	f000 0003 	and.w	r0, r0, #3
 80088a4:	2801      	cmp	r0, #1
 80088a6:	d008      	beq.n	80088ba <sin+0x5a>
 80088a8:	2802      	cmp	r0, #2
 80088aa:	d00d      	beq.n	80088c8 <sin+0x68>
 80088ac:	b9d0      	cbnz	r0, 80088e4 <sin+0x84>
 80088ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80088b2:	ed9d 0b00 	vldr	d0, [sp]
 80088b6:	2001      	movs	r0, #1
 80088b8:	e7dd      	b.n	8008876 <sin+0x16>
 80088ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 80088be:	ed9d 0b00 	vldr	d0, [sp]
 80088c2:	f000 fb7d 	bl	8008fc0 <__kernel_cos>
 80088c6:	e7d8      	b.n	800887a <sin+0x1a>
 80088c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80088cc:	ed9d 0b00 	vldr	d0, [sp]
 80088d0:	2001      	movs	r0, #1
 80088d2:	f000 ff7d 	bl	80097d0 <__kernel_sin>
 80088d6:	ec53 2b10 	vmov	r2, r3, d0
 80088da:	ee10 0a10 	vmov	r0, s0
 80088de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80088e2:	e7d5      	b.n	8008890 <sin+0x30>
 80088e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80088e8:	ed9d 0b00 	vldr	d0, [sp]
 80088ec:	f000 fb68 	bl	8008fc0 <__kernel_cos>
 80088f0:	e7f1      	b.n	80088d6 <sin+0x76>
 80088f2:	bf00      	nop
 80088f4:	f3af 8000 	nop.w
	...
 8008900:	3fe921fb 	.word	0x3fe921fb
 8008904:	7fefffff 	.word	0x7fefffff

08008908 <fmod>:
 8008908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890a:	ed2d 8b02 	vpush	{d8}
 800890e:	ec57 6b10 	vmov	r6, r7, d0
 8008912:	ec55 4b11 	vmov	r4, r5, d1
 8008916:	f000 f833 	bl	8008980 <__ieee754_fmod>
 800891a:	4b18      	ldr	r3, [pc, #96]	; (800897c <fmod+0x74>)
 800891c:	eeb0 8a40 	vmov.f32	s16, s0
 8008920:	eef0 8a60 	vmov.f32	s17, s1
 8008924:	f993 3000 	ldrsb.w	r3, [r3]
 8008928:	3301      	adds	r3, #1
 800892a:	d020      	beq.n	800896e <fmod+0x66>
 800892c:	4622      	mov	r2, r4
 800892e:	462b      	mov	r3, r5
 8008930:	4620      	mov	r0, r4
 8008932:	4629      	mov	r1, r5
 8008934:	f7f8 f8a6 	bl	8000a84 <__aeabi_dcmpun>
 8008938:	b9c8      	cbnz	r0, 800896e <fmod+0x66>
 800893a:	4632      	mov	r2, r6
 800893c:	463b      	mov	r3, r7
 800893e:	4630      	mov	r0, r6
 8008940:	4639      	mov	r1, r7
 8008942:	f7f8 f89f 	bl	8000a84 <__aeabi_dcmpun>
 8008946:	b990      	cbnz	r0, 800896e <fmod+0x66>
 8008948:	2200      	movs	r2, #0
 800894a:	2300      	movs	r3, #0
 800894c:	4620      	mov	r0, r4
 800894e:	4629      	mov	r1, r5
 8008950:	f7f8 f866 	bl	8000a20 <__aeabi_dcmpeq>
 8008954:	b158      	cbz	r0, 800896e <fmod+0x66>
 8008956:	f7ff ff51 	bl	80087fc <__errno>
 800895a:	2321      	movs	r3, #33	; 0x21
 800895c:	6003      	str	r3, [r0, #0]
 800895e:	2200      	movs	r2, #0
 8008960:	2300      	movs	r3, #0
 8008962:	4610      	mov	r0, r2
 8008964:	4619      	mov	r1, r3
 8008966:	f7f7 ff1d 	bl	80007a4 <__aeabi_ddiv>
 800896a:	ec41 0b18 	vmov	d8, r0, r1
 800896e:	eeb0 0a48 	vmov.f32	s0, s16
 8008972:	eef0 0a68 	vmov.f32	s1, s17
 8008976:	ecbd 8b02 	vpop	{d8}
 800897a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800897c:	20000104 	.word	0x20000104

08008980 <__ieee754_fmod>:
 8008980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	ec53 2b11 	vmov	r2, r3, d1
 8008988:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800898c:	ea5e 0402 	orrs.w	r4, lr, r2
 8008990:	ec51 0b10 	vmov	r0, r1, d0
 8008994:	ee11 7a10 	vmov	r7, s2
 8008998:	ee11 ca10 	vmov	ip, s2
 800899c:	461e      	mov	r6, r3
 800899e:	d00d      	beq.n	80089bc <__ieee754_fmod+0x3c>
 80089a0:	4c7a      	ldr	r4, [pc, #488]	; (8008b8c <__ieee754_fmod+0x20c>)
 80089a2:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80089a6:	45a0      	cmp	r8, r4
 80089a8:	4689      	mov	r9, r1
 80089aa:	dc07      	bgt.n	80089bc <__ieee754_fmod+0x3c>
 80089ac:	4254      	negs	r4, r2
 80089ae:	4d78      	ldr	r5, [pc, #480]	; (8008b90 <__ieee754_fmod+0x210>)
 80089b0:	4314      	orrs	r4, r2
 80089b2:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 80089b6:	42ac      	cmp	r4, r5
 80089b8:	46ab      	mov	fp, r5
 80089ba:	d909      	bls.n	80089d0 <__ieee754_fmod+0x50>
 80089bc:	f7f7 fdc8 	bl	8000550 <__aeabi_dmul>
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	f7f7 feee 	bl	80007a4 <__aeabi_ddiv>
 80089c8:	ec41 0b10 	vmov	d0, r0, r1
 80089cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d0:	45f0      	cmp	r8, lr
 80089d2:	ee10 aa10 	vmov	sl, s0
 80089d6:	ee10 4a10 	vmov	r4, s0
 80089da:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80089de:	dc0a      	bgt.n	80089f6 <__ieee754_fmod+0x76>
 80089e0:	dbf2      	blt.n	80089c8 <__ieee754_fmod+0x48>
 80089e2:	4290      	cmp	r0, r2
 80089e4:	d3f0      	bcc.n	80089c8 <__ieee754_fmod+0x48>
 80089e6:	d106      	bne.n	80089f6 <__ieee754_fmod+0x76>
 80089e8:	4a6a      	ldr	r2, [pc, #424]	; (8008b94 <__ieee754_fmod+0x214>)
 80089ea:	0fed      	lsrs	r5, r5, #31
 80089ec:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80089f0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80089f4:	e7e8      	b.n	80089c8 <__ieee754_fmod+0x48>
 80089f6:	ea19 0f0b 	tst.w	r9, fp
 80089fa:	d14a      	bne.n	8008a92 <__ieee754_fmod+0x112>
 80089fc:	f1b8 0f00 	cmp.w	r8, #0
 8008a00:	d13f      	bne.n	8008a82 <__ieee754_fmod+0x102>
 8008a02:	4965      	ldr	r1, [pc, #404]	; (8008b98 <__ieee754_fmod+0x218>)
 8008a04:	4653      	mov	r3, sl
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	dc38      	bgt.n	8008a7c <__ieee754_fmod+0xfc>
 8008a0a:	4b61      	ldr	r3, [pc, #388]	; (8008b90 <__ieee754_fmod+0x210>)
 8008a0c:	4033      	ands	r3, r6
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d14f      	bne.n	8008ab2 <__ieee754_fmod+0x132>
 8008a12:	f1be 0f00 	cmp.w	lr, #0
 8008a16:	d144      	bne.n	8008aa2 <__ieee754_fmod+0x122>
 8008a18:	4a5f      	ldr	r2, [pc, #380]	; (8008b98 <__ieee754_fmod+0x218>)
 8008a1a:	463b      	mov	r3, r7
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dc3d      	bgt.n	8008a9c <__ieee754_fmod+0x11c>
 8008a20:	4b5e      	ldr	r3, [pc, #376]	; (8008b9c <__ieee754_fmod+0x21c>)
 8008a22:	4299      	cmp	r1, r3
 8008a24:	db4a      	blt.n	8008abc <__ieee754_fmod+0x13c>
 8008a26:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a2e:	485b      	ldr	r0, [pc, #364]	; (8008b9c <__ieee754_fmod+0x21c>)
 8008a30:	4282      	cmp	r2, r0
 8008a32:	db57      	blt.n	8008ae4 <__ieee754_fmod+0x164>
 8008a34:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8008a38:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8008a3c:	1a89      	subs	r1, r1, r2
 8008a3e:	1b98      	subs	r0, r3, r6
 8008a40:	eba4 070c 	sub.w	r7, r4, ip
 8008a44:	2900      	cmp	r1, #0
 8008a46:	d164      	bne.n	8008b12 <__ieee754_fmod+0x192>
 8008a48:	4564      	cmp	r4, ip
 8008a4a:	bf38      	it	cc
 8008a4c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8008a50:	2800      	cmp	r0, #0
 8008a52:	bfa4      	itt	ge
 8008a54:	463c      	movge	r4, r7
 8008a56:	4603      	movge	r3, r0
 8008a58:	ea53 0104 	orrs.w	r1, r3, r4
 8008a5c:	d0c4      	beq.n	80089e8 <__ieee754_fmod+0x68>
 8008a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a62:	db6b      	blt.n	8008b3c <__ieee754_fmod+0x1bc>
 8008a64:	494d      	ldr	r1, [pc, #308]	; (8008b9c <__ieee754_fmod+0x21c>)
 8008a66:	428a      	cmp	r2, r1
 8008a68:	db6e      	blt.n	8008b48 <__ieee754_fmod+0x1c8>
 8008a6a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008a6e:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8008a72:	431d      	orrs	r5, r3
 8008a74:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8008a78:	4620      	mov	r0, r4
 8008a7a:	e7a5      	b.n	80089c8 <__ieee754_fmod+0x48>
 8008a7c:	3901      	subs	r1, #1
 8008a7e:	005b      	lsls	r3, r3, #1
 8008a80:	e7c1      	b.n	8008a06 <__ieee754_fmod+0x86>
 8008a82:	4946      	ldr	r1, [pc, #280]	; (8008b9c <__ieee754_fmod+0x21c>)
 8008a84:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	ddbe      	ble.n	8008a0a <__ieee754_fmod+0x8a>
 8008a8c:	3901      	subs	r1, #1
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	e7fa      	b.n	8008a88 <__ieee754_fmod+0x108>
 8008a92:	ea4f 5128 	mov.w	r1, r8, asr #20
 8008a96:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008a9a:	e7b6      	b.n	8008a0a <__ieee754_fmod+0x8a>
 8008a9c:	3a01      	subs	r2, #1
 8008a9e:	005b      	lsls	r3, r3, #1
 8008aa0:	e7bc      	b.n	8008a1c <__ieee754_fmod+0x9c>
 8008aa2:	4a3e      	ldr	r2, [pc, #248]	; (8008b9c <__ieee754_fmod+0x21c>)
 8008aa4:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	ddb9      	ble.n	8008a20 <__ieee754_fmod+0xa0>
 8008aac:	3a01      	subs	r2, #1
 8008aae:	005b      	lsls	r3, r3, #1
 8008ab0:	e7fa      	b.n	8008aa8 <__ieee754_fmod+0x128>
 8008ab2:	ea4f 522e 	mov.w	r2, lr, asr #20
 8008ab6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008aba:	e7b1      	b.n	8008a20 <__ieee754_fmod+0xa0>
 8008abc:	1a5c      	subs	r4, r3, r1
 8008abe:	2c1f      	cmp	r4, #31
 8008ac0:	dc0a      	bgt.n	8008ad8 <__ieee754_fmod+0x158>
 8008ac2:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8008ac6:	fa08 f804 	lsl.w	r8, r8, r4
 8008aca:	fa2a f303 	lsr.w	r3, sl, r3
 8008ace:	ea43 0308 	orr.w	r3, r3, r8
 8008ad2:	fa0a f404 	lsl.w	r4, sl, r4
 8008ad6:	e7aa      	b.n	8008a2e <__ieee754_fmod+0xae>
 8008ad8:	4b31      	ldr	r3, [pc, #196]	; (8008ba0 <__ieee754_fmod+0x220>)
 8008ada:	1a5b      	subs	r3, r3, r1
 8008adc:	fa0a f303 	lsl.w	r3, sl, r3
 8008ae0:	2400      	movs	r4, #0
 8008ae2:	e7a4      	b.n	8008a2e <__ieee754_fmod+0xae>
 8008ae4:	eba0 0c02 	sub.w	ip, r0, r2
 8008ae8:	f1bc 0f1f 	cmp.w	ip, #31
 8008aec:	dc0a      	bgt.n	8008b04 <__ieee754_fmod+0x184>
 8008aee:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8008af2:	fa0e fe0c 	lsl.w	lr, lr, ip
 8008af6:	fa27 f606 	lsr.w	r6, r7, r6
 8008afa:	ea46 060e 	orr.w	r6, r6, lr
 8008afe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8008b02:	e79b      	b.n	8008a3c <__ieee754_fmod+0xbc>
 8008b04:	4e26      	ldr	r6, [pc, #152]	; (8008ba0 <__ieee754_fmod+0x220>)
 8008b06:	1ab6      	subs	r6, r6, r2
 8008b08:	fa07 f606 	lsl.w	r6, r7, r6
 8008b0c:	f04f 0c00 	mov.w	ip, #0
 8008b10:	e794      	b.n	8008a3c <__ieee754_fmod+0xbc>
 8008b12:	4564      	cmp	r4, ip
 8008b14:	bf38      	it	cc
 8008b16:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	da05      	bge.n	8008b2a <__ieee754_fmod+0x1aa>
 8008b1e:	0fe0      	lsrs	r0, r4, #31
 8008b20:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008b24:	0064      	lsls	r4, r4, #1
 8008b26:	3901      	subs	r1, #1
 8008b28:	e789      	b.n	8008a3e <__ieee754_fmod+0xbe>
 8008b2a:	ea50 0307 	orrs.w	r3, r0, r7
 8008b2e:	f43f af5b 	beq.w	80089e8 <__ieee754_fmod+0x68>
 8008b32:	0ffb      	lsrs	r3, r7, #31
 8008b34:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008b38:	007c      	lsls	r4, r7, #1
 8008b3a:	e7f4      	b.n	8008b26 <__ieee754_fmod+0x1a6>
 8008b3c:	0fe1      	lsrs	r1, r4, #31
 8008b3e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008b42:	0064      	lsls	r4, r4, #1
 8008b44:	3a01      	subs	r2, #1
 8008b46:	e78a      	b.n	8008a5e <__ieee754_fmod+0xde>
 8008b48:	1a89      	subs	r1, r1, r2
 8008b4a:	2914      	cmp	r1, #20
 8008b4c:	dc0a      	bgt.n	8008b64 <__ieee754_fmod+0x1e4>
 8008b4e:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8008b52:	fa03 f202 	lsl.w	r2, r3, r2
 8008b56:	40cc      	lsrs	r4, r1
 8008b58:	4322      	orrs	r2, r4
 8008b5a:	410b      	asrs	r3, r1
 8008b5c:	ea43 0105 	orr.w	r1, r3, r5
 8008b60:	4610      	mov	r0, r2
 8008b62:	e731      	b.n	80089c8 <__ieee754_fmod+0x48>
 8008b64:	291f      	cmp	r1, #31
 8008b66:	dc07      	bgt.n	8008b78 <__ieee754_fmod+0x1f8>
 8008b68:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8008b6c:	40cc      	lsrs	r4, r1
 8008b6e:	fa03 f202 	lsl.w	r2, r3, r2
 8008b72:	4322      	orrs	r2, r4
 8008b74:	462b      	mov	r3, r5
 8008b76:	e7f1      	b.n	8008b5c <__ieee754_fmod+0x1dc>
 8008b78:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8008b7c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008b80:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8008b84:	32e2      	adds	r2, #226	; 0xe2
 8008b86:	fa43 f202 	asr.w	r2, r3, r2
 8008b8a:	e7f3      	b.n	8008b74 <__ieee754_fmod+0x1f4>
 8008b8c:	7fefffff 	.word	0x7fefffff
 8008b90:	7ff00000 	.word	0x7ff00000
 8008b94:	08009bf8 	.word	0x08009bf8
 8008b98:	fffffbed 	.word	0xfffffbed
 8008b9c:	fffffc02 	.word	0xfffffc02
 8008ba0:	fffffbe2 	.word	0xfffffbe2
 8008ba4:	00000000 	.word	0x00000000

08008ba8 <__ieee754_rem_pio2>:
 8008ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bac:	ed2d 8b02 	vpush	{d8}
 8008bb0:	ec55 4b10 	vmov	r4, r5, d0
 8008bb4:	4bca      	ldr	r3, [pc, #808]	; (8008ee0 <__ieee754_rem_pio2+0x338>)
 8008bb6:	b08b      	sub	sp, #44	; 0x2c
 8008bb8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008bbc:	4598      	cmp	r8, r3
 8008bbe:	4682      	mov	sl, r0
 8008bc0:	9502      	str	r5, [sp, #8]
 8008bc2:	dc08      	bgt.n	8008bd6 <__ieee754_rem_pio2+0x2e>
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	ed80 0b00 	vstr	d0, [r0]
 8008bcc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008bd0:	f04f 0b00 	mov.w	fp, #0
 8008bd4:	e028      	b.n	8008c28 <__ieee754_rem_pio2+0x80>
 8008bd6:	4bc3      	ldr	r3, [pc, #780]	; (8008ee4 <__ieee754_rem_pio2+0x33c>)
 8008bd8:	4598      	cmp	r8, r3
 8008bda:	dc78      	bgt.n	8008cce <__ieee754_rem_pio2+0x126>
 8008bdc:	9b02      	ldr	r3, [sp, #8]
 8008bde:	4ec2      	ldr	r6, [pc, #776]	; (8008ee8 <__ieee754_rem_pio2+0x340>)
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	ee10 0a10 	vmov	r0, s0
 8008be6:	a3b0      	add	r3, pc, #704	; (adr r3, 8008ea8 <__ieee754_rem_pio2+0x300>)
 8008be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bec:	4629      	mov	r1, r5
 8008bee:	dd39      	ble.n	8008c64 <__ieee754_rem_pio2+0xbc>
 8008bf0:	f7f7 faf6 	bl	80001e0 <__aeabi_dsub>
 8008bf4:	45b0      	cmp	r8, r6
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	460d      	mov	r5, r1
 8008bfa:	d01b      	beq.n	8008c34 <__ieee754_rem_pio2+0x8c>
 8008bfc:	a3ac      	add	r3, pc, #688	; (adr r3, 8008eb0 <__ieee754_rem_pio2+0x308>)
 8008bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c02:	f7f7 faed 	bl	80001e0 <__aeabi_dsub>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	e9ca 2300 	strd	r2, r3, [sl]
 8008c0e:	4620      	mov	r0, r4
 8008c10:	4629      	mov	r1, r5
 8008c12:	f7f7 fae5 	bl	80001e0 <__aeabi_dsub>
 8008c16:	a3a6      	add	r3, pc, #664	; (adr r3, 8008eb0 <__ieee754_rem_pio2+0x308>)
 8008c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1c:	f7f7 fae0 	bl	80001e0 <__aeabi_dsub>
 8008c20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008c24:	f04f 0b01 	mov.w	fp, #1
 8008c28:	4658      	mov	r0, fp
 8008c2a:	b00b      	add	sp, #44	; 0x2c
 8008c2c:	ecbd 8b02 	vpop	{d8}
 8008c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c34:	a3a0      	add	r3, pc, #640	; (adr r3, 8008eb8 <__ieee754_rem_pio2+0x310>)
 8008c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3a:	f7f7 fad1 	bl	80001e0 <__aeabi_dsub>
 8008c3e:	a3a0      	add	r3, pc, #640	; (adr r3, 8008ec0 <__ieee754_rem_pio2+0x318>)
 8008c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c44:	4604      	mov	r4, r0
 8008c46:	460d      	mov	r5, r1
 8008c48:	f7f7 faca 	bl	80001e0 <__aeabi_dsub>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	460b      	mov	r3, r1
 8008c50:	e9ca 2300 	strd	r2, r3, [sl]
 8008c54:	4620      	mov	r0, r4
 8008c56:	4629      	mov	r1, r5
 8008c58:	f7f7 fac2 	bl	80001e0 <__aeabi_dsub>
 8008c5c:	a398      	add	r3, pc, #608	; (adr r3, 8008ec0 <__ieee754_rem_pio2+0x318>)
 8008c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c62:	e7db      	b.n	8008c1c <__ieee754_rem_pio2+0x74>
 8008c64:	f7f7 fabe 	bl	80001e4 <__adddf3>
 8008c68:	45b0      	cmp	r8, r6
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	460d      	mov	r5, r1
 8008c6e:	d016      	beq.n	8008c9e <__ieee754_rem_pio2+0xf6>
 8008c70:	a38f      	add	r3, pc, #572	; (adr r3, 8008eb0 <__ieee754_rem_pio2+0x308>)
 8008c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c76:	f7f7 fab5 	bl	80001e4 <__adddf3>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	e9ca 2300 	strd	r2, r3, [sl]
 8008c82:	4620      	mov	r0, r4
 8008c84:	4629      	mov	r1, r5
 8008c86:	f7f7 faab 	bl	80001e0 <__aeabi_dsub>
 8008c8a:	a389      	add	r3, pc, #548	; (adr r3, 8008eb0 <__ieee754_rem_pio2+0x308>)
 8008c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c90:	f7f7 faa8 	bl	80001e4 <__adddf3>
 8008c94:	f04f 3bff 	mov.w	fp, #4294967295
 8008c98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008c9c:	e7c4      	b.n	8008c28 <__ieee754_rem_pio2+0x80>
 8008c9e:	a386      	add	r3, pc, #536	; (adr r3, 8008eb8 <__ieee754_rem_pio2+0x310>)
 8008ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca4:	f7f7 fa9e 	bl	80001e4 <__adddf3>
 8008ca8:	a385      	add	r3, pc, #532	; (adr r3, 8008ec0 <__ieee754_rem_pio2+0x318>)
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	4604      	mov	r4, r0
 8008cb0:	460d      	mov	r5, r1
 8008cb2:	f7f7 fa97 	bl	80001e4 <__adddf3>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	460b      	mov	r3, r1
 8008cba:	e9ca 2300 	strd	r2, r3, [sl]
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	f7f7 fa8d 	bl	80001e0 <__aeabi_dsub>
 8008cc6:	a37e      	add	r3, pc, #504	; (adr r3, 8008ec0 <__ieee754_rem_pio2+0x318>)
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	e7e0      	b.n	8008c90 <__ieee754_rem_pio2+0xe8>
 8008cce:	4b87      	ldr	r3, [pc, #540]	; (8008eec <__ieee754_rem_pio2+0x344>)
 8008cd0:	4598      	cmp	r8, r3
 8008cd2:	f300 80d9 	bgt.w	8008e88 <__ieee754_rem_pio2+0x2e0>
 8008cd6:	f000 fe39 	bl	800994c <fabs>
 8008cda:	ec55 4b10 	vmov	r4, r5, d0
 8008cde:	ee10 0a10 	vmov	r0, s0
 8008ce2:	a379      	add	r3, pc, #484	; (adr r3, 8008ec8 <__ieee754_rem_pio2+0x320>)
 8008ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce8:	4629      	mov	r1, r5
 8008cea:	f7f7 fc31 	bl	8000550 <__aeabi_dmul>
 8008cee:	4b80      	ldr	r3, [pc, #512]	; (8008ef0 <__ieee754_rem_pio2+0x348>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f7f7 fa77 	bl	80001e4 <__adddf3>
 8008cf6:	f7f7 fedb 	bl	8000ab0 <__aeabi_d2iz>
 8008cfa:	4683      	mov	fp, r0
 8008cfc:	f7f7 fbbe 	bl	800047c <__aeabi_i2d>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	ec43 2b18 	vmov	d8, r2, r3
 8008d08:	a367      	add	r3, pc, #412	; (adr r3, 8008ea8 <__ieee754_rem_pio2+0x300>)
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f7f7 fc1f 	bl	8000550 <__aeabi_dmul>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	4620      	mov	r0, r4
 8008d18:	4629      	mov	r1, r5
 8008d1a:	f7f7 fa61 	bl	80001e0 <__aeabi_dsub>
 8008d1e:	a364      	add	r3, pc, #400	; (adr r3, 8008eb0 <__ieee754_rem_pio2+0x308>)
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	4606      	mov	r6, r0
 8008d26:	460f      	mov	r7, r1
 8008d28:	ec51 0b18 	vmov	r0, r1, d8
 8008d2c:	f7f7 fc10 	bl	8000550 <__aeabi_dmul>
 8008d30:	f1bb 0f1f 	cmp.w	fp, #31
 8008d34:	4604      	mov	r4, r0
 8008d36:	460d      	mov	r5, r1
 8008d38:	dc0d      	bgt.n	8008d56 <__ieee754_rem_pio2+0x1ae>
 8008d3a:	4b6e      	ldr	r3, [pc, #440]	; (8008ef4 <__ieee754_rem_pio2+0x34c>)
 8008d3c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d44:	4543      	cmp	r3, r8
 8008d46:	d006      	beq.n	8008d56 <__ieee754_rem_pio2+0x1ae>
 8008d48:	4622      	mov	r2, r4
 8008d4a:	462b      	mov	r3, r5
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	4639      	mov	r1, r7
 8008d50:	f7f7 fa46 	bl	80001e0 <__aeabi_dsub>
 8008d54:	e00f      	b.n	8008d76 <__ieee754_rem_pio2+0x1ce>
 8008d56:	462b      	mov	r3, r5
 8008d58:	4622      	mov	r2, r4
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	4639      	mov	r1, r7
 8008d5e:	f7f7 fa3f 	bl	80001e0 <__aeabi_dsub>
 8008d62:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008d66:	9303      	str	r3, [sp, #12]
 8008d68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008d6c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008d70:	f1b8 0f10 	cmp.w	r8, #16
 8008d74:	dc02      	bgt.n	8008d7c <__ieee754_rem_pio2+0x1d4>
 8008d76:	e9ca 0100 	strd	r0, r1, [sl]
 8008d7a:	e039      	b.n	8008df0 <__ieee754_rem_pio2+0x248>
 8008d7c:	a34e      	add	r3, pc, #312	; (adr r3, 8008eb8 <__ieee754_rem_pio2+0x310>)
 8008d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d82:	ec51 0b18 	vmov	r0, r1, d8
 8008d86:	f7f7 fbe3 	bl	8000550 <__aeabi_dmul>
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	460d      	mov	r5, r1
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	4630      	mov	r0, r6
 8008d94:	4639      	mov	r1, r7
 8008d96:	f7f7 fa23 	bl	80001e0 <__aeabi_dsub>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	4680      	mov	r8, r0
 8008da0:	4689      	mov	r9, r1
 8008da2:	4630      	mov	r0, r6
 8008da4:	4639      	mov	r1, r7
 8008da6:	f7f7 fa1b 	bl	80001e0 <__aeabi_dsub>
 8008daa:	4622      	mov	r2, r4
 8008dac:	462b      	mov	r3, r5
 8008dae:	f7f7 fa17 	bl	80001e0 <__aeabi_dsub>
 8008db2:	a343      	add	r3, pc, #268	; (adr r3, 8008ec0 <__ieee754_rem_pio2+0x318>)
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	4604      	mov	r4, r0
 8008dba:	460d      	mov	r5, r1
 8008dbc:	ec51 0b18 	vmov	r0, r1, d8
 8008dc0:	f7f7 fbc6 	bl	8000550 <__aeabi_dmul>
 8008dc4:	4622      	mov	r2, r4
 8008dc6:	462b      	mov	r3, r5
 8008dc8:	f7f7 fa0a 	bl	80001e0 <__aeabi_dsub>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4604      	mov	r4, r0
 8008dd2:	460d      	mov	r5, r1
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	4649      	mov	r1, r9
 8008dd8:	f7f7 fa02 	bl	80001e0 <__aeabi_dsub>
 8008ddc:	9a03      	ldr	r2, [sp, #12]
 8008dde:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	2b31      	cmp	r3, #49	; 0x31
 8008de6:	dc24      	bgt.n	8008e32 <__ieee754_rem_pio2+0x28a>
 8008de8:	e9ca 0100 	strd	r0, r1, [sl]
 8008dec:	4646      	mov	r6, r8
 8008dee:	464f      	mov	r7, r9
 8008df0:	e9da 8900 	ldrd	r8, r9, [sl]
 8008df4:	4630      	mov	r0, r6
 8008df6:	4642      	mov	r2, r8
 8008df8:	464b      	mov	r3, r9
 8008dfa:	4639      	mov	r1, r7
 8008dfc:	f7f7 f9f0 	bl	80001e0 <__aeabi_dsub>
 8008e00:	462b      	mov	r3, r5
 8008e02:	4622      	mov	r2, r4
 8008e04:	f7f7 f9ec 	bl	80001e0 <__aeabi_dsub>
 8008e08:	9b02      	ldr	r3, [sp, #8]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008e10:	f6bf af0a 	bge.w	8008c28 <__ieee754_rem_pio2+0x80>
 8008e14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008e18:	f8ca 3004 	str.w	r3, [sl, #4]
 8008e1c:	f8ca 8000 	str.w	r8, [sl]
 8008e20:	f8ca 0008 	str.w	r0, [sl, #8]
 8008e24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e28:	f8ca 300c 	str.w	r3, [sl, #12]
 8008e2c:	f1cb 0b00 	rsb	fp, fp, #0
 8008e30:	e6fa      	b.n	8008c28 <__ieee754_rem_pio2+0x80>
 8008e32:	a327      	add	r3, pc, #156	; (adr r3, 8008ed0 <__ieee754_rem_pio2+0x328>)
 8008e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e38:	ec51 0b18 	vmov	r0, r1, d8
 8008e3c:	f7f7 fb88 	bl	8000550 <__aeabi_dmul>
 8008e40:	4604      	mov	r4, r0
 8008e42:	460d      	mov	r5, r1
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4640      	mov	r0, r8
 8008e4a:	4649      	mov	r1, r9
 8008e4c:	f7f7 f9c8 	bl	80001e0 <__aeabi_dsub>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	4606      	mov	r6, r0
 8008e56:	460f      	mov	r7, r1
 8008e58:	4640      	mov	r0, r8
 8008e5a:	4649      	mov	r1, r9
 8008e5c:	f7f7 f9c0 	bl	80001e0 <__aeabi_dsub>
 8008e60:	4622      	mov	r2, r4
 8008e62:	462b      	mov	r3, r5
 8008e64:	f7f7 f9bc 	bl	80001e0 <__aeabi_dsub>
 8008e68:	a31b      	add	r3, pc, #108	; (adr r3, 8008ed8 <__ieee754_rem_pio2+0x330>)
 8008e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6e:	4604      	mov	r4, r0
 8008e70:	460d      	mov	r5, r1
 8008e72:	ec51 0b18 	vmov	r0, r1, d8
 8008e76:	f7f7 fb6b 	bl	8000550 <__aeabi_dmul>
 8008e7a:	4622      	mov	r2, r4
 8008e7c:	462b      	mov	r3, r5
 8008e7e:	f7f7 f9af 	bl	80001e0 <__aeabi_dsub>
 8008e82:	4604      	mov	r4, r0
 8008e84:	460d      	mov	r5, r1
 8008e86:	e75f      	b.n	8008d48 <__ieee754_rem_pio2+0x1a0>
 8008e88:	4b1b      	ldr	r3, [pc, #108]	; (8008ef8 <__ieee754_rem_pio2+0x350>)
 8008e8a:	4598      	cmp	r8, r3
 8008e8c:	dd36      	ble.n	8008efc <__ieee754_rem_pio2+0x354>
 8008e8e:	ee10 2a10 	vmov	r2, s0
 8008e92:	462b      	mov	r3, r5
 8008e94:	4620      	mov	r0, r4
 8008e96:	4629      	mov	r1, r5
 8008e98:	f7f7 f9a2 	bl	80001e0 <__aeabi_dsub>
 8008e9c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008ea0:	e9ca 0100 	strd	r0, r1, [sl]
 8008ea4:	e694      	b.n	8008bd0 <__ieee754_rem_pio2+0x28>
 8008ea6:	bf00      	nop
 8008ea8:	54400000 	.word	0x54400000
 8008eac:	3ff921fb 	.word	0x3ff921fb
 8008eb0:	1a626331 	.word	0x1a626331
 8008eb4:	3dd0b461 	.word	0x3dd0b461
 8008eb8:	1a600000 	.word	0x1a600000
 8008ebc:	3dd0b461 	.word	0x3dd0b461
 8008ec0:	2e037073 	.word	0x2e037073
 8008ec4:	3ba3198a 	.word	0x3ba3198a
 8008ec8:	6dc9c883 	.word	0x6dc9c883
 8008ecc:	3fe45f30 	.word	0x3fe45f30
 8008ed0:	2e000000 	.word	0x2e000000
 8008ed4:	3ba3198a 	.word	0x3ba3198a
 8008ed8:	252049c1 	.word	0x252049c1
 8008edc:	397b839a 	.word	0x397b839a
 8008ee0:	3fe921fb 	.word	0x3fe921fb
 8008ee4:	4002d97b 	.word	0x4002d97b
 8008ee8:	3ff921fb 	.word	0x3ff921fb
 8008eec:	413921fb 	.word	0x413921fb
 8008ef0:	3fe00000 	.word	0x3fe00000
 8008ef4:	08009c08 	.word	0x08009c08
 8008ef8:	7fefffff 	.word	0x7fefffff
 8008efc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008f00:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008f04:	ee10 0a10 	vmov	r0, s0
 8008f08:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008f0c:	ee10 6a10 	vmov	r6, s0
 8008f10:	460f      	mov	r7, r1
 8008f12:	f7f7 fdcd 	bl	8000ab0 <__aeabi_d2iz>
 8008f16:	f7f7 fab1 	bl	800047c <__aeabi_i2d>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	4630      	mov	r0, r6
 8008f20:	4639      	mov	r1, r7
 8008f22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f26:	f7f7 f95b 	bl	80001e0 <__aeabi_dsub>
 8008f2a:	4b22      	ldr	r3, [pc, #136]	; (8008fb4 <__ieee754_rem_pio2+0x40c>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f7f7 fb0f 	bl	8000550 <__aeabi_dmul>
 8008f32:	460f      	mov	r7, r1
 8008f34:	4606      	mov	r6, r0
 8008f36:	f7f7 fdbb 	bl	8000ab0 <__aeabi_d2iz>
 8008f3a:	f7f7 fa9f 	bl	800047c <__aeabi_i2d>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	4630      	mov	r0, r6
 8008f44:	4639      	mov	r1, r7
 8008f46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008f4a:	f7f7 f949 	bl	80001e0 <__aeabi_dsub>
 8008f4e:	4b19      	ldr	r3, [pc, #100]	; (8008fb4 <__ieee754_rem_pio2+0x40c>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	f7f7 fafd 	bl	8000550 <__aeabi_dmul>
 8008f56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008f5a:	ad04      	add	r5, sp, #16
 8008f5c:	f04f 0803 	mov.w	r8, #3
 8008f60:	46a9      	mov	r9, r5
 8008f62:	2600      	movs	r6, #0
 8008f64:	2700      	movs	r7, #0
 8008f66:	4632      	mov	r2, r6
 8008f68:	463b      	mov	r3, r7
 8008f6a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008f6e:	46c3      	mov	fp, r8
 8008f70:	3d08      	subs	r5, #8
 8008f72:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f76:	f7f7 fd53 	bl	8000a20 <__aeabi_dcmpeq>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d1f3      	bne.n	8008f66 <__ieee754_rem_pio2+0x3be>
 8008f7e:	4b0e      	ldr	r3, [pc, #56]	; (8008fb8 <__ieee754_rem_pio2+0x410>)
 8008f80:	9301      	str	r3, [sp, #4]
 8008f82:	2302      	movs	r3, #2
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	4622      	mov	r2, r4
 8008f88:	465b      	mov	r3, fp
 8008f8a:	4651      	mov	r1, sl
 8008f8c:	4648      	mov	r0, r9
 8008f8e:	f000 f8df 	bl	8009150 <__kernel_rem_pio2>
 8008f92:	9b02      	ldr	r3, [sp, #8]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	4683      	mov	fp, r0
 8008f98:	f6bf ae46 	bge.w	8008c28 <__ieee754_rem_pio2+0x80>
 8008f9c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008fa0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008fa4:	f8ca 3004 	str.w	r3, [sl, #4]
 8008fa8:	f8da 300c 	ldr.w	r3, [sl, #12]
 8008fac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008fb0:	e73a      	b.n	8008e28 <__ieee754_rem_pio2+0x280>
 8008fb2:	bf00      	nop
 8008fb4:	41700000 	.word	0x41700000
 8008fb8:	08009c88 	.word	0x08009c88
 8008fbc:	00000000 	.word	0x00000000

08008fc0 <__kernel_cos>:
 8008fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc4:	ec57 6b10 	vmov	r6, r7, d0
 8008fc8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008fcc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008fd0:	ed8d 1b00 	vstr	d1, [sp]
 8008fd4:	da07      	bge.n	8008fe6 <__kernel_cos+0x26>
 8008fd6:	ee10 0a10 	vmov	r0, s0
 8008fda:	4639      	mov	r1, r7
 8008fdc:	f7f7 fd68 	bl	8000ab0 <__aeabi_d2iz>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	f000 8088 	beq.w	80090f6 <__kernel_cos+0x136>
 8008fe6:	4632      	mov	r2, r6
 8008fe8:	463b      	mov	r3, r7
 8008fea:	4630      	mov	r0, r6
 8008fec:	4639      	mov	r1, r7
 8008fee:	f7f7 faaf 	bl	8000550 <__aeabi_dmul>
 8008ff2:	4b51      	ldr	r3, [pc, #324]	; (8009138 <__kernel_cos+0x178>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	460d      	mov	r5, r1
 8008ffa:	f7f7 faa9 	bl	8000550 <__aeabi_dmul>
 8008ffe:	a340      	add	r3, pc, #256	; (adr r3, 8009100 <__kernel_cos+0x140>)
 8009000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009004:	4682      	mov	sl, r0
 8009006:	468b      	mov	fp, r1
 8009008:	4620      	mov	r0, r4
 800900a:	4629      	mov	r1, r5
 800900c:	f7f7 faa0 	bl	8000550 <__aeabi_dmul>
 8009010:	a33d      	add	r3, pc, #244	; (adr r3, 8009108 <__kernel_cos+0x148>)
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	f7f7 f8e5 	bl	80001e4 <__adddf3>
 800901a:	4622      	mov	r2, r4
 800901c:	462b      	mov	r3, r5
 800901e:	f7f7 fa97 	bl	8000550 <__aeabi_dmul>
 8009022:	a33b      	add	r3, pc, #236	; (adr r3, 8009110 <__kernel_cos+0x150>)
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	f7f7 f8da 	bl	80001e0 <__aeabi_dsub>
 800902c:	4622      	mov	r2, r4
 800902e:	462b      	mov	r3, r5
 8009030:	f7f7 fa8e 	bl	8000550 <__aeabi_dmul>
 8009034:	a338      	add	r3, pc, #224	; (adr r3, 8009118 <__kernel_cos+0x158>)
 8009036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903a:	f7f7 f8d3 	bl	80001e4 <__adddf3>
 800903e:	4622      	mov	r2, r4
 8009040:	462b      	mov	r3, r5
 8009042:	f7f7 fa85 	bl	8000550 <__aeabi_dmul>
 8009046:	a336      	add	r3, pc, #216	; (adr r3, 8009120 <__kernel_cos+0x160>)
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	f7f7 f8c8 	bl	80001e0 <__aeabi_dsub>
 8009050:	4622      	mov	r2, r4
 8009052:	462b      	mov	r3, r5
 8009054:	f7f7 fa7c 	bl	8000550 <__aeabi_dmul>
 8009058:	a333      	add	r3, pc, #204	; (adr r3, 8009128 <__kernel_cos+0x168>)
 800905a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905e:	f7f7 f8c1 	bl	80001e4 <__adddf3>
 8009062:	4622      	mov	r2, r4
 8009064:	462b      	mov	r3, r5
 8009066:	f7f7 fa73 	bl	8000550 <__aeabi_dmul>
 800906a:	4622      	mov	r2, r4
 800906c:	462b      	mov	r3, r5
 800906e:	f7f7 fa6f 	bl	8000550 <__aeabi_dmul>
 8009072:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009076:	4604      	mov	r4, r0
 8009078:	460d      	mov	r5, r1
 800907a:	4630      	mov	r0, r6
 800907c:	4639      	mov	r1, r7
 800907e:	f7f7 fa67 	bl	8000550 <__aeabi_dmul>
 8009082:	460b      	mov	r3, r1
 8009084:	4602      	mov	r2, r0
 8009086:	4629      	mov	r1, r5
 8009088:	4620      	mov	r0, r4
 800908a:	f7f7 f8a9 	bl	80001e0 <__aeabi_dsub>
 800908e:	4b2b      	ldr	r3, [pc, #172]	; (800913c <__kernel_cos+0x17c>)
 8009090:	4598      	cmp	r8, r3
 8009092:	4606      	mov	r6, r0
 8009094:	460f      	mov	r7, r1
 8009096:	dc10      	bgt.n	80090ba <__kernel_cos+0xfa>
 8009098:	4602      	mov	r2, r0
 800909a:	460b      	mov	r3, r1
 800909c:	4650      	mov	r0, sl
 800909e:	4659      	mov	r1, fp
 80090a0:	f7f7 f89e 	bl	80001e0 <__aeabi_dsub>
 80090a4:	460b      	mov	r3, r1
 80090a6:	4926      	ldr	r1, [pc, #152]	; (8009140 <__kernel_cos+0x180>)
 80090a8:	4602      	mov	r2, r0
 80090aa:	2000      	movs	r0, #0
 80090ac:	f7f7 f898 	bl	80001e0 <__aeabi_dsub>
 80090b0:	ec41 0b10 	vmov	d0, r0, r1
 80090b4:	b003      	add	sp, #12
 80090b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ba:	4b22      	ldr	r3, [pc, #136]	; (8009144 <__kernel_cos+0x184>)
 80090bc:	4920      	ldr	r1, [pc, #128]	; (8009140 <__kernel_cos+0x180>)
 80090be:	4598      	cmp	r8, r3
 80090c0:	bfcc      	ite	gt
 80090c2:	4d21      	ldrgt	r5, [pc, #132]	; (8009148 <__kernel_cos+0x188>)
 80090c4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80090c8:	2400      	movs	r4, #0
 80090ca:	4622      	mov	r2, r4
 80090cc:	462b      	mov	r3, r5
 80090ce:	2000      	movs	r0, #0
 80090d0:	f7f7 f886 	bl	80001e0 <__aeabi_dsub>
 80090d4:	4622      	mov	r2, r4
 80090d6:	4680      	mov	r8, r0
 80090d8:	4689      	mov	r9, r1
 80090da:	462b      	mov	r3, r5
 80090dc:	4650      	mov	r0, sl
 80090de:	4659      	mov	r1, fp
 80090e0:	f7f7 f87e 	bl	80001e0 <__aeabi_dsub>
 80090e4:	4632      	mov	r2, r6
 80090e6:	463b      	mov	r3, r7
 80090e8:	f7f7 f87a 	bl	80001e0 <__aeabi_dsub>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4640      	mov	r0, r8
 80090f2:	4649      	mov	r1, r9
 80090f4:	e7da      	b.n	80090ac <__kernel_cos+0xec>
 80090f6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009130 <__kernel_cos+0x170>
 80090fa:	e7db      	b.n	80090b4 <__kernel_cos+0xf4>
 80090fc:	f3af 8000 	nop.w
 8009100:	be8838d4 	.word	0xbe8838d4
 8009104:	bda8fae9 	.word	0xbda8fae9
 8009108:	bdb4b1c4 	.word	0xbdb4b1c4
 800910c:	3e21ee9e 	.word	0x3e21ee9e
 8009110:	809c52ad 	.word	0x809c52ad
 8009114:	3e927e4f 	.word	0x3e927e4f
 8009118:	19cb1590 	.word	0x19cb1590
 800911c:	3efa01a0 	.word	0x3efa01a0
 8009120:	16c15177 	.word	0x16c15177
 8009124:	3f56c16c 	.word	0x3f56c16c
 8009128:	5555554c 	.word	0x5555554c
 800912c:	3fa55555 	.word	0x3fa55555
 8009130:	00000000 	.word	0x00000000
 8009134:	3ff00000 	.word	0x3ff00000
 8009138:	3fe00000 	.word	0x3fe00000
 800913c:	3fd33332 	.word	0x3fd33332
 8009140:	3ff00000 	.word	0x3ff00000
 8009144:	3fe90000 	.word	0x3fe90000
 8009148:	3fd20000 	.word	0x3fd20000
 800914c:	00000000 	.word	0x00000000

08009150 <__kernel_rem_pio2>:
 8009150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009154:	ed2d 8b02 	vpush	{d8}
 8009158:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800915c:	f112 0f14 	cmn.w	r2, #20
 8009160:	9308      	str	r3, [sp, #32]
 8009162:	9101      	str	r1, [sp, #4]
 8009164:	4bc6      	ldr	r3, [pc, #792]	; (8009480 <__kernel_rem_pio2+0x330>)
 8009166:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8009168:	9009      	str	r0, [sp, #36]	; 0x24
 800916a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800916e:	9304      	str	r3, [sp, #16]
 8009170:	9b08      	ldr	r3, [sp, #32]
 8009172:	f103 33ff 	add.w	r3, r3, #4294967295
 8009176:	bfa8      	it	ge
 8009178:	1ed4      	subge	r4, r2, #3
 800917a:	9306      	str	r3, [sp, #24]
 800917c:	bfb2      	itee	lt
 800917e:	2400      	movlt	r4, #0
 8009180:	2318      	movge	r3, #24
 8009182:	fb94 f4f3 	sdivge	r4, r4, r3
 8009186:	f06f 0317 	mvn.w	r3, #23
 800918a:	fb04 3303 	mla	r3, r4, r3, r3
 800918e:	eb03 0a02 	add.w	sl, r3, r2
 8009192:	9b04      	ldr	r3, [sp, #16]
 8009194:	9a06      	ldr	r2, [sp, #24]
 8009196:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009470 <__kernel_rem_pio2+0x320>
 800919a:	eb03 0802 	add.w	r8, r3, r2
 800919e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80091a0:	1aa7      	subs	r7, r4, r2
 80091a2:	ae20      	add	r6, sp, #128	; 0x80
 80091a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80091a8:	2500      	movs	r5, #0
 80091aa:	4545      	cmp	r5, r8
 80091ac:	dd18      	ble.n	80091e0 <__kernel_rem_pio2+0x90>
 80091ae:	9b08      	ldr	r3, [sp, #32]
 80091b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80091b4:	aa20      	add	r2, sp, #128	; 0x80
 80091b6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009470 <__kernel_rem_pio2+0x320>
 80091ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80091be:	f1c3 0301 	rsb	r3, r3, #1
 80091c2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80091c6:	9307      	str	r3, [sp, #28]
 80091c8:	9b07      	ldr	r3, [sp, #28]
 80091ca:	9a04      	ldr	r2, [sp, #16]
 80091cc:	4443      	add	r3, r8
 80091ce:	429a      	cmp	r2, r3
 80091d0:	db2f      	blt.n	8009232 <__kernel_rem_pio2+0xe2>
 80091d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80091d6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80091da:	462f      	mov	r7, r5
 80091dc:	2600      	movs	r6, #0
 80091de:	e01b      	b.n	8009218 <__kernel_rem_pio2+0xc8>
 80091e0:	42ef      	cmn	r7, r5
 80091e2:	d407      	bmi.n	80091f4 <__kernel_rem_pio2+0xa4>
 80091e4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80091e8:	f7f7 f948 	bl	800047c <__aeabi_i2d>
 80091ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 80091f0:	3501      	adds	r5, #1
 80091f2:	e7da      	b.n	80091aa <__kernel_rem_pio2+0x5a>
 80091f4:	ec51 0b18 	vmov	r0, r1, d8
 80091f8:	e7f8      	b.n	80091ec <__kernel_rem_pio2+0x9c>
 80091fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091fe:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009202:	f7f7 f9a5 	bl	8000550 <__aeabi_dmul>
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800920e:	f7f6 ffe9 	bl	80001e4 <__adddf3>
 8009212:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009216:	3601      	adds	r6, #1
 8009218:	9b06      	ldr	r3, [sp, #24]
 800921a:	429e      	cmp	r6, r3
 800921c:	f1a7 0708 	sub.w	r7, r7, #8
 8009220:	ddeb      	ble.n	80091fa <__kernel_rem_pio2+0xaa>
 8009222:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009226:	3508      	adds	r5, #8
 8009228:	ecab 7b02 	vstmia	fp!, {d7}
 800922c:	f108 0801 	add.w	r8, r8, #1
 8009230:	e7ca      	b.n	80091c8 <__kernel_rem_pio2+0x78>
 8009232:	9b04      	ldr	r3, [sp, #16]
 8009234:	aa0c      	add	r2, sp, #48	; 0x30
 8009236:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800923a:	930b      	str	r3, [sp, #44]	; 0x2c
 800923c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800923e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009242:	9c04      	ldr	r4, [sp, #16]
 8009244:	930a      	str	r3, [sp, #40]	; 0x28
 8009246:	ab98      	add	r3, sp, #608	; 0x260
 8009248:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800924c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009250:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8009254:	f8cd b008 	str.w	fp, [sp, #8]
 8009258:	4625      	mov	r5, r4
 800925a:	2d00      	cmp	r5, #0
 800925c:	dc78      	bgt.n	8009350 <__kernel_rem_pio2+0x200>
 800925e:	ec47 6b10 	vmov	d0, r6, r7
 8009262:	4650      	mov	r0, sl
 8009264:	f000 fbfc 	bl	8009a60 <scalbn>
 8009268:	ec57 6b10 	vmov	r6, r7, d0
 800926c:	2200      	movs	r2, #0
 800926e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009272:	ee10 0a10 	vmov	r0, s0
 8009276:	4639      	mov	r1, r7
 8009278:	f7f7 f96a 	bl	8000550 <__aeabi_dmul>
 800927c:	ec41 0b10 	vmov	d0, r0, r1
 8009280:	f000 fb6e 	bl	8009960 <floor>
 8009284:	4b7f      	ldr	r3, [pc, #508]	; (8009484 <__kernel_rem_pio2+0x334>)
 8009286:	ec51 0b10 	vmov	r0, r1, d0
 800928a:	2200      	movs	r2, #0
 800928c:	f7f7 f960 	bl	8000550 <__aeabi_dmul>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4630      	mov	r0, r6
 8009296:	4639      	mov	r1, r7
 8009298:	f7f6 ffa2 	bl	80001e0 <__aeabi_dsub>
 800929c:	460f      	mov	r7, r1
 800929e:	4606      	mov	r6, r0
 80092a0:	f7f7 fc06 	bl	8000ab0 <__aeabi_d2iz>
 80092a4:	9007      	str	r0, [sp, #28]
 80092a6:	f7f7 f8e9 	bl	800047c <__aeabi_i2d>
 80092aa:	4602      	mov	r2, r0
 80092ac:	460b      	mov	r3, r1
 80092ae:	4630      	mov	r0, r6
 80092b0:	4639      	mov	r1, r7
 80092b2:	f7f6 ff95 	bl	80001e0 <__aeabi_dsub>
 80092b6:	f1ba 0f00 	cmp.w	sl, #0
 80092ba:	4606      	mov	r6, r0
 80092bc:	460f      	mov	r7, r1
 80092be:	dd70      	ble.n	80093a2 <__kernel_rem_pio2+0x252>
 80092c0:	1e62      	subs	r2, r4, #1
 80092c2:	ab0c      	add	r3, sp, #48	; 0x30
 80092c4:	9d07      	ldr	r5, [sp, #28]
 80092c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80092ca:	f1ca 0118 	rsb	r1, sl, #24
 80092ce:	fa40 f301 	asr.w	r3, r0, r1
 80092d2:	441d      	add	r5, r3
 80092d4:	408b      	lsls	r3, r1
 80092d6:	1ac0      	subs	r0, r0, r3
 80092d8:	ab0c      	add	r3, sp, #48	; 0x30
 80092da:	9507      	str	r5, [sp, #28]
 80092dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80092e0:	f1ca 0317 	rsb	r3, sl, #23
 80092e4:	fa40 f303 	asr.w	r3, r0, r3
 80092e8:	9302      	str	r3, [sp, #8]
 80092ea:	9b02      	ldr	r3, [sp, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	dd66      	ble.n	80093be <__kernel_rem_pio2+0x26e>
 80092f0:	9b07      	ldr	r3, [sp, #28]
 80092f2:	2200      	movs	r2, #0
 80092f4:	3301      	adds	r3, #1
 80092f6:	9307      	str	r3, [sp, #28]
 80092f8:	4615      	mov	r5, r2
 80092fa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80092fe:	4294      	cmp	r4, r2
 8009300:	f300 8099 	bgt.w	8009436 <__kernel_rem_pio2+0x2e6>
 8009304:	f1ba 0f00 	cmp.w	sl, #0
 8009308:	dd07      	ble.n	800931a <__kernel_rem_pio2+0x1ca>
 800930a:	f1ba 0f01 	cmp.w	sl, #1
 800930e:	f000 80a5 	beq.w	800945c <__kernel_rem_pio2+0x30c>
 8009312:	f1ba 0f02 	cmp.w	sl, #2
 8009316:	f000 80c1 	beq.w	800949c <__kernel_rem_pio2+0x34c>
 800931a:	9b02      	ldr	r3, [sp, #8]
 800931c:	2b02      	cmp	r3, #2
 800931e:	d14e      	bne.n	80093be <__kernel_rem_pio2+0x26e>
 8009320:	4632      	mov	r2, r6
 8009322:	463b      	mov	r3, r7
 8009324:	4958      	ldr	r1, [pc, #352]	; (8009488 <__kernel_rem_pio2+0x338>)
 8009326:	2000      	movs	r0, #0
 8009328:	f7f6 ff5a 	bl	80001e0 <__aeabi_dsub>
 800932c:	4606      	mov	r6, r0
 800932e:	460f      	mov	r7, r1
 8009330:	2d00      	cmp	r5, #0
 8009332:	d044      	beq.n	80093be <__kernel_rem_pio2+0x26e>
 8009334:	4650      	mov	r0, sl
 8009336:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009478 <__kernel_rem_pio2+0x328>
 800933a:	f000 fb91 	bl	8009a60 <scalbn>
 800933e:	4630      	mov	r0, r6
 8009340:	4639      	mov	r1, r7
 8009342:	ec53 2b10 	vmov	r2, r3, d0
 8009346:	f7f6 ff4b 	bl	80001e0 <__aeabi_dsub>
 800934a:	4606      	mov	r6, r0
 800934c:	460f      	mov	r7, r1
 800934e:	e036      	b.n	80093be <__kernel_rem_pio2+0x26e>
 8009350:	4b4e      	ldr	r3, [pc, #312]	; (800948c <__kernel_rem_pio2+0x33c>)
 8009352:	2200      	movs	r2, #0
 8009354:	4630      	mov	r0, r6
 8009356:	4639      	mov	r1, r7
 8009358:	f7f7 f8fa 	bl	8000550 <__aeabi_dmul>
 800935c:	f7f7 fba8 	bl	8000ab0 <__aeabi_d2iz>
 8009360:	f7f7 f88c 	bl	800047c <__aeabi_i2d>
 8009364:	4b4a      	ldr	r3, [pc, #296]	; (8009490 <__kernel_rem_pio2+0x340>)
 8009366:	2200      	movs	r2, #0
 8009368:	4680      	mov	r8, r0
 800936a:	4689      	mov	r9, r1
 800936c:	f7f7 f8f0 	bl	8000550 <__aeabi_dmul>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4630      	mov	r0, r6
 8009376:	4639      	mov	r1, r7
 8009378:	f7f6 ff32 	bl	80001e0 <__aeabi_dsub>
 800937c:	f7f7 fb98 	bl	8000ab0 <__aeabi_d2iz>
 8009380:	9b02      	ldr	r3, [sp, #8]
 8009382:	f843 0b04 	str.w	r0, [r3], #4
 8009386:	3d01      	subs	r5, #1
 8009388:	9302      	str	r3, [sp, #8]
 800938a:	ab70      	add	r3, sp, #448	; 0x1c0
 800938c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009394:	4640      	mov	r0, r8
 8009396:	4649      	mov	r1, r9
 8009398:	f7f6 ff24 	bl	80001e4 <__adddf3>
 800939c:	4606      	mov	r6, r0
 800939e:	460f      	mov	r7, r1
 80093a0:	e75b      	b.n	800925a <__kernel_rem_pio2+0x10a>
 80093a2:	d105      	bne.n	80093b0 <__kernel_rem_pio2+0x260>
 80093a4:	1e63      	subs	r3, r4, #1
 80093a6:	aa0c      	add	r2, sp, #48	; 0x30
 80093a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80093ac:	15c3      	asrs	r3, r0, #23
 80093ae:	e79b      	b.n	80092e8 <__kernel_rem_pio2+0x198>
 80093b0:	4b38      	ldr	r3, [pc, #224]	; (8009494 <__kernel_rem_pio2+0x344>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	f7f7 fb52 	bl	8000a5c <__aeabi_dcmpge>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d139      	bne.n	8009430 <__kernel_rem_pio2+0x2e0>
 80093bc:	9002      	str	r0, [sp, #8]
 80093be:	2200      	movs	r2, #0
 80093c0:	2300      	movs	r3, #0
 80093c2:	4630      	mov	r0, r6
 80093c4:	4639      	mov	r1, r7
 80093c6:	f7f7 fb2b 	bl	8000a20 <__aeabi_dcmpeq>
 80093ca:	2800      	cmp	r0, #0
 80093cc:	f000 80b4 	beq.w	8009538 <__kernel_rem_pio2+0x3e8>
 80093d0:	f104 3bff 	add.w	fp, r4, #4294967295
 80093d4:	465b      	mov	r3, fp
 80093d6:	2200      	movs	r2, #0
 80093d8:	9904      	ldr	r1, [sp, #16]
 80093da:	428b      	cmp	r3, r1
 80093dc:	da65      	bge.n	80094aa <__kernel_rem_pio2+0x35a>
 80093de:	2a00      	cmp	r2, #0
 80093e0:	d07b      	beq.n	80094da <__kernel_rem_pio2+0x38a>
 80093e2:	ab0c      	add	r3, sp, #48	; 0x30
 80093e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80093e8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f000 80a0 	beq.w	8009532 <__kernel_rem_pio2+0x3e2>
 80093f2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009478 <__kernel_rem_pio2+0x328>
 80093f6:	4650      	mov	r0, sl
 80093f8:	f000 fb32 	bl	8009a60 <scalbn>
 80093fc:	4f23      	ldr	r7, [pc, #140]	; (800948c <__kernel_rem_pio2+0x33c>)
 80093fe:	ec55 4b10 	vmov	r4, r5, d0
 8009402:	46d8      	mov	r8, fp
 8009404:	2600      	movs	r6, #0
 8009406:	f1b8 0f00 	cmp.w	r8, #0
 800940a:	f280 80cf 	bge.w	80095ac <__kernel_rem_pio2+0x45c>
 800940e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8009470 <__kernel_rem_pio2+0x320>
 8009412:	465f      	mov	r7, fp
 8009414:	f04f 0800 	mov.w	r8, #0
 8009418:	2f00      	cmp	r7, #0
 800941a:	f2c0 80fd 	blt.w	8009618 <__kernel_rem_pio2+0x4c8>
 800941e:	ab70      	add	r3, sp, #448	; 0x1c0
 8009420:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009498 <__kernel_rem_pio2+0x348>
 8009424:	ec55 4b18 	vmov	r4, r5, d8
 8009428:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800942c:	2600      	movs	r6, #0
 800942e:	e0e5      	b.n	80095fc <__kernel_rem_pio2+0x4ac>
 8009430:	2302      	movs	r3, #2
 8009432:	9302      	str	r3, [sp, #8]
 8009434:	e75c      	b.n	80092f0 <__kernel_rem_pio2+0x1a0>
 8009436:	f8db 3000 	ldr.w	r3, [fp]
 800943a:	b955      	cbnz	r5, 8009452 <__kernel_rem_pio2+0x302>
 800943c:	b123      	cbz	r3, 8009448 <__kernel_rem_pio2+0x2f8>
 800943e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009442:	f8cb 3000 	str.w	r3, [fp]
 8009446:	2301      	movs	r3, #1
 8009448:	3201      	adds	r2, #1
 800944a:	f10b 0b04 	add.w	fp, fp, #4
 800944e:	461d      	mov	r5, r3
 8009450:	e755      	b.n	80092fe <__kernel_rem_pio2+0x1ae>
 8009452:	1acb      	subs	r3, r1, r3
 8009454:	f8cb 3000 	str.w	r3, [fp]
 8009458:	462b      	mov	r3, r5
 800945a:	e7f5      	b.n	8009448 <__kernel_rem_pio2+0x2f8>
 800945c:	1e62      	subs	r2, r4, #1
 800945e:	ab0c      	add	r3, sp, #48	; 0x30
 8009460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009464:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009468:	a90c      	add	r1, sp, #48	; 0x30
 800946a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800946e:	e754      	b.n	800931a <__kernel_rem_pio2+0x1ca>
	...
 800947c:	3ff00000 	.word	0x3ff00000
 8009480:	08009dd0 	.word	0x08009dd0
 8009484:	40200000 	.word	0x40200000
 8009488:	3ff00000 	.word	0x3ff00000
 800948c:	3e700000 	.word	0x3e700000
 8009490:	41700000 	.word	0x41700000
 8009494:	3fe00000 	.word	0x3fe00000
 8009498:	08009d90 	.word	0x08009d90
 800949c:	1e62      	subs	r2, r4, #1
 800949e:	ab0c      	add	r3, sp, #48	; 0x30
 80094a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80094a8:	e7de      	b.n	8009468 <__kernel_rem_pio2+0x318>
 80094aa:	a90c      	add	r1, sp, #48	; 0x30
 80094ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80094b0:	3b01      	subs	r3, #1
 80094b2:	430a      	orrs	r2, r1
 80094b4:	e790      	b.n	80093d8 <__kernel_rem_pio2+0x288>
 80094b6:	3301      	adds	r3, #1
 80094b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80094bc:	2900      	cmp	r1, #0
 80094be:	d0fa      	beq.n	80094b6 <__kernel_rem_pio2+0x366>
 80094c0:	9a08      	ldr	r2, [sp, #32]
 80094c2:	18e3      	adds	r3, r4, r3
 80094c4:	18a6      	adds	r6, r4, r2
 80094c6:	aa20      	add	r2, sp, #128	; 0x80
 80094c8:	1c65      	adds	r5, r4, #1
 80094ca:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80094ce:	9302      	str	r3, [sp, #8]
 80094d0:	9b02      	ldr	r3, [sp, #8]
 80094d2:	42ab      	cmp	r3, r5
 80094d4:	da04      	bge.n	80094e0 <__kernel_rem_pio2+0x390>
 80094d6:	461c      	mov	r4, r3
 80094d8:	e6b5      	b.n	8009246 <__kernel_rem_pio2+0xf6>
 80094da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094dc:	2301      	movs	r3, #1
 80094de:	e7eb      	b.n	80094b8 <__kernel_rem_pio2+0x368>
 80094e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80094e6:	f7f6 ffc9 	bl	800047c <__aeabi_i2d>
 80094ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80094ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f0:	46b3      	mov	fp, r6
 80094f2:	461c      	mov	r4, r3
 80094f4:	2700      	movs	r7, #0
 80094f6:	f04f 0800 	mov.w	r8, #0
 80094fa:	f04f 0900 	mov.w	r9, #0
 80094fe:	9b06      	ldr	r3, [sp, #24]
 8009500:	429f      	cmp	r7, r3
 8009502:	dd06      	ble.n	8009512 <__kernel_rem_pio2+0x3c2>
 8009504:	ab70      	add	r3, sp, #448	; 0x1c0
 8009506:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800950a:	e9c3 8900 	strd	r8, r9, [r3]
 800950e:	3501      	adds	r5, #1
 8009510:	e7de      	b.n	80094d0 <__kernel_rem_pio2+0x380>
 8009512:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009516:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800951a:	f7f7 f819 	bl	8000550 <__aeabi_dmul>
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	4640      	mov	r0, r8
 8009524:	4649      	mov	r1, r9
 8009526:	f7f6 fe5d 	bl	80001e4 <__adddf3>
 800952a:	3701      	adds	r7, #1
 800952c:	4680      	mov	r8, r0
 800952e:	4689      	mov	r9, r1
 8009530:	e7e5      	b.n	80094fe <__kernel_rem_pio2+0x3ae>
 8009532:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009536:	e754      	b.n	80093e2 <__kernel_rem_pio2+0x292>
 8009538:	ec47 6b10 	vmov	d0, r6, r7
 800953c:	f1ca 0000 	rsb	r0, sl, #0
 8009540:	f000 fa8e 	bl	8009a60 <scalbn>
 8009544:	ec57 6b10 	vmov	r6, r7, d0
 8009548:	4b9f      	ldr	r3, [pc, #636]	; (80097c8 <__kernel_rem_pio2+0x678>)
 800954a:	ee10 0a10 	vmov	r0, s0
 800954e:	2200      	movs	r2, #0
 8009550:	4639      	mov	r1, r7
 8009552:	f7f7 fa83 	bl	8000a5c <__aeabi_dcmpge>
 8009556:	b300      	cbz	r0, 800959a <__kernel_rem_pio2+0x44a>
 8009558:	4b9c      	ldr	r3, [pc, #624]	; (80097cc <__kernel_rem_pio2+0x67c>)
 800955a:	2200      	movs	r2, #0
 800955c:	4630      	mov	r0, r6
 800955e:	4639      	mov	r1, r7
 8009560:	f7f6 fff6 	bl	8000550 <__aeabi_dmul>
 8009564:	f7f7 faa4 	bl	8000ab0 <__aeabi_d2iz>
 8009568:	4605      	mov	r5, r0
 800956a:	f7f6 ff87 	bl	800047c <__aeabi_i2d>
 800956e:	4b96      	ldr	r3, [pc, #600]	; (80097c8 <__kernel_rem_pio2+0x678>)
 8009570:	2200      	movs	r2, #0
 8009572:	f7f6 ffed 	bl	8000550 <__aeabi_dmul>
 8009576:	460b      	mov	r3, r1
 8009578:	4602      	mov	r2, r0
 800957a:	4639      	mov	r1, r7
 800957c:	4630      	mov	r0, r6
 800957e:	f7f6 fe2f 	bl	80001e0 <__aeabi_dsub>
 8009582:	f7f7 fa95 	bl	8000ab0 <__aeabi_d2iz>
 8009586:	f104 0b01 	add.w	fp, r4, #1
 800958a:	ab0c      	add	r3, sp, #48	; 0x30
 800958c:	f10a 0a18 	add.w	sl, sl, #24
 8009590:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009594:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009598:	e72b      	b.n	80093f2 <__kernel_rem_pio2+0x2a2>
 800959a:	4630      	mov	r0, r6
 800959c:	4639      	mov	r1, r7
 800959e:	f7f7 fa87 	bl	8000ab0 <__aeabi_d2iz>
 80095a2:	ab0c      	add	r3, sp, #48	; 0x30
 80095a4:	46a3      	mov	fp, r4
 80095a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80095aa:	e722      	b.n	80093f2 <__kernel_rem_pio2+0x2a2>
 80095ac:	ab70      	add	r3, sp, #448	; 0x1c0
 80095ae:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80095b2:	ab0c      	add	r3, sp, #48	; 0x30
 80095b4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80095b8:	f7f6 ff60 	bl	800047c <__aeabi_i2d>
 80095bc:	4622      	mov	r2, r4
 80095be:	462b      	mov	r3, r5
 80095c0:	f7f6 ffc6 	bl	8000550 <__aeabi_dmul>
 80095c4:	4632      	mov	r2, r6
 80095c6:	e9c9 0100 	strd	r0, r1, [r9]
 80095ca:	463b      	mov	r3, r7
 80095cc:	4620      	mov	r0, r4
 80095ce:	4629      	mov	r1, r5
 80095d0:	f7f6 ffbe 	bl	8000550 <__aeabi_dmul>
 80095d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80095d8:	4604      	mov	r4, r0
 80095da:	460d      	mov	r5, r1
 80095dc:	e713      	b.n	8009406 <__kernel_rem_pio2+0x2b6>
 80095de:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80095e2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80095e6:	f7f6 ffb3 	bl	8000550 <__aeabi_dmul>
 80095ea:	4602      	mov	r2, r0
 80095ec:	460b      	mov	r3, r1
 80095ee:	4620      	mov	r0, r4
 80095f0:	4629      	mov	r1, r5
 80095f2:	f7f6 fdf7 	bl	80001e4 <__adddf3>
 80095f6:	3601      	adds	r6, #1
 80095f8:	4604      	mov	r4, r0
 80095fa:	460d      	mov	r5, r1
 80095fc:	9b04      	ldr	r3, [sp, #16]
 80095fe:	429e      	cmp	r6, r3
 8009600:	dc01      	bgt.n	8009606 <__kernel_rem_pio2+0x4b6>
 8009602:	45b0      	cmp	r8, r6
 8009604:	daeb      	bge.n	80095de <__kernel_rem_pio2+0x48e>
 8009606:	ab48      	add	r3, sp, #288	; 0x120
 8009608:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800960c:	e9c3 4500 	strd	r4, r5, [r3]
 8009610:	3f01      	subs	r7, #1
 8009612:	f108 0801 	add.w	r8, r8, #1
 8009616:	e6ff      	b.n	8009418 <__kernel_rem_pio2+0x2c8>
 8009618:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800961a:	2b02      	cmp	r3, #2
 800961c:	dc0b      	bgt.n	8009636 <__kernel_rem_pio2+0x4e6>
 800961e:	2b00      	cmp	r3, #0
 8009620:	dc6e      	bgt.n	8009700 <__kernel_rem_pio2+0x5b0>
 8009622:	d045      	beq.n	80096b0 <__kernel_rem_pio2+0x560>
 8009624:	9b07      	ldr	r3, [sp, #28]
 8009626:	f003 0007 	and.w	r0, r3, #7
 800962a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800962e:	ecbd 8b02 	vpop	{d8}
 8009632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009636:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009638:	2b03      	cmp	r3, #3
 800963a:	d1f3      	bne.n	8009624 <__kernel_rem_pio2+0x4d4>
 800963c:	ab48      	add	r3, sp, #288	; 0x120
 800963e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8009642:	46d0      	mov	r8, sl
 8009644:	46d9      	mov	r9, fp
 8009646:	f1b9 0f00 	cmp.w	r9, #0
 800964a:	f1a8 0808 	sub.w	r8, r8, #8
 800964e:	dc64      	bgt.n	800971a <__kernel_rem_pio2+0x5ca>
 8009650:	465c      	mov	r4, fp
 8009652:	2c01      	cmp	r4, #1
 8009654:	f1aa 0a08 	sub.w	sl, sl, #8
 8009658:	dc7e      	bgt.n	8009758 <__kernel_rem_pio2+0x608>
 800965a:	2000      	movs	r0, #0
 800965c:	2100      	movs	r1, #0
 800965e:	f1bb 0f01 	cmp.w	fp, #1
 8009662:	f300 8097 	bgt.w	8009794 <__kernel_rem_pio2+0x644>
 8009666:	9b02      	ldr	r3, [sp, #8]
 8009668:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800966c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009670:	2b00      	cmp	r3, #0
 8009672:	f040 8099 	bne.w	80097a8 <__kernel_rem_pio2+0x658>
 8009676:	9b01      	ldr	r3, [sp, #4]
 8009678:	e9c3 5600 	strd	r5, r6, [r3]
 800967c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009680:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009684:	e7ce      	b.n	8009624 <__kernel_rem_pio2+0x4d4>
 8009686:	ab48      	add	r3, sp, #288	; 0x120
 8009688:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800968c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009690:	f7f6 fda8 	bl	80001e4 <__adddf3>
 8009694:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009698:	f1bb 0f00 	cmp.w	fp, #0
 800969c:	daf3      	bge.n	8009686 <__kernel_rem_pio2+0x536>
 800969e:	9b02      	ldr	r3, [sp, #8]
 80096a0:	b113      	cbz	r3, 80096a8 <__kernel_rem_pio2+0x558>
 80096a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096a6:	4619      	mov	r1, r3
 80096a8:	9b01      	ldr	r3, [sp, #4]
 80096aa:	e9c3 0100 	strd	r0, r1, [r3]
 80096ae:	e7b9      	b.n	8009624 <__kernel_rem_pio2+0x4d4>
 80096b0:	2000      	movs	r0, #0
 80096b2:	2100      	movs	r1, #0
 80096b4:	e7f0      	b.n	8009698 <__kernel_rem_pio2+0x548>
 80096b6:	ab48      	add	r3, sp, #288	; 0x120
 80096b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c0:	f7f6 fd90 	bl	80001e4 <__adddf3>
 80096c4:	3c01      	subs	r4, #1
 80096c6:	2c00      	cmp	r4, #0
 80096c8:	daf5      	bge.n	80096b6 <__kernel_rem_pio2+0x566>
 80096ca:	9b02      	ldr	r3, [sp, #8]
 80096cc:	b1e3      	cbz	r3, 8009708 <__kernel_rem_pio2+0x5b8>
 80096ce:	4602      	mov	r2, r0
 80096d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096d4:	9c01      	ldr	r4, [sp, #4]
 80096d6:	e9c4 2300 	strd	r2, r3, [r4]
 80096da:	4602      	mov	r2, r0
 80096dc:	460b      	mov	r3, r1
 80096de:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80096e2:	f7f6 fd7d 	bl	80001e0 <__aeabi_dsub>
 80096e6:	ad4a      	add	r5, sp, #296	; 0x128
 80096e8:	2401      	movs	r4, #1
 80096ea:	45a3      	cmp	fp, r4
 80096ec:	da0f      	bge.n	800970e <__kernel_rem_pio2+0x5be>
 80096ee:	9b02      	ldr	r3, [sp, #8]
 80096f0:	b113      	cbz	r3, 80096f8 <__kernel_rem_pio2+0x5a8>
 80096f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096f6:	4619      	mov	r1, r3
 80096f8:	9b01      	ldr	r3, [sp, #4]
 80096fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80096fe:	e791      	b.n	8009624 <__kernel_rem_pio2+0x4d4>
 8009700:	465c      	mov	r4, fp
 8009702:	2000      	movs	r0, #0
 8009704:	2100      	movs	r1, #0
 8009706:	e7de      	b.n	80096c6 <__kernel_rem_pio2+0x576>
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	e7e2      	b.n	80096d4 <__kernel_rem_pio2+0x584>
 800970e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009712:	f7f6 fd67 	bl	80001e4 <__adddf3>
 8009716:	3401      	adds	r4, #1
 8009718:	e7e7      	b.n	80096ea <__kernel_rem_pio2+0x59a>
 800971a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800971e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8009722:	4620      	mov	r0, r4
 8009724:	4632      	mov	r2, r6
 8009726:	463b      	mov	r3, r7
 8009728:	4629      	mov	r1, r5
 800972a:	f7f6 fd5b 	bl	80001e4 <__adddf3>
 800972e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009732:	4602      	mov	r2, r0
 8009734:	460b      	mov	r3, r1
 8009736:	4620      	mov	r0, r4
 8009738:	4629      	mov	r1, r5
 800973a:	f7f6 fd51 	bl	80001e0 <__aeabi_dsub>
 800973e:	4632      	mov	r2, r6
 8009740:	463b      	mov	r3, r7
 8009742:	f7f6 fd4f 	bl	80001e4 <__adddf3>
 8009746:	ed9d 7b04 	vldr	d7, [sp, #16]
 800974a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800974e:	ed88 7b00 	vstr	d7, [r8]
 8009752:	f109 39ff 	add.w	r9, r9, #4294967295
 8009756:	e776      	b.n	8009646 <__kernel_rem_pio2+0x4f6>
 8009758:	e9da 8900 	ldrd	r8, r9, [sl]
 800975c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009760:	4640      	mov	r0, r8
 8009762:	4632      	mov	r2, r6
 8009764:	463b      	mov	r3, r7
 8009766:	4649      	mov	r1, r9
 8009768:	f7f6 fd3c 	bl	80001e4 <__adddf3>
 800976c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009770:	4602      	mov	r2, r0
 8009772:	460b      	mov	r3, r1
 8009774:	4640      	mov	r0, r8
 8009776:	4649      	mov	r1, r9
 8009778:	f7f6 fd32 	bl	80001e0 <__aeabi_dsub>
 800977c:	4632      	mov	r2, r6
 800977e:	463b      	mov	r3, r7
 8009780:	f7f6 fd30 	bl	80001e4 <__adddf3>
 8009784:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009788:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800978c:	ed8a 7b00 	vstr	d7, [sl]
 8009790:	3c01      	subs	r4, #1
 8009792:	e75e      	b.n	8009652 <__kernel_rem_pio2+0x502>
 8009794:	ab48      	add	r3, sp, #288	; 0x120
 8009796:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800979a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979e:	f7f6 fd21 	bl	80001e4 <__adddf3>
 80097a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80097a6:	e75a      	b.n	800965e <__kernel_rem_pio2+0x50e>
 80097a8:	9b01      	ldr	r3, [sp, #4]
 80097aa:	9a01      	ldr	r2, [sp, #4]
 80097ac:	601d      	str	r5, [r3, #0]
 80097ae:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80097b2:	605c      	str	r4, [r3, #4]
 80097b4:	609f      	str	r7, [r3, #8]
 80097b6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80097ba:	60d3      	str	r3, [r2, #12]
 80097bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097c0:	6110      	str	r0, [r2, #16]
 80097c2:	6153      	str	r3, [r2, #20]
 80097c4:	e72e      	b.n	8009624 <__kernel_rem_pio2+0x4d4>
 80097c6:	bf00      	nop
 80097c8:	41700000 	.word	0x41700000
 80097cc:	3e700000 	.word	0x3e700000

080097d0 <__kernel_sin>:
 80097d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d4:	ed2d 8b04 	vpush	{d8-d9}
 80097d8:	eeb0 8a41 	vmov.f32	s16, s2
 80097dc:	eef0 8a61 	vmov.f32	s17, s3
 80097e0:	ec55 4b10 	vmov	r4, r5, d0
 80097e4:	b083      	sub	sp, #12
 80097e6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80097ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80097ee:	9001      	str	r0, [sp, #4]
 80097f0:	da06      	bge.n	8009800 <__kernel_sin+0x30>
 80097f2:	ee10 0a10 	vmov	r0, s0
 80097f6:	4629      	mov	r1, r5
 80097f8:	f7f7 f95a 	bl	8000ab0 <__aeabi_d2iz>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d051      	beq.n	80098a4 <__kernel_sin+0xd4>
 8009800:	4622      	mov	r2, r4
 8009802:	462b      	mov	r3, r5
 8009804:	4620      	mov	r0, r4
 8009806:	4629      	mov	r1, r5
 8009808:	f7f6 fea2 	bl	8000550 <__aeabi_dmul>
 800980c:	4682      	mov	sl, r0
 800980e:	468b      	mov	fp, r1
 8009810:	4602      	mov	r2, r0
 8009812:	460b      	mov	r3, r1
 8009814:	4620      	mov	r0, r4
 8009816:	4629      	mov	r1, r5
 8009818:	f7f6 fe9a 	bl	8000550 <__aeabi_dmul>
 800981c:	a341      	add	r3, pc, #260	; (adr r3, 8009924 <__kernel_sin+0x154>)
 800981e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009822:	4680      	mov	r8, r0
 8009824:	4689      	mov	r9, r1
 8009826:	4650      	mov	r0, sl
 8009828:	4659      	mov	r1, fp
 800982a:	f7f6 fe91 	bl	8000550 <__aeabi_dmul>
 800982e:	a33f      	add	r3, pc, #252	; (adr r3, 800992c <__kernel_sin+0x15c>)
 8009830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009834:	f7f6 fcd4 	bl	80001e0 <__aeabi_dsub>
 8009838:	4652      	mov	r2, sl
 800983a:	465b      	mov	r3, fp
 800983c:	f7f6 fe88 	bl	8000550 <__aeabi_dmul>
 8009840:	a33c      	add	r3, pc, #240	; (adr r3, 8009934 <__kernel_sin+0x164>)
 8009842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009846:	f7f6 fccd 	bl	80001e4 <__adddf3>
 800984a:	4652      	mov	r2, sl
 800984c:	465b      	mov	r3, fp
 800984e:	f7f6 fe7f 	bl	8000550 <__aeabi_dmul>
 8009852:	a33a      	add	r3, pc, #232	; (adr r3, 800993c <__kernel_sin+0x16c>)
 8009854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009858:	f7f6 fcc2 	bl	80001e0 <__aeabi_dsub>
 800985c:	4652      	mov	r2, sl
 800985e:	465b      	mov	r3, fp
 8009860:	f7f6 fe76 	bl	8000550 <__aeabi_dmul>
 8009864:	a337      	add	r3, pc, #220	; (adr r3, 8009944 <__kernel_sin+0x174>)
 8009866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986a:	f7f6 fcbb 	bl	80001e4 <__adddf3>
 800986e:	9b01      	ldr	r3, [sp, #4]
 8009870:	4606      	mov	r6, r0
 8009872:	460f      	mov	r7, r1
 8009874:	b9eb      	cbnz	r3, 80098b2 <__kernel_sin+0xe2>
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	4650      	mov	r0, sl
 800987c:	4659      	mov	r1, fp
 800987e:	f7f6 fe67 	bl	8000550 <__aeabi_dmul>
 8009882:	a325      	add	r3, pc, #148	; (adr r3, 8009918 <__kernel_sin+0x148>)
 8009884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009888:	f7f6 fcaa 	bl	80001e0 <__aeabi_dsub>
 800988c:	4642      	mov	r2, r8
 800988e:	464b      	mov	r3, r9
 8009890:	f7f6 fe5e 	bl	8000550 <__aeabi_dmul>
 8009894:	4602      	mov	r2, r0
 8009896:	460b      	mov	r3, r1
 8009898:	4620      	mov	r0, r4
 800989a:	4629      	mov	r1, r5
 800989c:	f7f6 fca2 	bl	80001e4 <__adddf3>
 80098a0:	4604      	mov	r4, r0
 80098a2:	460d      	mov	r5, r1
 80098a4:	ec45 4b10 	vmov	d0, r4, r5
 80098a8:	b003      	add	sp, #12
 80098aa:	ecbd 8b04 	vpop	{d8-d9}
 80098ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b2:	4b1b      	ldr	r3, [pc, #108]	; (8009920 <__kernel_sin+0x150>)
 80098b4:	ec51 0b18 	vmov	r0, r1, d8
 80098b8:	2200      	movs	r2, #0
 80098ba:	f7f6 fe49 	bl	8000550 <__aeabi_dmul>
 80098be:	4632      	mov	r2, r6
 80098c0:	ec41 0b19 	vmov	d9, r0, r1
 80098c4:	463b      	mov	r3, r7
 80098c6:	4640      	mov	r0, r8
 80098c8:	4649      	mov	r1, r9
 80098ca:	f7f6 fe41 	bl	8000550 <__aeabi_dmul>
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	ec51 0b19 	vmov	r0, r1, d9
 80098d6:	f7f6 fc83 	bl	80001e0 <__aeabi_dsub>
 80098da:	4652      	mov	r2, sl
 80098dc:	465b      	mov	r3, fp
 80098de:	f7f6 fe37 	bl	8000550 <__aeabi_dmul>
 80098e2:	ec53 2b18 	vmov	r2, r3, d8
 80098e6:	f7f6 fc7b 	bl	80001e0 <__aeabi_dsub>
 80098ea:	a30b      	add	r3, pc, #44	; (adr r3, 8009918 <__kernel_sin+0x148>)
 80098ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f0:	4606      	mov	r6, r0
 80098f2:	460f      	mov	r7, r1
 80098f4:	4640      	mov	r0, r8
 80098f6:	4649      	mov	r1, r9
 80098f8:	f7f6 fe2a 	bl	8000550 <__aeabi_dmul>
 80098fc:	4602      	mov	r2, r0
 80098fe:	460b      	mov	r3, r1
 8009900:	4630      	mov	r0, r6
 8009902:	4639      	mov	r1, r7
 8009904:	f7f6 fc6e 	bl	80001e4 <__adddf3>
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	4620      	mov	r0, r4
 800990e:	4629      	mov	r1, r5
 8009910:	f7f6 fc66 	bl	80001e0 <__aeabi_dsub>
 8009914:	e7c4      	b.n	80098a0 <__kernel_sin+0xd0>
 8009916:	bf00      	nop
 8009918:	55555549 	.word	0x55555549
 800991c:	3fc55555 	.word	0x3fc55555
 8009920:	3fe00000 	.word	0x3fe00000
 8009924:	5acfd57c 	.word	0x5acfd57c
 8009928:	3de5d93a 	.word	0x3de5d93a
 800992c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009930:	3e5ae5e6 	.word	0x3e5ae5e6
 8009934:	57b1fe7d 	.word	0x57b1fe7d
 8009938:	3ec71de3 	.word	0x3ec71de3
 800993c:	19c161d5 	.word	0x19c161d5
 8009940:	3f2a01a0 	.word	0x3f2a01a0
 8009944:	1110f8a6 	.word	0x1110f8a6
 8009948:	3f811111 	.word	0x3f811111

0800994c <fabs>:
 800994c:	ec51 0b10 	vmov	r0, r1, d0
 8009950:	ee10 2a10 	vmov	r2, s0
 8009954:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009958:	ec43 2b10 	vmov	d0, r2, r3
 800995c:	4770      	bx	lr
	...

08009960 <floor>:
 8009960:	ec51 0b10 	vmov	r0, r1, d0
 8009964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009968:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800996c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009970:	2e13      	cmp	r6, #19
 8009972:	ee10 5a10 	vmov	r5, s0
 8009976:	ee10 8a10 	vmov	r8, s0
 800997a:	460c      	mov	r4, r1
 800997c:	dc32      	bgt.n	80099e4 <floor+0x84>
 800997e:	2e00      	cmp	r6, #0
 8009980:	da14      	bge.n	80099ac <floor+0x4c>
 8009982:	a333      	add	r3, pc, #204	; (adr r3, 8009a50 <floor+0xf0>)
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	f7f6 fc2c 	bl	80001e4 <__adddf3>
 800998c:	2200      	movs	r2, #0
 800998e:	2300      	movs	r3, #0
 8009990:	f7f7 f86e 	bl	8000a70 <__aeabi_dcmpgt>
 8009994:	b138      	cbz	r0, 80099a6 <floor+0x46>
 8009996:	2c00      	cmp	r4, #0
 8009998:	da57      	bge.n	8009a4a <floor+0xea>
 800999a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800999e:	431d      	orrs	r5, r3
 80099a0:	d001      	beq.n	80099a6 <floor+0x46>
 80099a2:	4c2d      	ldr	r4, [pc, #180]	; (8009a58 <floor+0xf8>)
 80099a4:	2500      	movs	r5, #0
 80099a6:	4621      	mov	r1, r4
 80099a8:	4628      	mov	r0, r5
 80099aa:	e025      	b.n	80099f8 <floor+0x98>
 80099ac:	4f2b      	ldr	r7, [pc, #172]	; (8009a5c <floor+0xfc>)
 80099ae:	4137      	asrs	r7, r6
 80099b0:	ea01 0307 	and.w	r3, r1, r7
 80099b4:	4303      	orrs	r3, r0
 80099b6:	d01f      	beq.n	80099f8 <floor+0x98>
 80099b8:	a325      	add	r3, pc, #148	; (adr r3, 8009a50 <floor+0xf0>)
 80099ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099be:	f7f6 fc11 	bl	80001e4 <__adddf3>
 80099c2:	2200      	movs	r2, #0
 80099c4:	2300      	movs	r3, #0
 80099c6:	f7f7 f853 	bl	8000a70 <__aeabi_dcmpgt>
 80099ca:	2800      	cmp	r0, #0
 80099cc:	d0eb      	beq.n	80099a6 <floor+0x46>
 80099ce:	2c00      	cmp	r4, #0
 80099d0:	bfbe      	ittt	lt
 80099d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80099d6:	fa43 f606 	asrlt.w	r6, r3, r6
 80099da:	19a4      	addlt	r4, r4, r6
 80099dc:	ea24 0407 	bic.w	r4, r4, r7
 80099e0:	2500      	movs	r5, #0
 80099e2:	e7e0      	b.n	80099a6 <floor+0x46>
 80099e4:	2e33      	cmp	r6, #51	; 0x33
 80099e6:	dd0b      	ble.n	8009a00 <floor+0xa0>
 80099e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80099ec:	d104      	bne.n	80099f8 <floor+0x98>
 80099ee:	ee10 2a10 	vmov	r2, s0
 80099f2:	460b      	mov	r3, r1
 80099f4:	f7f6 fbf6 	bl	80001e4 <__adddf3>
 80099f8:	ec41 0b10 	vmov	d0, r0, r1
 80099fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a00:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009a04:	f04f 33ff 	mov.w	r3, #4294967295
 8009a08:	fa23 f707 	lsr.w	r7, r3, r7
 8009a0c:	4207      	tst	r7, r0
 8009a0e:	d0f3      	beq.n	80099f8 <floor+0x98>
 8009a10:	a30f      	add	r3, pc, #60	; (adr r3, 8009a50 <floor+0xf0>)
 8009a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a16:	f7f6 fbe5 	bl	80001e4 <__adddf3>
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f7f7 f827 	bl	8000a70 <__aeabi_dcmpgt>
 8009a22:	2800      	cmp	r0, #0
 8009a24:	d0bf      	beq.n	80099a6 <floor+0x46>
 8009a26:	2c00      	cmp	r4, #0
 8009a28:	da02      	bge.n	8009a30 <floor+0xd0>
 8009a2a:	2e14      	cmp	r6, #20
 8009a2c:	d103      	bne.n	8009a36 <floor+0xd6>
 8009a2e:	3401      	adds	r4, #1
 8009a30:	ea25 0507 	bic.w	r5, r5, r7
 8009a34:	e7b7      	b.n	80099a6 <floor+0x46>
 8009a36:	2301      	movs	r3, #1
 8009a38:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009a3c:	fa03 f606 	lsl.w	r6, r3, r6
 8009a40:	4435      	add	r5, r6
 8009a42:	4545      	cmp	r5, r8
 8009a44:	bf38      	it	cc
 8009a46:	18e4      	addcc	r4, r4, r3
 8009a48:	e7f2      	b.n	8009a30 <floor+0xd0>
 8009a4a:	2500      	movs	r5, #0
 8009a4c:	462c      	mov	r4, r5
 8009a4e:	e7aa      	b.n	80099a6 <floor+0x46>
 8009a50:	8800759c 	.word	0x8800759c
 8009a54:	7e37e43c 	.word	0x7e37e43c
 8009a58:	bff00000 	.word	0xbff00000
 8009a5c:	000fffff 	.word	0x000fffff

08009a60 <scalbn>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	ec55 4b10 	vmov	r4, r5, d0
 8009a66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	462b      	mov	r3, r5
 8009a6e:	b99a      	cbnz	r2, 8009a98 <scalbn+0x38>
 8009a70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009a74:	4323      	orrs	r3, r4
 8009a76:	d036      	beq.n	8009ae6 <scalbn+0x86>
 8009a78:	4b39      	ldr	r3, [pc, #228]	; (8009b60 <scalbn+0x100>)
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	ee10 0a10 	vmov	r0, s0
 8009a80:	2200      	movs	r2, #0
 8009a82:	f7f6 fd65 	bl	8000550 <__aeabi_dmul>
 8009a86:	4b37      	ldr	r3, [pc, #220]	; (8009b64 <scalbn+0x104>)
 8009a88:	429e      	cmp	r6, r3
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	460d      	mov	r5, r1
 8009a8e:	da10      	bge.n	8009ab2 <scalbn+0x52>
 8009a90:	a32b      	add	r3, pc, #172	; (adr r3, 8009b40 <scalbn+0xe0>)
 8009a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a96:	e03a      	b.n	8009b0e <scalbn+0xae>
 8009a98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009a9c:	428a      	cmp	r2, r1
 8009a9e:	d10c      	bne.n	8009aba <scalbn+0x5a>
 8009aa0:	ee10 2a10 	vmov	r2, s0
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	f7f6 fb9c 	bl	80001e4 <__adddf3>
 8009aac:	4604      	mov	r4, r0
 8009aae:	460d      	mov	r5, r1
 8009ab0:	e019      	b.n	8009ae6 <scalbn+0x86>
 8009ab2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	3a36      	subs	r2, #54	; 0x36
 8009aba:	4432      	add	r2, r6
 8009abc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009ac0:	428a      	cmp	r2, r1
 8009ac2:	dd08      	ble.n	8009ad6 <scalbn+0x76>
 8009ac4:	2d00      	cmp	r5, #0
 8009ac6:	a120      	add	r1, pc, #128	; (adr r1, 8009b48 <scalbn+0xe8>)
 8009ac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009acc:	da1c      	bge.n	8009b08 <scalbn+0xa8>
 8009ace:	a120      	add	r1, pc, #128	; (adr r1, 8009b50 <scalbn+0xf0>)
 8009ad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ad4:	e018      	b.n	8009b08 <scalbn+0xa8>
 8009ad6:	2a00      	cmp	r2, #0
 8009ad8:	dd08      	ble.n	8009aec <scalbn+0x8c>
 8009ada:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009ade:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009ae2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009ae6:	ec45 4b10 	vmov	d0, r4, r5
 8009aea:	bd70      	pop	{r4, r5, r6, pc}
 8009aec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009af0:	da19      	bge.n	8009b26 <scalbn+0xc6>
 8009af2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009af6:	429e      	cmp	r6, r3
 8009af8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009afc:	dd0a      	ble.n	8009b14 <scalbn+0xb4>
 8009afe:	a112      	add	r1, pc, #72	; (adr r1, 8009b48 <scalbn+0xe8>)
 8009b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1e2      	bne.n	8009ace <scalbn+0x6e>
 8009b08:	a30f      	add	r3, pc, #60	; (adr r3, 8009b48 <scalbn+0xe8>)
 8009b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0e:	f7f6 fd1f 	bl	8000550 <__aeabi_dmul>
 8009b12:	e7cb      	b.n	8009aac <scalbn+0x4c>
 8009b14:	a10a      	add	r1, pc, #40	; (adr r1, 8009b40 <scalbn+0xe0>)
 8009b16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d0b8      	beq.n	8009a90 <scalbn+0x30>
 8009b1e:	a10e      	add	r1, pc, #56	; (adr r1, 8009b58 <scalbn+0xf8>)
 8009b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b24:	e7b4      	b.n	8009a90 <scalbn+0x30>
 8009b26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009b2a:	3236      	adds	r2, #54	; 0x36
 8009b2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009b30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009b34:	4620      	mov	r0, r4
 8009b36:	4b0c      	ldr	r3, [pc, #48]	; (8009b68 <scalbn+0x108>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	e7e8      	b.n	8009b0e <scalbn+0xae>
 8009b3c:	f3af 8000 	nop.w
 8009b40:	c2f8f359 	.word	0xc2f8f359
 8009b44:	01a56e1f 	.word	0x01a56e1f
 8009b48:	8800759c 	.word	0x8800759c
 8009b4c:	7e37e43c 	.word	0x7e37e43c
 8009b50:	8800759c 	.word	0x8800759c
 8009b54:	fe37e43c 	.word	0xfe37e43c
 8009b58:	c2f8f359 	.word	0xc2f8f359
 8009b5c:	81a56e1f 	.word	0x81a56e1f
 8009b60:	43500000 	.word	0x43500000
 8009b64:	ffff3cb0 	.word	0xffff3cb0
 8009b68:	3c900000 	.word	0x3c900000

08009b6c <_init>:
 8009b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6e:	bf00      	nop
 8009b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b72:	bc08      	pop	{r3}
 8009b74:	469e      	mov	lr, r3
 8009b76:	4770      	bx	lr

08009b78 <_fini>:
 8009b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7a:	bf00      	nop
 8009b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b7e:	bc08      	pop	{r3}
 8009b80:	469e      	mov	lr, r3
 8009b82:	4770      	bx	lr
